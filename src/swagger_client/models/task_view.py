# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'ActionView',
        'event': 'EventView',
        'id': 'int',
        'open': 'bool',
        'resolved_message': 'str',
        'resolved_subj': 'str',
        'serial': 'int',
        'target_for': 'list[TargetView]'
    }

    attribute_map = {
        'action': 'action',
        'event': 'event',
        'id': 'id',
        'open': 'open',
        'resolved_message': 'resolved_message',
        'resolved_subj': 'resolved_subj',
        'serial': 'serial',
        'target_for': 'target_for'
    }

    def __init__(self, action=None, event=None, id=None, open=None, resolved_message=None, resolved_subj=None, serial=None, target_for=None):  # noqa: E501
        """TaskView - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._event = None
        self._id = None
        self._open = None
        self._resolved_message = None
        self._resolved_subj = None
        self._serial = None
        self._target_for = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if event is not None:
            self.event = event
        if id is not None:
            self.id = id
        if open is not None:
            self.open = open
        if resolved_message is not None:
            self.resolved_message = resolved_message
        if resolved_subj is not None:
            self.resolved_subj = resolved_subj
        if serial is not None:
            self.serial = serial
        if target_for is not None:
            self.target_for = target_for

    @property
    def action(self):
        """Gets the action of this TaskView.  # noqa: E501


        :return: The action of this TaskView.  # noqa: E501
        :rtype: ActionView
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this TaskView.


        :param action: The action of this TaskView.  # noqa: E501
        :type: ActionView
        """

        self._action = action

    @property
    def event(self):
        """Gets the event of this TaskView.  # noqa: E501


        :return: The event of this TaskView.  # noqa: E501
        :rtype: EventView
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this TaskView.


        :param event: The event of this TaskView.  # noqa: E501
        :type: EventView
        """

        self._event = event

    @property
    def id(self):
        """Gets the id of this TaskView.  # noqa: E501


        :return: The id of this TaskView.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskView.


        :param id: The id of this TaskView.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def open(self):
        """Gets the open of this TaskView.  # noqa: E501


        :return: The open of this TaskView.  # noqa: E501
        :rtype: bool
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this TaskView.


        :param open: The open of this TaskView.  # noqa: E501
        :type: bool
        """

        self._open = open

    @property
    def resolved_message(self):
        """Gets the resolved_message of this TaskView.  # noqa: E501


        :return: The resolved_message of this TaskView.  # noqa: E501
        :rtype: str
        """
        return self._resolved_message

    @resolved_message.setter
    def resolved_message(self, resolved_message):
        """Sets the resolved_message of this TaskView.


        :param resolved_message: The resolved_message of this TaskView.  # noqa: E501
        :type: str
        """

        self._resolved_message = resolved_message

    @property
    def resolved_subj(self):
        """Gets the resolved_subj of this TaskView.  # noqa: E501


        :return: The resolved_subj of this TaskView.  # noqa: E501
        :rtype: str
        """
        return self._resolved_subj

    @resolved_subj.setter
    def resolved_subj(self, resolved_subj):
        """Sets the resolved_subj of this TaskView.


        :param resolved_subj: The resolved_subj of this TaskView.  # noqa: E501
        :type: str
        """

        self._resolved_subj = resolved_subj

    @property
    def serial(self):
        """Gets the serial of this TaskView.  # noqa: E501


        :return: The serial of this TaskView.  # noqa: E501
        :rtype: int
        """
        return self._serial

    @serial.setter
    def serial(self, serial):
        """Sets the serial of this TaskView.


        :param serial: The serial of this TaskView.  # noqa: E501
        :type: int
        """

        self._serial = serial

    @property
    def target_for(self):
        """Gets the target_for of this TaskView.  # noqa: E501


        :return: The target_for of this TaskView.  # noqa: E501
        :rtype: list[TargetView]
        """
        return self._target_for

    @target_for.setter
    def target_for(self, target_for):
        """Sets the target_for of this TaskView.


        :param target_for: The target_for of this TaskView.  # noqa: E501
        :type: list[TargetView]
        """

        self._target_for = target_for

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
