# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScheduledEventInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rids': 'list[str]',
        'actual_end_date': 'int',
        'actual_start_date': 'int',
        'comments': 'str',
        'description': 'str',
        'event_type': 'str',
        'inputs': 'DataPackageInfo',
        'outputs': 'DataPackageInfo',
        'participants': 'list[ScheduledEventParticipantInfo]',
        'planned_end_date': 'int',
        'planned_start_date': 'int',
        'related_to_milestone': 'MilestoneInfo',
        'set_by_user': 'UserInfo',
        'tree_path_to_related_node': 'list[int]',
        'uuid': 'str'
    }

    attribute_map = {
        'rids': 'RIDs',
        'actual_end_date': 'actual_end_date',
        'actual_start_date': 'actual_start_date',
        'comments': 'comments',
        'description': 'description',
        'event_type': 'event_type',
        'inputs': 'inputs',
        'outputs': 'outputs',
        'participants': 'participants',
        'planned_end_date': 'planned_end_date',
        'planned_start_date': 'planned_start_date',
        'related_to_milestone': 'related_to_milestone',
        'set_by_user': 'set_by_user',
        'tree_path_to_related_node': 'tree_path_to_related_node',
        'uuid': 'uuid'
    }

    def __init__(self, rids=None, actual_end_date=None, actual_start_date=None, comments=None, description=None, event_type=None, inputs=None, outputs=None, participants=None, planned_end_date=None, planned_start_date=None, related_to_milestone=None, set_by_user=None, tree_path_to_related_node=None, uuid=None):  # noqa: E501
        """ScheduledEventInfo - a model defined in Swagger"""  # noqa: E501
        self._rids = None
        self._actual_end_date = None
        self._actual_start_date = None
        self._comments = None
        self._description = None
        self._event_type = None
        self._inputs = None
        self._outputs = None
        self._participants = None
        self._planned_end_date = None
        self._planned_start_date = None
        self._related_to_milestone = None
        self._set_by_user = None
        self._tree_path_to_related_node = None
        self._uuid = None
        self.discriminator = None
        if rids is not None:
            self.rids = rids
        if actual_end_date is not None:
            self.actual_end_date = actual_end_date
        if actual_start_date is not None:
            self.actual_start_date = actual_start_date
        if comments is not None:
            self.comments = comments
        if description is not None:
            self.description = description
        if event_type is not None:
            self.event_type = event_type
        if inputs is not None:
            self.inputs = inputs
        if outputs is not None:
            self.outputs = outputs
        if participants is not None:
            self.participants = participants
        if planned_end_date is not None:
            self.planned_end_date = planned_end_date
        if planned_start_date is not None:
            self.planned_start_date = planned_start_date
        if related_to_milestone is not None:
            self.related_to_milestone = related_to_milestone
        if set_by_user is not None:
            self.set_by_user = set_by_user
        if tree_path_to_related_node is not None:
            self.tree_path_to_related_node = tree_path_to_related_node
        if uuid is not None:
            self.uuid = uuid

    @property
    def rids(self):
        """Gets the rids of this ScheduledEventInfo.  # noqa: E501


        :return: The rids of this ScheduledEventInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._rids

    @rids.setter
    def rids(self, rids):
        """Sets the rids of this ScheduledEventInfo.


        :param rids: The rids of this ScheduledEventInfo.  # noqa: E501
        :type: list[str]
        """

        self._rids = rids

    @property
    def actual_end_date(self):
        """Gets the actual_end_date of this ScheduledEventInfo.  # noqa: E501


        :return: The actual_end_date of this ScheduledEventInfo.  # noqa: E501
        :rtype: int
        """
        return self._actual_end_date

    @actual_end_date.setter
    def actual_end_date(self, actual_end_date):
        """Sets the actual_end_date of this ScheduledEventInfo.


        :param actual_end_date: The actual_end_date of this ScheduledEventInfo.  # noqa: E501
        :type: int
        """

        self._actual_end_date = actual_end_date

    @property
    def actual_start_date(self):
        """Gets the actual_start_date of this ScheduledEventInfo.  # noqa: E501


        :return: The actual_start_date of this ScheduledEventInfo.  # noqa: E501
        :rtype: int
        """
        return self._actual_start_date

    @actual_start_date.setter
    def actual_start_date(self, actual_start_date):
        """Sets the actual_start_date of this ScheduledEventInfo.


        :param actual_start_date: The actual_start_date of this ScheduledEventInfo.  # noqa: E501
        :type: int
        """

        self._actual_start_date = actual_start_date

    @property
    def comments(self):
        """Gets the comments of this ScheduledEventInfo.  # noqa: E501


        :return: The comments of this ScheduledEventInfo.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this ScheduledEventInfo.


        :param comments: The comments of this ScheduledEventInfo.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def description(self):
        """Gets the description of this ScheduledEventInfo.  # noqa: E501


        :return: The description of this ScheduledEventInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ScheduledEventInfo.


        :param description: The description of this ScheduledEventInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def event_type(self):
        """Gets the event_type of this ScheduledEventInfo.  # noqa: E501


        :return: The event_type of this ScheduledEventInfo.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this ScheduledEventInfo.


        :param event_type: The event_type of this ScheduledEventInfo.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def inputs(self):
        """Gets the inputs of this ScheduledEventInfo.  # noqa: E501


        :return: The inputs of this ScheduledEventInfo.  # noqa: E501
        :rtype: DataPackageInfo
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this ScheduledEventInfo.


        :param inputs: The inputs of this ScheduledEventInfo.  # noqa: E501
        :type: DataPackageInfo
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this ScheduledEventInfo.  # noqa: E501


        :return: The outputs of this ScheduledEventInfo.  # noqa: E501
        :rtype: DataPackageInfo
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this ScheduledEventInfo.


        :param outputs: The outputs of this ScheduledEventInfo.  # noqa: E501
        :type: DataPackageInfo
        """

        self._outputs = outputs

    @property
    def participants(self):
        """Gets the participants of this ScheduledEventInfo.  # noqa: E501


        :return: The participants of this ScheduledEventInfo.  # noqa: E501
        :rtype: list[ScheduledEventParticipantInfo]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this ScheduledEventInfo.


        :param participants: The participants of this ScheduledEventInfo.  # noqa: E501
        :type: list[ScheduledEventParticipantInfo]
        """

        self._participants = participants

    @property
    def planned_end_date(self):
        """Gets the planned_end_date of this ScheduledEventInfo.  # noqa: E501


        :return: The planned_end_date of this ScheduledEventInfo.  # noqa: E501
        :rtype: int
        """
        return self._planned_end_date

    @planned_end_date.setter
    def planned_end_date(self, planned_end_date):
        """Sets the planned_end_date of this ScheduledEventInfo.


        :param planned_end_date: The planned_end_date of this ScheduledEventInfo.  # noqa: E501
        :type: int
        """

        self._planned_end_date = planned_end_date

    @property
    def planned_start_date(self):
        """Gets the planned_start_date of this ScheduledEventInfo.  # noqa: E501


        :return: The planned_start_date of this ScheduledEventInfo.  # noqa: E501
        :rtype: int
        """
        return self._planned_start_date

    @planned_start_date.setter
    def planned_start_date(self, planned_start_date):
        """Sets the planned_start_date of this ScheduledEventInfo.


        :param planned_start_date: The planned_start_date of this ScheduledEventInfo.  # noqa: E501
        :type: int
        """

        self._planned_start_date = planned_start_date

    @property
    def related_to_milestone(self):
        """Gets the related_to_milestone of this ScheduledEventInfo.  # noqa: E501


        :return: The related_to_milestone of this ScheduledEventInfo.  # noqa: E501
        :rtype: MilestoneInfo
        """
        return self._related_to_milestone

    @related_to_milestone.setter
    def related_to_milestone(self, related_to_milestone):
        """Sets the related_to_milestone of this ScheduledEventInfo.


        :param related_to_milestone: The related_to_milestone of this ScheduledEventInfo.  # noqa: E501
        :type: MilestoneInfo
        """

        self._related_to_milestone = related_to_milestone

    @property
    def set_by_user(self):
        """Gets the set_by_user of this ScheduledEventInfo.  # noqa: E501


        :return: The set_by_user of this ScheduledEventInfo.  # noqa: E501
        :rtype: UserInfo
        """
        return self._set_by_user

    @set_by_user.setter
    def set_by_user(self, set_by_user):
        """Sets the set_by_user of this ScheduledEventInfo.


        :param set_by_user: The set_by_user of this ScheduledEventInfo.  # noqa: E501
        :type: UserInfo
        """

        self._set_by_user = set_by_user

    @property
    def tree_path_to_related_node(self):
        """Gets the tree_path_to_related_node of this ScheduledEventInfo.  # noqa: E501


        :return: The tree_path_to_related_node of this ScheduledEventInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._tree_path_to_related_node

    @tree_path_to_related_node.setter
    def tree_path_to_related_node(self, tree_path_to_related_node):
        """Sets the tree_path_to_related_node of this ScheduledEventInfo.


        :param tree_path_to_related_node: The tree_path_to_related_node of this ScheduledEventInfo.  # noqa: E501
        :type: list[int]
        """

        self._tree_path_to_related_node = tree_path_to_related_node

    @property
    def uuid(self):
        """Gets the uuid of this ScheduledEventInfo.  # noqa: E501


        :return: The uuid of this ScheduledEventInfo.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ScheduledEventInfo.


        :param uuid: The uuid of this ScheduledEventInfo.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScheduledEventInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduledEventInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
