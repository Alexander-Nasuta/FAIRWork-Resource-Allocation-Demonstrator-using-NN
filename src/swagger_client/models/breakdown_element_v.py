# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BreakdownElementV(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bkdn_cntxt_id': 'list[int]',
        'bkdn_elem_def_id': 'int',
        'bkdn_elem_id': 'int',
        'bkdn_elem_vn_id': 'int',
        'bkdn_id': 'int',
        'bkdn_template_id': 'int',
        'bkdn_vn_id': 'int',
        'breakdown_name': 'str',
        'breakdown_type': 'str',
        'breakdown_ver': 'str',
        'children': 'list[BreakdownElementV]',
        'def_cntxt_id': 'int',
        'description': 'str',
        'domain': 'str',
        'id': 'str',
        'name': 'str',
        'role': 'str',
        'stage': 'str',
        'template_id': 'int',
        'version': 'str'
    }

    attribute_map = {
        'bkdn_cntxt_id': 'bkdn_cntxt_id',
        'bkdn_elem_def_id': 'bkdn_elem_def_id',
        'bkdn_elem_id': 'bkdn_elem_id',
        'bkdn_elem_vn_id': 'bkdn_elem_vn_id',
        'bkdn_id': 'bkdn_id',
        'bkdn_template_id': 'bkdn_template_id',
        'bkdn_vn_id': 'bkdn_vn_id',
        'breakdown_name': 'breakdown_name',
        'breakdown_type': 'breakdown_type',
        'breakdown_ver': 'breakdown_ver',
        'children': 'children',
        'def_cntxt_id': 'def_cntxt_id',
        'description': 'description',
        'domain': 'domain',
        'id': 'id',
        'name': 'name',
        'role': 'role',
        'stage': 'stage',
        'template_id': 'template_id',
        'version': 'version'
    }

    def __init__(self, bkdn_cntxt_id=None, bkdn_elem_def_id=None, bkdn_elem_id=None, bkdn_elem_vn_id=None, bkdn_id=None, bkdn_template_id=None, bkdn_vn_id=None, breakdown_name=None, breakdown_type=None, breakdown_ver=None, children=None, def_cntxt_id=None, description=None, domain=None, id=None, name=None, role=None, stage=None, template_id=None, version=None):  # noqa: E501
        """BreakdownElementV - a model defined in Swagger"""  # noqa: E501
        self._bkdn_cntxt_id = None
        self._bkdn_elem_def_id = None
        self._bkdn_elem_id = None
        self._bkdn_elem_vn_id = None
        self._bkdn_id = None
        self._bkdn_template_id = None
        self._bkdn_vn_id = None
        self._breakdown_name = None
        self._breakdown_type = None
        self._breakdown_ver = None
        self._children = None
        self._def_cntxt_id = None
        self._description = None
        self._domain = None
        self._id = None
        self._name = None
        self._role = None
        self._stage = None
        self._template_id = None
        self._version = None
        self.discriminator = None
        if bkdn_cntxt_id is not None:
            self.bkdn_cntxt_id = bkdn_cntxt_id
        if bkdn_elem_def_id is not None:
            self.bkdn_elem_def_id = bkdn_elem_def_id
        if bkdn_elem_id is not None:
            self.bkdn_elem_id = bkdn_elem_id
        if bkdn_elem_vn_id is not None:
            self.bkdn_elem_vn_id = bkdn_elem_vn_id
        if bkdn_id is not None:
            self.bkdn_id = bkdn_id
        if bkdn_template_id is not None:
            self.bkdn_template_id = bkdn_template_id
        if bkdn_vn_id is not None:
            self.bkdn_vn_id = bkdn_vn_id
        if breakdown_name is not None:
            self.breakdown_name = breakdown_name
        if breakdown_type is not None:
            self.breakdown_type = breakdown_type
        if breakdown_ver is not None:
            self.breakdown_ver = breakdown_ver
        if children is not None:
            self.children = children
        if def_cntxt_id is not None:
            self.def_cntxt_id = def_cntxt_id
        if description is not None:
            self.description = description
        if domain is not None:
            self.domain = domain
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if role is not None:
            self.role = role
        if stage is not None:
            self.stage = stage
        if template_id is not None:
            self.template_id = template_id
        if version is not None:
            self.version = version

    @property
    def bkdn_cntxt_id(self):
        """Gets the bkdn_cntxt_id of this BreakdownElementV.  # noqa: E501


        :return: The bkdn_cntxt_id of this BreakdownElementV.  # noqa: E501
        :rtype: list[int]
        """
        return self._bkdn_cntxt_id

    @bkdn_cntxt_id.setter
    def bkdn_cntxt_id(self, bkdn_cntxt_id):
        """Sets the bkdn_cntxt_id of this BreakdownElementV.


        :param bkdn_cntxt_id: The bkdn_cntxt_id of this BreakdownElementV.  # noqa: E501
        :type: list[int]
        """

        self._bkdn_cntxt_id = bkdn_cntxt_id

    @property
    def bkdn_elem_def_id(self):
        """Gets the bkdn_elem_def_id of this BreakdownElementV.  # noqa: E501


        :return: The bkdn_elem_def_id of this BreakdownElementV.  # noqa: E501
        :rtype: int
        """
        return self._bkdn_elem_def_id

    @bkdn_elem_def_id.setter
    def bkdn_elem_def_id(self, bkdn_elem_def_id):
        """Sets the bkdn_elem_def_id of this BreakdownElementV.


        :param bkdn_elem_def_id: The bkdn_elem_def_id of this BreakdownElementV.  # noqa: E501
        :type: int
        """

        self._bkdn_elem_def_id = bkdn_elem_def_id

    @property
    def bkdn_elem_id(self):
        """Gets the bkdn_elem_id of this BreakdownElementV.  # noqa: E501


        :return: The bkdn_elem_id of this BreakdownElementV.  # noqa: E501
        :rtype: int
        """
        return self._bkdn_elem_id

    @bkdn_elem_id.setter
    def bkdn_elem_id(self, bkdn_elem_id):
        """Sets the bkdn_elem_id of this BreakdownElementV.


        :param bkdn_elem_id: The bkdn_elem_id of this BreakdownElementV.  # noqa: E501
        :type: int
        """

        self._bkdn_elem_id = bkdn_elem_id

    @property
    def bkdn_elem_vn_id(self):
        """Gets the bkdn_elem_vn_id of this BreakdownElementV.  # noqa: E501


        :return: The bkdn_elem_vn_id of this BreakdownElementV.  # noqa: E501
        :rtype: int
        """
        return self._bkdn_elem_vn_id

    @bkdn_elem_vn_id.setter
    def bkdn_elem_vn_id(self, bkdn_elem_vn_id):
        """Sets the bkdn_elem_vn_id of this BreakdownElementV.


        :param bkdn_elem_vn_id: The bkdn_elem_vn_id of this BreakdownElementV.  # noqa: E501
        :type: int
        """

        self._bkdn_elem_vn_id = bkdn_elem_vn_id

    @property
    def bkdn_id(self):
        """Gets the bkdn_id of this BreakdownElementV.  # noqa: E501


        :return: The bkdn_id of this BreakdownElementV.  # noqa: E501
        :rtype: int
        """
        return self._bkdn_id

    @bkdn_id.setter
    def bkdn_id(self, bkdn_id):
        """Sets the bkdn_id of this BreakdownElementV.


        :param bkdn_id: The bkdn_id of this BreakdownElementV.  # noqa: E501
        :type: int
        """

        self._bkdn_id = bkdn_id

    @property
    def bkdn_template_id(self):
        """Gets the bkdn_template_id of this BreakdownElementV.  # noqa: E501


        :return: The bkdn_template_id of this BreakdownElementV.  # noqa: E501
        :rtype: int
        """
        return self._bkdn_template_id

    @bkdn_template_id.setter
    def bkdn_template_id(self, bkdn_template_id):
        """Sets the bkdn_template_id of this BreakdownElementV.


        :param bkdn_template_id: The bkdn_template_id of this BreakdownElementV.  # noqa: E501
        :type: int
        """

        self._bkdn_template_id = bkdn_template_id

    @property
    def bkdn_vn_id(self):
        """Gets the bkdn_vn_id of this BreakdownElementV.  # noqa: E501


        :return: The bkdn_vn_id of this BreakdownElementV.  # noqa: E501
        :rtype: int
        """
        return self._bkdn_vn_id

    @bkdn_vn_id.setter
    def bkdn_vn_id(self, bkdn_vn_id):
        """Sets the bkdn_vn_id of this BreakdownElementV.


        :param bkdn_vn_id: The bkdn_vn_id of this BreakdownElementV.  # noqa: E501
        :type: int
        """

        self._bkdn_vn_id = bkdn_vn_id

    @property
    def breakdown_name(self):
        """Gets the breakdown_name of this BreakdownElementV.  # noqa: E501


        :return: The breakdown_name of this BreakdownElementV.  # noqa: E501
        :rtype: str
        """
        return self._breakdown_name

    @breakdown_name.setter
    def breakdown_name(self, breakdown_name):
        """Sets the breakdown_name of this BreakdownElementV.


        :param breakdown_name: The breakdown_name of this BreakdownElementV.  # noqa: E501
        :type: str
        """

        self._breakdown_name = breakdown_name

    @property
    def breakdown_type(self):
        """Gets the breakdown_type of this BreakdownElementV.  # noqa: E501


        :return: The breakdown_type of this BreakdownElementV.  # noqa: E501
        :rtype: str
        """
        return self._breakdown_type

    @breakdown_type.setter
    def breakdown_type(self, breakdown_type):
        """Sets the breakdown_type of this BreakdownElementV.


        :param breakdown_type: The breakdown_type of this BreakdownElementV.  # noqa: E501
        :type: str
        """

        self._breakdown_type = breakdown_type

    @property
    def breakdown_ver(self):
        """Gets the breakdown_ver of this BreakdownElementV.  # noqa: E501


        :return: The breakdown_ver of this BreakdownElementV.  # noqa: E501
        :rtype: str
        """
        return self._breakdown_ver

    @breakdown_ver.setter
    def breakdown_ver(self, breakdown_ver):
        """Sets the breakdown_ver of this BreakdownElementV.


        :param breakdown_ver: The breakdown_ver of this BreakdownElementV.  # noqa: E501
        :type: str
        """

        self._breakdown_ver = breakdown_ver

    @property
    def children(self):
        """Gets the children of this BreakdownElementV.  # noqa: E501


        :return: The children of this BreakdownElementV.  # noqa: E501
        :rtype: list[BreakdownElementV]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this BreakdownElementV.


        :param children: The children of this BreakdownElementV.  # noqa: E501
        :type: list[BreakdownElementV]
        """

        self._children = children

    @property
    def def_cntxt_id(self):
        """Gets the def_cntxt_id of this BreakdownElementV.  # noqa: E501


        :return: The def_cntxt_id of this BreakdownElementV.  # noqa: E501
        :rtype: int
        """
        return self._def_cntxt_id

    @def_cntxt_id.setter
    def def_cntxt_id(self, def_cntxt_id):
        """Sets the def_cntxt_id of this BreakdownElementV.


        :param def_cntxt_id: The def_cntxt_id of this BreakdownElementV.  # noqa: E501
        :type: int
        """

        self._def_cntxt_id = def_cntxt_id

    @property
    def description(self):
        """Gets the description of this BreakdownElementV.  # noqa: E501


        :return: The description of this BreakdownElementV.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BreakdownElementV.


        :param description: The description of this BreakdownElementV.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def domain(self):
        """Gets the domain of this BreakdownElementV.  # noqa: E501


        :return: The domain of this BreakdownElementV.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this BreakdownElementV.


        :param domain: The domain of this BreakdownElementV.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def id(self):
        """Gets the id of this BreakdownElementV.  # noqa: E501


        :return: The id of this BreakdownElementV.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BreakdownElementV.


        :param id: The id of this BreakdownElementV.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BreakdownElementV.  # noqa: E501


        :return: The name of this BreakdownElementV.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BreakdownElementV.


        :param name: The name of this BreakdownElementV.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def role(self):
        """Gets the role of this BreakdownElementV.  # noqa: E501


        :return: The role of this BreakdownElementV.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this BreakdownElementV.


        :param role: The role of this BreakdownElementV.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def stage(self):
        """Gets the stage of this BreakdownElementV.  # noqa: E501


        :return: The stage of this BreakdownElementV.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this BreakdownElementV.


        :param stage: The stage of this BreakdownElementV.  # noqa: E501
        :type: str
        """

        self._stage = stage

    @property
    def template_id(self):
        """Gets the template_id of this BreakdownElementV.  # noqa: E501


        :return: The template_id of this BreakdownElementV.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this BreakdownElementV.


        :param template_id: The template_id of this BreakdownElementV.  # noqa: E501
        :type: int
        """

        self._template_id = template_id

    @property
    def version(self):
        """Gets the version of this BreakdownElementV.  # noqa: E501


        :return: The version of this BreakdownElementV.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BreakdownElementV.


        :param version: The version of this BreakdownElementV.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BreakdownElementV, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BreakdownElementV):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
