# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimpleAssignment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ass_id': 'int',
        'ass_type': 'str',
        'role': 'str',
        'val': 'str'
    }

    attribute_map = {
        'ass_id': 'ass_id',
        'ass_type': 'ass_type',
        'role': 'role',
        'val': 'val'
    }

    def __init__(self, ass_id=None, ass_type=None, role=None, val=None):  # noqa: E501
        """SimpleAssignment - a model defined in Swagger"""  # noqa: E501
        self._ass_id = None
        self._ass_type = None
        self._role = None
        self._val = None
        self.discriminator = None
        if ass_id is not None:
            self.ass_id = ass_id
        if ass_type is not None:
            self.ass_type = ass_type
        if role is not None:
            self.role = role
        if val is not None:
            self.val = val

    @property
    def ass_id(self):
        """Gets the ass_id of this SimpleAssignment.  # noqa: E501


        :return: The ass_id of this SimpleAssignment.  # noqa: E501
        :rtype: int
        """
        return self._ass_id

    @ass_id.setter
    def ass_id(self, ass_id):
        """Sets the ass_id of this SimpleAssignment.


        :param ass_id: The ass_id of this SimpleAssignment.  # noqa: E501
        :type: int
        """

        self._ass_id = ass_id

    @property
    def ass_type(self):
        """Gets the ass_type of this SimpleAssignment.  # noqa: E501


        :return: The ass_type of this SimpleAssignment.  # noqa: E501
        :rtype: str
        """
        return self._ass_type

    @ass_type.setter
    def ass_type(self, ass_type):
        """Sets the ass_type of this SimpleAssignment.


        :param ass_type: The ass_type of this SimpleAssignment.  # noqa: E501
        :type: str
        """

        self._ass_type = ass_type

    @property
    def role(self):
        """Gets the role of this SimpleAssignment.  # noqa: E501


        :return: The role of this SimpleAssignment.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this SimpleAssignment.


        :param role: The role of this SimpleAssignment.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def val(self):
        """Gets the val of this SimpleAssignment.  # noqa: E501


        :return: The val of this SimpleAssignment.  # noqa: E501
        :rtype: str
        """
        return self._val

    @val.setter
    def val(self, val):
        """Sets the val of this SimpleAssignment.


        :param val: The val of this SimpleAssignment.  # noqa: E501
        :type: str
        """

        self._val = val

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleAssignment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleAssignment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
