# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChangesLogItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'breakdown_version': 'str',
        'change_trace': 'str',
        'id': 'int',
        'operation': 'str',
        'timestamp': 'str',
        'user': 'str',
        'user_remark': 'str'
    }

    attribute_map = {
        'breakdown_version': 'breakdown_version',
        'change_trace': 'change_trace',
        'id': 'id',
        'operation': 'operation',
        'timestamp': 'timestamp',
        'user': 'user',
        'user_remark': 'user_remark'
    }

    def __init__(self, breakdown_version=None, change_trace=None, id=None, operation=None, timestamp=None, user=None, user_remark=None):  # noqa: E501
        """ChangesLogItem - a model defined in Swagger"""  # noqa: E501
        self._breakdown_version = None
        self._change_trace = None
        self._id = None
        self._operation = None
        self._timestamp = None
        self._user = None
        self._user_remark = None
        self.discriminator = None
        if breakdown_version is not None:
            self.breakdown_version = breakdown_version
        if change_trace is not None:
            self.change_trace = change_trace
        if id is not None:
            self.id = id
        if operation is not None:
            self.operation = operation
        if timestamp is not None:
            self.timestamp = timestamp
        if user is not None:
            self.user = user
        if user_remark is not None:
            self.user_remark = user_remark

    @property
    def breakdown_version(self):
        """Gets the breakdown_version of this ChangesLogItem.  # noqa: E501


        :return: The breakdown_version of this ChangesLogItem.  # noqa: E501
        :rtype: str
        """
        return self._breakdown_version

    @breakdown_version.setter
    def breakdown_version(self, breakdown_version):
        """Sets the breakdown_version of this ChangesLogItem.


        :param breakdown_version: The breakdown_version of this ChangesLogItem.  # noqa: E501
        :type: str
        """

        self._breakdown_version = breakdown_version

    @property
    def change_trace(self):
        """Gets the change_trace of this ChangesLogItem.  # noqa: E501


        :return: The change_trace of this ChangesLogItem.  # noqa: E501
        :rtype: str
        """
        return self._change_trace

    @change_trace.setter
    def change_trace(self, change_trace):
        """Sets the change_trace of this ChangesLogItem.


        :param change_trace: The change_trace of this ChangesLogItem.  # noqa: E501
        :type: str
        """

        self._change_trace = change_trace

    @property
    def id(self):
        """Gets the id of this ChangesLogItem.  # noqa: E501


        :return: The id of this ChangesLogItem.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChangesLogItem.


        :param id: The id of this ChangesLogItem.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def operation(self):
        """Gets the operation of this ChangesLogItem.  # noqa: E501


        :return: The operation of this ChangesLogItem.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this ChangesLogItem.


        :param operation: The operation of this ChangesLogItem.  # noqa: E501
        :type: str
        """

        self._operation = operation

    @property
    def timestamp(self):
        """Gets the timestamp of this ChangesLogItem.  # noqa: E501


        :return: The timestamp of this ChangesLogItem.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ChangesLogItem.


        :param timestamp: The timestamp of this ChangesLogItem.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def user(self):
        """Gets the user of this ChangesLogItem.  # noqa: E501


        :return: The user of this ChangesLogItem.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ChangesLogItem.


        :param user: The user of this ChangesLogItem.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def user_remark(self):
        """Gets the user_remark of this ChangesLogItem.  # noqa: E501


        :return: The user_remark of this ChangesLogItem.  # noqa: E501
        :rtype: str
        """
        return self._user_remark

    @user_remark.setter
    def user_remark(self, user_remark):
        """Sets the user_remark of this ChangesLogItem.


        :param user_remark: The user_remark of this ChangesLogItem.  # noqa: E501
        :type: str
        """

        self._user_remark = user_remark

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangesLogItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangesLogItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
