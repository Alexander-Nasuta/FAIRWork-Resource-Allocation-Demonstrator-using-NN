# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BreakdownElementInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'children': 'list[BreakdownElementInfo]',
        'children_count': 'int',
        'children_loaded': 'bool',
        'classified_as': 'list[ClassInfo]',
        'created_by_user': 'str',
        'data_contents': 'list[DataFileInfo]',
        'date_created': 'str',
        'date_last_modified': 'str',
        'datetimes': 'list[DtInfo]',
        'described_as': 'list[DescrInfo]',
        'description': 'str',
        'element_type': 'str',
        'has_child_occurrences': 'bool',
        'has_occurrences': 'bool',
        'has_shape_elements': 'bool',
        'id': 'str',
        'ids': 'list[IdInfo]',
        'instance_id': 'int',
        'is_part': 'bool',
        'is_part_of_subdomain': 'int',
        'is_requirement': 'bool',
        'is_root_of_subdomain': 'int',
        'last_modified_by_user': 'str',
        'local_occurrence': 'bool',
        'name': 'str',
        'occurrence': 'BreakdownElementInfo',
        'occurrence_users': 'list[int]',
        'orgs': 'list[BeOrgReferenceInfo]',
        'parent': 'BreakdownElementInfo',
        'parents': 'list[NodeLocations]',
        'permissions': 'PermissionsInfo',
        'persons': 'list[PersonInfo]',
        'phase': 'str',
        'properties': 'list[SimpleProperty]',
        'quantity': 'str',
        'rels': 'list[BeReferenceInfo]',
        'subdomains': 'list[SubdomainInfo]',
        'templates': 'list[DocumentTemplateInfo]',
        'version_id': 'str'
    }

    attribute_map = {
        'children': 'children',
        'children_count': 'children_count',
        'children_loaded': 'children_loaded',
        'classified_as': 'classified_as',
        'created_by_user': 'created_by_user',
        'data_contents': 'data_contents',
        'date_created': 'date_created',
        'date_last_modified': 'date_last_modified',
        'datetimes': 'datetimes',
        'described_as': 'described_as',
        'description': 'description',
        'element_type': 'element_type',
        'has_child_occurrences': 'has_child_occurrences',
        'has_occurrences': 'has_occurrences',
        'has_shape_elements': 'has_shape_elements',
        'id': 'id',
        'ids': 'ids',
        'instance_id': 'instance_id',
        'is_part': 'is_part',
        'is_part_of_subdomain': 'is_part_of_subdomain',
        'is_requirement': 'is_requirement',
        'is_root_of_subdomain': 'is_root_of_subdomain',
        'last_modified_by_user': 'last_modified_by_user',
        'local_occurrence': 'local_occurrence',
        'name': 'name',
        'occurrence': 'occurrence',
        'occurrence_users': 'occurrence_users',
        'orgs': 'orgs',
        'parent': 'parent',
        'parents': 'parents',
        'permissions': 'permissions',
        'persons': 'persons',
        'phase': 'phase',
        'properties': 'properties',
        'quantity': 'quantity',
        'rels': 'rels',
        'subdomains': 'subdomains',
        'templates': 'templates',
        'version_id': 'version_id'
    }

    def __init__(self, children=None, children_count=None, children_loaded=None, classified_as=None, created_by_user=None, data_contents=None, date_created=None, date_last_modified=None, datetimes=None, described_as=None, description=None, element_type=None, has_child_occurrences=None, has_occurrences=None, has_shape_elements=None, id=None, ids=None, instance_id=None, is_part=None, is_part_of_subdomain=None, is_requirement=None, is_root_of_subdomain=None, last_modified_by_user=None, local_occurrence=None, name=None, occurrence=None, occurrence_users=None, orgs=None, parent=None, parents=None, permissions=None, persons=None, phase=None, properties=None, quantity=None, rels=None, subdomains=None, templates=None, version_id=None):  # noqa: E501
        """BreakdownElementInfo - a model defined in Swagger"""  # noqa: E501
        self._children = None
        self._children_count = None
        self._children_loaded = None
        self._classified_as = None
        self._created_by_user = None
        self._data_contents = None
        self._date_created = None
        self._date_last_modified = None
        self._datetimes = None
        self._described_as = None
        self._description = None
        self._element_type = None
        self._has_child_occurrences = None
        self._has_occurrences = None
        self._has_shape_elements = None
        self._id = None
        self._ids = None
        self._instance_id = None
        self._is_part = None
        self._is_part_of_subdomain = None
        self._is_requirement = None
        self._is_root_of_subdomain = None
        self._last_modified_by_user = None
        self._local_occurrence = None
        self._name = None
        self._occurrence = None
        self._occurrence_users = None
        self._orgs = None
        self._parent = None
        self._parents = None
        self._permissions = None
        self._persons = None
        self._phase = None
        self._properties = None
        self._quantity = None
        self._rels = None
        self._subdomains = None
        self._templates = None
        self._version_id = None
        self.discriminator = None
        if children is not None:
            self.children = children
        if children_count is not None:
            self.children_count = children_count
        if children_loaded is not None:
            self.children_loaded = children_loaded
        if classified_as is not None:
            self.classified_as = classified_as
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if data_contents is not None:
            self.data_contents = data_contents
        if date_created is not None:
            self.date_created = date_created
        if date_last_modified is not None:
            self.date_last_modified = date_last_modified
        if datetimes is not None:
            self.datetimes = datetimes
        if described_as is not None:
            self.described_as = described_as
        if description is not None:
            self.description = description
        if element_type is not None:
            self.element_type = element_type
        if has_child_occurrences is not None:
            self.has_child_occurrences = has_child_occurrences
        if has_occurrences is not None:
            self.has_occurrences = has_occurrences
        if has_shape_elements is not None:
            self.has_shape_elements = has_shape_elements
        if id is not None:
            self.id = id
        if ids is not None:
            self.ids = ids
        if instance_id is not None:
            self.instance_id = instance_id
        if is_part is not None:
            self.is_part = is_part
        if is_part_of_subdomain is not None:
            self.is_part_of_subdomain = is_part_of_subdomain
        if is_requirement is not None:
            self.is_requirement = is_requirement
        if is_root_of_subdomain is not None:
            self.is_root_of_subdomain = is_root_of_subdomain
        if last_modified_by_user is not None:
            self.last_modified_by_user = last_modified_by_user
        if local_occurrence is not None:
            self.local_occurrence = local_occurrence
        if name is not None:
            self.name = name
        if occurrence is not None:
            self.occurrence = occurrence
        if occurrence_users is not None:
            self.occurrence_users = occurrence_users
        if orgs is not None:
            self.orgs = orgs
        if parent is not None:
            self.parent = parent
        if parents is not None:
            self.parents = parents
        if permissions is not None:
            self.permissions = permissions
        if persons is not None:
            self.persons = persons
        if phase is not None:
            self.phase = phase
        if properties is not None:
            self.properties = properties
        if quantity is not None:
            self.quantity = quantity
        if rels is not None:
            self.rels = rels
        if subdomains is not None:
            self.subdomains = subdomains
        if templates is not None:
            self.templates = templates
        if version_id is not None:
            self.version_id = version_id

    @property
    def children(self):
        """Gets the children of this BreakdownElementInfo.  # noqa: E501


        :return: The children of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[BreakdownElementInfo]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this BreakdownElementInfo.


        :param children: The children of this BreakdownElementInfo.  # noqa: E501
        :type: list[BreakdownElementInfo]
        """

        self._children = children

    @property
    def children_count(self):
        """Gets the children_count of this BreakdownElementInfo.  # noqa: E501


        :return: The children_count of this BreakdownElementInfo.  # noqa: E501
        :rtype: int
        """
        return self._children_count

    @children_count.setter
    def children_count(self, children_count):
        """Sets the children_count of this BreakdownElementInfo.


        :param children_count: The children_count of this BreakdownElementInfo.  # noqa: E501
        :type: int
        """

        self._children_count = children_count

    @property
    def children_loaded(self):
        """Gets the children_loaded of this BreakdownElementInfo.  # noqa: E501


        :return: The children_loaded of this BreakdownElementInfo.  # noqa: E501
        :rtype: bool
        """
        return self._children_loaded

    @children_loaded.setter
    def children_loaded(self, children_loaded):
        """Sets the children_loaded of this BreakdownElementInfo.


        :param children_loaded: The children_loaded of this BreakdownElementInfo.  # noqa: E501
        :type: bool
        """

        self._children_loaded = children_loaded

    @property
    def classified_as(self):
        """Gets the classified_as of this BreakdownElementInfo.  # noqa: E501


        :return: The classified_as of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[ClassInfo]
        """
        return self._classified_as

    @classified_as.setter
    def classified_as(self, classified_as):
        """Sets the classified_as of this BreakdownElementInfo.


        :param classified_as: The classified_as of this BreakdownElementInfo.  # noqa: E501
        :type: list[ClassInfo]
        """

        self._classified_as = classified_as

    @property
    def created_by_user(self):
        """Gets the created_by_user of this BreakdownElementInfo.  # noqa: E501


        :return: The created_by_user of this BreakdownElementInfo.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this BreakdownElementInfo.


        :param created_by_user: The created_by_user of this BreakdownElementInfo.  # noqa: E501
        :type: str
        """

        self._created_by_user = created_by_user

    @property
    def data_contents(self):
        """Gets the data_contents of this BreakdownElementInfo.  # noqa: E501


        :return: The data_contents of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[DataFileInfo]
        """
        return self._data_contents

    @data_contents.setter
    def data_contents(self, data_contents):
        """Sets the data_contents of this BreakdownElementInfo.


        :param data_contents: The data_contents of this BreakdownElementInfo.  # noqa: E501
        :type: list[DataFileInfo]
        """

        self._data_contents = data_contents

    @property
    def date_created(self):
        """Gets the date_created of this BreakdownElementInfo.  # noqa: E501


        :return: The date_created of this BreakdownElementInfo.  # noqa: E501
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this BreakdownElementInfo.


        :param date_created: The date_created of this BreakdownElementInfo.  # noqa: E501
        :type: str
        """

        self._date_created = date_created

    @property
    def date_last_modified(self):
        """Gets the date_last_modified of this BreakdownElementInfo.  # noqa: E501


        :return: The date_last_modified of this BreakdownElementInfo.  # noqa: E501
        :rtype: str
        """
        return self._date_last_modified

    @date_last_modified.setter
    def date_last_modified(self, date_last_modified):
        """Sets the date_last_modified of this BreakdownElementInfo.


        :param date_last_modified: The date_last_modified of this BreakdownElementInfo.  # noqa: E501
        :type: str
        """

        self._date_last_modified = date_last_modified

    @property
    def datetimes(self):
        """Gets the datetimes of this BreakdownElementInfo.  # noqa: E501


        :return: The datetimes of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[DtInfo]
        """
        return self._datetimes

    @datetimes.setter
    def datetimes(self, datetimes):
        """Sets the datetimes of this BreakdownElementInfo.


        :param datetimes: The datetimes of this BreakdownElementInfo.  # noqa: E501
        :type: list[DtInfo]
        """

        self._datetimes = datetimes

    @property
    def described_as(self):
        """Gets the described_as of this BreakdownElementInfo.  # noqa: E501


        :return: The described_as of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[DescrInfo]
        """
        return self._described_as

    @described_as.setter
    def described_as(self, described_as):
        """Sets the described_as of this BreakdownElementInfo.


        :param described_as: The described_as of this BreakdownElementInfo.  # noqa: E501
        :type: list[DescrInfo]
        """

        self._described_as = described_as

    @property
    def description(self):
        """Gets the description of this BreakdownElementInfo.  # noqa: E501


        :return: The description of this BreakdownElementInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BreakdownElementInfo.


        :param description: The description of this BreakdownElementInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def element_type(self):
        """Gets the element_type of this BreakdownElementInfo.  # noqa: E501


        :return: The element_type of this BreakdownElementInfo.  # noqa: E501
        :rtype: str
        """
        return self._element_type

    @element_type.setter
    def element_type(self, element_type):
        """Sets the element_type of this BreakdownElementInfo.


        :param element_type: The element_type of this BreakdownElementInfo.  # noqa: E501
        :type: str
        """

        self._element_type = element_type

    @property
    def has_child_occurrences(self):
        """Gets the has_child_occurrences of this BreakdownElementInfo.  # noqa: E501


        :return: The has_child_occurrences of this BreakdownElementInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_child_occurrences

    @has_child_occurrences.setter
    def has_child_occurrences(self, has_child_occurrences):
        """Sets the has_child_occurrences of this BreakdownElementInfo.


        :param has_child_occurrences: The has_child_occurrences of this BreakdownElementInfo.  # noqa: E501
        :type: bool
        """

        self._has_child_occurrences = has_child_occurrences

    @property
    def has_occurrences(self):
        """Gets the has_occurrences of this BreakdownElementInfo.  # noqa: E501


        :return: The has_occurrences of this BreakdownElementInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_occurrences

    @has_occurrences.setter
    def has_occurrences(self, has_occurrences):
        """Sets the has_occurrences of this BreakdownElementInfo.


        :param has_occurrences: The has_occurrences of this BreakdownElementInfo.  # noqa: E501
        :type: bool
        """

        self._has_occurrences = has_occurrences

    @property
    def has_shape_elements(self):
        """Gets the has_shape_elements of this BreakdownElementInfo.  # noqa: E501


        :return: The has_shape_elements of this BreakdownElementInfo.  # noqa: E501
        :rtype: bool
        """
        return self._has_shape_elements

    @has_shape_elements.setter
    def has_shape_elements(self, has_shape_elements):
        """Sets the has_shape_elements of this BreakdownElementInfo.


        :param has_shape_elements: The has_shape_elements of this BreakdownElementInfo.  # noqa: E501
        :type: bool
        """

        self._has_shape_elements = has_shape_elements

    @property
    def id(self):
        """Gets the id of this BreakdownElementInfo.  # noqa: E501


        :return: The id of this BreakdownElementInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BreakdownElementInfo.


        :param id: The id of this BreakdownElementInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ids(self):
        """Gets the ids of this BreakdownElementInfo.  # noqa: E501


        :return: The ids of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[IdInfo]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this BreakdownElementInfo.


        :param ids: The ids of this BreakdownElementInfo.  # noqa: E501
        :type: list[IdInfo]
        """

        self._ids = ids

    @property
    def instance_id(self):
        """Gets the instance_id of this BreakdownElementInfo.  # noqa: E501


        :return: The instance_id of this BreakdownElementInfo.  # noqa: E501
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this BreakdownElementInfo.


        :param instance_id: The instance_id of this BreakdownElementInfo.  # noqa: E501
        :type: int
        """

        self._instance_id = instance_id

    @property
    def is_part(self):
        """Gets the is_part of this BreakdownElementInfo.  # noqa: E501


        :return: The is_part of this BreakdownElementInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_part

    @is_part.setter
    def is_part(self, is_part):
        """Sets the is_part of this BreakdownElementInfo.


        :param is_part: The is_part of this BreakdownElementInfo.  # noqa: E501
        :type: bool
        """

        self._is_part = is_part

    @property
    def is_part_of_subdomain(self):
        """Gets the is_part_of_subdomain of this BreakdownElementInfo.  # noqa: E501


        :return: The is_part_of_subdomain of this BreakdownElementInfo.  # noqa: E501
        :rtype: int
        """
        return self._is_part_of_subdomain

    @is_part_of_subdomain.setter
    def is_part_of_subdomain(self, is_part_of_subdomain):
        """Sets the is_part_of_subdomain of this BreakdownElementInfo.


        :param is_part_of_subdomain: The is_part_of_subdomain of this BreakdownElementInfo.  # noqa: E501
        :type: int
        """

        self._is_part_of_subdomain = is_part_of_subdomain

    @property
    def is_requirement(self):
        """Gets the is_requirement of this BreakdownElementInfo.  # noqa: E501


        :return: The is_requirement of this BreakdownElementInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_requirement

    @is_requirement.setter
    def is_requirement(self, is_requirement):
        """Sets the is_requirement of this BreakdownElementInfo.


        :param is_requirement: The is_requirement of this BreakdownElementInfo.  # noqa: E501
        :type: bool
        """

        self._is_requirement = is_requirement

    @property
    def is_root_of_subdomain(self):
        """Gets the is_root_of_subdomain of this BreakdownElementInfo.  # noqa: E501


        :return: The is_root_of_subdomain of this BreakdownElementInfo.  # noqa: E501
        :rtype: int
        """
        return self._is_root_of_subdomain

    @is_root_of_subdomain.setter
    def is_root_of_subdomain(self, is_root_of_subdomain):
        """Sets the is_root_of_subdomain of this BreakdownElementInfo.


        :param is_root_of_subdomain: The is_root_of_subdomain of this BreakdownElementInfo.  # noqa: E501
        :type: int
        """

        self._is_root_of_subdomain = is_root_of_subdomain

    @property
    def last_modified_by_user(self):
        """Gets the last_modified_by_user of this BreakdownElementInfo.  # noqa: E501


        :return: The last_modified_by_user of this BreakdownElementInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by_user

    @last_modified_by_user.setter
    def last_modified_by_user(self, last_modified_by_user):
        """Sets the last_modified_by_user of this BreakdownElementInfo.


        :param last_modified_by_user: The last_modified_by_user of this BreakdownElementInfo.  # noqa: E501
        :type: str
        """

        self._last_modified_by_user = last_modified_by_user

    @property
    def local_occurrence(self):
        """Gets the local_occurrence of this BreakdownElementInfo.  # noqa: E501


        :return: The local_occurrence of this BreakdownElementInfo.  # noqa: E501
        :rtype: bool
        """
        return self._local_occurrence

    @local_occurrence.setter
    def local_occurrence(self, local_occurrence):
        """Sets the local_occurrence of this BreakdownElementInfo.


        :param local_occurrence: The local_occurrence of this BreakdownElementInfo.  # noqa: E501
        :type: bool
        """

        self._local_occurrence = local_occurrence

    @property
    def name(self):
        """Gets the name of this BreakdownElementInfo.  # noqa: E501


        :return: The name of this BreakdownElementInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BreakdownElementInfo.


        :param name: The name of this BreakdownElementInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def occurrence(self):
        """Gets the occurrence of this BreakdownElementInfo.  # noqa: E501


        :return: The occurrence of this BreakdownElementInfo.  # noqa: E501
        :rtype: BreakdownElementInfo
        """
        return self._occurrence

    @occurrence.setter
    def occurrence(self, occurrence):
        """Sets the occurrence of this BreakdownElementInfo.


        :param occurrence: The occurrence of this BreakdownElementInfo.  # noqa: E501
        :type: BreakdownElementInfo
        """

        self._occurrence = occurrence

    @property
    def occurrence_users(self):
        """Gets the occurrence_users of this BreakdownElementInfo.  # noqa: E501


        :return: The occurrence_users of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[int]
        """
        return self._occurrence_users

    @occurrence_users.setter
    def occurrence_users(self, occurrence_users):
        """Sets the occurrence_users of this BreakdownElementInfo.


        :param occurrence_users: The occurrence_users of this BreakdownElementInfo.  # noqa: E501
        :type: list[int]
        """

        self._occurrence_users = occurrence_users

    @property
    def orgs(self):
        """Gets the orgs of this BreakdownElementInfo.  # noqa: E501


        :return: The orgs of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[BeOrgReferenceInfo]
        """
        return self._orgs

    @orgs.setter
    def orgs(self, orgs):
        """Sets the orgs of this BreakdownElementInfo.


        :param orgs: The orgs of this BreakdownElementInfo.  # noqa: E501
        :type: list[BeOrgReferenceInfo]
        """

        self._orgs = orgs

    @property
    def parent(self):
        """Gets the parent of this BreakdownElementInfo.  # noqa: E501


        :return: The parent of this BreakdownElementInfo.  # noqa: E501
        :rtype: BreakdownElementInfo
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this BreakdownElementInfo.


        :param parent: The parent of this BreakdownElementInfo.  # noqa: E501
        :type: BreakdownElementInfo
        """

        self._parent = parent

    @property
    def parents(self):
        """Gets the parents of this BreakdownElementInfo.  # noqa: E501


        :return: The parents of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[NodeLocations]
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this BreakdownElementInfo.


        :param parents: The parents of this BreakdownElementInfo.  # noqa: E501
        :type: list[NodeLocations]
        """

        self._parents = parents

    @property
    def permissions(self):
        """Gets the permissions of this BreakdownElementInfo.  # noqa: E501


        :return: The permissions of this BreakdownElementInfo.  # noqa: E501
        :rtype: PermissionsInfo
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this BreakdownElementInfo.


        :param permissions: The permissions of this BreakdownElementInfo.  # noqa: E501
        :type: PermissionsInfo
        """

        self._permissions = permissions

    @property
    def persons(self):
        """Gets the persons of this BreakdownElementInfo.  # noqa: E501


        :return: The persons of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[PersonInfo]
        """
        return self._persons

    @persons.setter
    def persons(self, persons):
        """Sets the persons of this BreakdownElementInfo.


        :param persons: The persons of this BreakdownElementInfo.  # noqa: E501
        :type: list[PersonInfo]
        """

        self._persons = persons

    @property
    def phase(self):
        """Gets the phase of this BreakdownElementInfo.  # noqa: E501


        :return: The phase of this BreakdownElementInfo.  # noqa: E501
        :rtype: str
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this BreakdownElementInfo.


        :param phase: The phase of this BreakdownElementInfo.  # noqa: E501
        :type: str
        """

        self._phase = phase

    @property
    def properties(self):
        """Gets the properties of this BreakdownElementInfo.  # noqa: E501


        :return: The properties of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[SimpleProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this BreakdownElementInfo.


        :param properties: The properties of this BreakdownElementInfo.  # noqa: E501
        :type: list[SimpleProperty]
        """

        self._properties = properties

    @property
    def quantity(self):
        """Gets the quantity of this BreakdownElementInfo.  # noqa: E501


        :return: The quantity of this BreakdownElementInfo.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BreakdownElementInfo.


        :param quantity: The quantity of this BreakdownElementInfo.  # noqa: E501
        :type: str
        """

        self._quantity = quantity

    @property
    def rels(self):
        """Gets the rels of this BreakdownElementInfo.  # noqa: E501


        :return: The rels of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[BeReferenceInfo]
        """
        return self._rels

    @rels.setter
    def rels(self, rels):
        """Sets the rels of this BreakdownElementInfo.


        :param rels: The rels of this BreakdownElementInfo.  # noqa: E501
        :type: list[BeReferenceInfo]
        """

        self._rels = rels

    @property
    def subdomains(self):
        """Gets the subdomains of this BreakdownElementInfo.  # noqa: E501


        :return: The subdomains of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[SubdomainInfo]
        """
        return self._subdomains

    @subdomains.setter
    def subdomains(self, subdomains):
        """Sets the subdomains of this BreakdownElementInfo.


        :param subdomains: The subdomains of this BreakdownElementInfo.  # noqa: E501
        :type: list[SubdomainInfo]
        """

        self._subdomains = subdomains

    @property
    def templates(self):
        """Gets the templates of this BreakdownElementInfo.  # noqa: E501


        :return: The templates of this BreakdownElementInfo.  # noqa: E501
        :rtype: list[DocumentTemplateInfo]
        """
        return self._templates

    @templates.setter
    def templates(self, templates):
        """Sets the templates of this BreakdownElementInfo.


        :param templates: The templates of this BreakdownElementInfo.  # noqa: E501
        :type: list[DocumentTemplateInfo]
        """

        self._templates = templates

    @property
    def version_id(self):
        """Gets the version_id of this BreakdownElementInfo.  # noqa: E501


        :return: The version_id of this BreakdownElementInfo.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this BreakdownElementInfo.


        :param version_id: The version_id of this BreakdownElementInfo.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BreakdownElementInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BreakdownElementInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
