# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataFileInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'affected_by_documents': 'list[DataFileTreePathInfo]',
        'affects_documents': 'list[DataFileTreePathInfo]',
        'approver': 'str',
        'ass_doc_instance_id': 'int',
        'created_by_user': 'str',
        'data_type': 'str',
        'date_created': 'str',
        'date_modified': 'str',
        'description': 'str',
        'discipline': 'str',
        'doc_email_date_sent_receive': 'str',
        'doc_email_sent_by': 'str',
        'doc_email_sent_to': 'list[str]',
        'document_received_date': 'str',
        'document_sent_date': 'str',
        'document_type': 'str',
        'editor': 'str',
        'external_version': 'str',
        'file_body_id': 'int',
        'file_name': 'str',
        'id': 'str',
        'instance_id': 'int',
        'is_checked_out_by_me': 'bool',
        'is_checked_out_by_someone_else': 'bool',
        'is_checked_out_by_user': 'UserInfo',
        'linked_to_bkdn_elem_instance': 'int',
        'linked_to_others': 'bool',
        'modified_by_user': 'str',
        'permissions': 'PermissionsInfo',
        'project_phase': 'str',
        'properties': 'list[SimpleProperty]',
        'readonly': 'bool',
        'red_flags': 'list[DataFileVersionTreePathInfo]',
        'release_manager': 'str',
        'responsible': 'str',
        'reviewer': 'str',
        'rid': 'str',
        'size': 'int',
        'source': 'str',
        'status': 'str',
        'template_name': 'str',
        'title': 'str',
        'versions': 'list[DataFileVersionInfo]'
    }

    attribute_map = {
        'affected_by_documents': 'affected_by_documents',
        'affects_documents': 'affects_documents',
        'approver': 'approver',
        'ass_doc_instance_id': 'ass_doc_instance_id',
        'created_by_user': 'created_by_user',
        'data_type': 'data_type',
        'date_created': 'date_created',
        'date_modified': 'date_modified',
        'description': 'description',
        'discipline': 'discipline',
        'doc_email_date_sent_receive': 'doc_email_date_sent_receive',
        'doc_email_sent_by': 'doc_email_sent_by',
        'doc_email_sent_to': 'doc_email_sent_to',
        'document_received_date': 'document_received_date',
        'document_sent_date': 'document_sent_date',
        'document_type': 'document_type',
        'editor': 'editor',
        'external_version': 'external_version',
        'file_body_id': 'file_body_id',
        'file_name': 'file_name',
        'id': 'id',
        'instance_id': 'instance_id',
        'is_checked_out_by_me': 'is_checked_out_by_me',
        'is_checked_out_by_someone_else': 'is_checked_out_by_someone_else',
        'is_checked_out_by_user': 'is_checked_out_by_user',
        'linked_to_bkdn_elem_instance': 'linked_to_bkdn_elem_instance',
        'linked_to_others': 'linked_to_others',
        'modified_by_user': 'modified_by_user',
        'permissions': 'permissions',
        'project_phase': 'project_phase',
        'properties': 'properties',
        'readonly': 'readonly',
        'red_flags': 'red_flags',
        'release_manager': 'release_manager',
        'responsible': 'responsible',
        'reviewer': 'reviewer',
        'rid': 'rid',
        'size': 'size',
        'source': 'source',
        'status': 'status',
        'template_name': 'template_name',
        'title': 'title',
        'versions': 'versions'
    }

    def __init__(self, affected_by_documents=None, affects_documents=None, approver=None, ass_doc_instance_id=None, created_by_user=None, data_type=None, date_created=None, date_modified=None, description=None, discipline=None, doc_email_date_sent_receive=None, doc_email_sent_by=None, doc_email_sent_to=None, document_received_date=None, document_sent_date=None, document_type=None, editor=None, external_version=None, file_body_id=None, file_name=None, id=None, instance_id=None, is_checked_out_by_me=None, is_checked_out_by_someone_else=None, is_checked_out_by_user=None, linked_to_bkdn_elem_instance=None, linked_to_others=None, modified_by_user=None, permissions=None, project_phase=None, properties=None, readonly=None, red_flags=None, release_manager=None, responsible=None, reviewer=None, rid=None, size=None, source=None, status=None, template_name=None, title=None, versions=None):  # noqa: E501
        """DataFileInfo - a model defined in Swagger"""  # noqa: E501
        self._affected_by_documents = None
        self._affects_documents = None
        self._approver = None
        self._ass_doc_instance_id = None
        self._created_by_user = None
        self._data_type = None
        self._date_created = None
        self._date_modified = None
        self._description = None
        self._discipline = None
        self._doc_email_date_sent_receive = None
        self._doc_email_sent_by = None
        self._doc_email_sent_to = None
        self._document_received_date = None
        self._document_sent_date = None
        self._document_type = None
        self._editor = None
        self._external_version = None
        self._file_body_id = None
        self._file_name = None
        self._id = None
        self._instance_id = None
        self._is_checked_out_by_me = None
        self._is_checked_out_by_someone_else = None
        self._is_checked_out_by_user = None
        self._linked_to_bkdn_elem_instance = None
        self._linked_to_others = None
        self._modified_by_user = None
        self._permissions = None
        self._project_phase = None
        self._properties = None
        self._readonly = None
        self._red_flags = None
        self._release_manager = None
        self._responsible = None
        self._reviewer = None
        self._rid = None
        self._size = None
        self._source = None
        self._status = None
        self._template_name = None
        self._title = None
        self._versions = None
        self.discriminator = None
        if affected_by_documents is not None:
            self.affected_by_documents = affected_by_documents
        if affects_documents is not None:
            self.affects_documents = affects_documents
        if approver is not None:
            self.approver = approver
        if ass_doc_instance_id is not None:
            self.ass_doc_instance_id = ass_doc_instance_id
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if data_type is not None:
            self.data_type = data_type
        if date_created is not None:
            self.date_created = date_created
        if date_modified is not None:
            self.date_modified = date_modified
        if description is not None:
            self.description = description
        if discipline is not None:
            self.discipline = discipline
        if doc_email_date_sent_receive is not None:
            self.doc_email_date_sent_receive = doc_email_date_sent_receive
        if doc_email_sent_by is not None:
            self.doc_email_sent_by = doc_email_sent_by
        if doc_email_sent_to is not None:
            self.doc_email_sent_to = doc_email_sent_to
        if document_received_date is not None:
            self.document_received_date = document_received_date
        if document_sent_date is not None:
            self.document_sent_date = document_sent_date
        if document_type is not None:
            self.document_type = document_type
        if editor is not None:
            self.editor = editor
        if external_version is not None:
            self.external_version = external_version
        if file_body_id is not None:
            self.file_body_id = file_body_id
        if file_name is not None:
            self.file_name = file_name
        if id is not None:
            self.id = id
        if instance_id is not None:
            self.instance_id = instance_id
        if is_checked_out_by_me is not None:
            self.is_checked_out_by_me = is_checked_out_by_me
        if is_checked_out_by_someone_else is not None:
            self.is_checked_out_by_someone_else = is_checked_out_by_someone_else
        if is_checked_out_by_user is not None:
            self.is_checked_out_by_user = is_checked_out_by_user
        if linked_to_bkdn_elem_instance is not None:
            self.linked_to_bkdn_elem_instance = linked_to_bkdn_elem_instance
        if linked_to_others is not None:
            self.linked_to_others = linked_to_others
        if modified_by_user is not None:
            self.modified_by_user = modified_by_user
        if permissions is not None:
            self.permissions = permissions
        if project_phase is not None:
            self.project_phase = project_phase
        if properties is not None:
            self.properties = properties
        if readonly is not None:
            self.readonly = readonly
        if red_flags is not None:
            self.red_flags = red_flags
        if release_manager is not None:
            self.release_manager = release_manager
        if responsible is not None:
            self.responsible = responsible
        if reviewer is not None:
            self.reviewer = reviewer
        if rid is not None:
            self.rid = rid
        if size is not None:
            self.size = size
        if source is not None:
            self.source = source
        if status is not None:
            self.status = status
        if template_name is not None:
            self.template_name = template_name
        if title is not None:
            self.title = title
        if versions is not None:
            self.versions = versions

    @property
    def affected_by_documents(self):
        """Gets the affected_by_documents of this DataFileInfo.  # noqa: E501


        :return: The affected_by_documents of this DataFileInfo.  # noqa: E501
        :rtype: list[DataFileTreePathInfo]
        """
        return self._affected_by_documents

    @affected_by_documents.setter
    def affected_by_documents(self, affected_by_documents):
        """Sets the affected_by_documents of this DataFileInfo.


        :param affected_by_documents: The affected_by_documents of this DataFileInfo.  # noqa: E501
        :type: list[DataFileTreePathInfo]
        """

        self._affected_by_documents = affected_by_documents

    @property
    def affects_documents(self):
        """Gets the affects_documents of this DataFileInfo.  # noqa: E501


        :return: The affects_documents of this DataFileInfo.  # noqa: E501
        :rtype: list[DataFileTreePathInfo]
        """
        return self._affects_documents

    @affects_documents.setter
    def affects_documents(self, affects_documents):
        """Sets the affects_documents of this DataFileInfo.


        :param affects_documents: The affects_documents of this DataFileInfo.  # noqa: E501
        :type: list[DataFileTreePathInfo]
        """

        self._affects_documents = affects_documents

    @property
    def approver(self):
        """Gets the approver of this DataFileInfo.  # noqa: E501


        :return: The approver of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._approver

    @approver.setter
    def approver(self, approver):
        """Sets the approver of this DataFileInfo.


        :param approver: The approver of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._approver = approver

    @property
    def ass_doc_instance_id(self):
        """Gets the ass_doc_instance_id of this DataFileInfo.  # noqa: E501


        :return: The ass_doc_instance_id of this DataFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._ass_doc_instance_id

    @ass_doc_instance_id.setter
    def ass_doc_instance_id(self, ass_doc_instance_id):
        """Sets the ass_doc_instance_id of this DataFileInfo.


        :param ass_doc_instance_id: The ass_doc_instance_id of this DataFileInfo.  # noqa: E501
        :type: int
        """

        self._ass_doc_instance_id = ass_doc_instance_id

    @property
    def created_by_user(self):
        """Gets the created_by_user of this DataFileInfo.  # noqa: E501


        :return: The created_by_user of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this DataFileInfo.


        :param created_by_user: The created_by_user of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._created_by_user = created_by_user

    @property
    def data_type(self):
        """Gets the data_type of this DataFileInfo.  # noqa: E501


        :return: The data_type of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this DataFileInfo.


        :param data_type: The data_type of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def date_created(self):
        """Gets the date_created of this DataFileInfo.  # noqa: E501


        :return: The date_created of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this DataFileInfo.


        :param date_created: The date_created of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._date_created = date_created

    @property
    def date_modified(self):
        """Gets the date_modified of this DataFileInfo.  # noqa: E501


        :return: The date_modified of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._date_modified

    @date_modified.setter
    def date_modified(self, date_modified):
        """Sets the date_modified of this DataFileInfo.


        :param date_modified: The date_modified of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._date_modified = date_modified

    @property
    def description(self):
        """Gets the description of this DataFileInfo.  # noqa: E501


        :return: The description of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DataFileInfo.


        :param description: The description of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def discipline(self):
        """Gets the discipline of this DataFileInfo.  # noqa: E501


        :return: The discipline of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this DataFileInfo.


        :param discipline: The discipline of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._discipline = discipline

    @property
    def doc_email_date_sent_receive(self):
        """Gets the doc_email_date_sent_receive of this DataFileInfo.  # noqa: E501


        :return: The doc_email_date_sent_receive of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._doc_email_date_sent_receive

    @doc_email_date_sent_receive.setter
    def doc_email_date_sent_receive(self, doc_email_date_sent_receive):
        """Sets the doc_email_date_sent_receive of this DataFileInfo.


        :param doc_email_date_sent_receive: The doc_email_date_sent_receive of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._doc_email_date_sent_receive = doc_email_date_sent_receive

    @property
    def doc_email_sent_by(self):
        """Gets the doc_email_sent_by of this DataFileInfo.  # noqa: E501


        :return: The doc_email_sent_by of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._doc_email_sent_by

    @doc_email_sent_by.setter
    def doc_email_sent_by(self, doc_email_sent_by):
        """Sets the doc_email_sent_by of this DataFileInfo.


        :param doc_email_sent_by: The doc_email_sent_by of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._doc_email_sent_by = doc_email_sent_by

    @property
    def doc_email_sent_to(self):
        """Gets the doc_email_sent_to of this DataFileInfo.  # noqa: E501


        :return: The doc_email_sent_to of this DataFileInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._doc_email_sent_to

    @doc_email_sent_to.setter
    def doc_email_sent_to(self, doc_email_sent_to):
        """Sets the doc_email_sent_to of this DataFileInfo.


        :param doc_email_sent_to: The doc_email_sent_to of this DataFileInfo.  # noqa: E501
        :type: list[str]
        """

        self._doc_email_sent_to = doc_email_sent_to

    @property
    def document_received_date(self):
        """Gets the document_received_date of this DataFileInfo.  # noqa: E501


        :return: The document_received_date of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._document_received_date

    @document_received_date.setter
    def document_received_date(self, document_received_date):
        """Sets the document_received_date of this DataFileInfo.


        :param document_received_date: The document_received_date of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._document_received_date = document_received_date

    @property
    def document_sent_date(self):
        """Gets the document_sent_date of this DataFileInfo.  # noqa: E501


        :return: The document_sent_date of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._document_sent_date

    @document_sent_date.setter
    def document_sent_date(self, document_sent_date):
        """Sets the document_sent_date of this DataFileInfo.


        :param document_sent_date: The document_sent_date of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._document_sent_date = document_sent_date

    @property
    def document_type(self):
        """Gets the document_type of this DataFileInfo.  # noqa: E501


        :return: The document_type of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this DataFileInfo.


        :param document_type: The document_type of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._document_type = document_type

    @property
    def editor(self):
        """Gets the editor of this DataFileInfo.  # noqa: E501


        :return: The editor of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this DataFileInfo.


        :param editor: The editor of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._editor = editor

    @property
    def external_version(self):
        """Gets the external_version of this DataFileInfo.  # noqa: E501


        :return: The external_version of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._external_version

    @external_version.setter
    def external_version(self, external_version):
        """Sets the external_version of this DataFileInfo.


        :param external_version: The external_version of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._external_version = external_version

    @property
    def file_body_id(self):
        """Gets the file_body_id of this DataFileInfo.  # noqa: E501


        :return: The file_body_id of this DataFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._file_body_id

    @file_body_id.setter
    def file_body_id(self, file_body_id):
        """Sets the file_body_id of this DataFileInfo.


        :param file_body_id: The file_body_id of this DataFileInfo.  # noqa: E501
        :type: int
        """

        self._file_body_id = file_body_id

    @property
    def file_name(self):
        """Gets the file_name of this DataFileInfo.  # noqa: E501


        :return: The file_name of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this DataFileInfo.


        :param file_name: The file_name of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def id(self):
        """Gets the id of this DataFileInfo.  # noqa: E501


        :return: The id of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataFileInfo.


        :param id: The id of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instance_id(self):
        """Gets the instance_id of this DataFileInfo.  # noqa: E501


        :return: The instance_id of this DataFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this DataFileInfo.


        :param instance_id: The instance_id of this DataFileInfo.  # noqa: E501
        :type: int
        """

        self._instance_id = instance_id

    @property
    def is_checked_out_by_me(self):
        """Gets the is_checked_out_by_me of this DataFileInfo.  # noqa: E501


        :return: The is_checked_out_by_me of this DataFileInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_checked_out_by_me

    @is_checked_out_by_me.setter
    def is_checked_out_by_me(self, is_checked_out_by_me):
        """Sets the is_checked_out_by_me of this DataFileInfo.


        :param is_checked_out_by_me: The is_checked_out_by_me of this DataFileInfo.  # noqa: E501
        :type: bool
        """

        self._is_checked_out_by_me = is_checked_out_by_me

    @property
    def is_checked_out_by_someone_else(self):
        """Gets the is_checked_out_by_someone_else of this DataFileInfo.  # noqa: E501


        :return: The is_checked_out_by_someone_else of this DataFileInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_checked_out_by_someone_else

    @is_checked_out_by_someone_else.setter
    def is_checked_out_by_someone_else(self, is_checked_out_by_someone_else):
        """Sets the is_checked_out_by_someone_else of this DataFileInfo.


        :param is_checked_out_by_someone_else: The is_checked_out_by_someone_else of this DataFileInfo.  # noqa: E501
        :type: bool
        """

        self._is_checked_out_by_someone_else = is_checked_out_by_someone_else

    @property
    def is_checked_out_by_user(self):
        """Gets the is_checked_out_by_user of this DataFileInfo.  # noqa: E501


        :return: The is_checked_out_by_user of this DataFileInfo.  # noqa: E501
        :rtype: UserInfo
        """
        return self._is_checked_out_by_user

    @is_checked_out_by_user.setter
    def is_checked_out_by_user(self, is_checked_out_by_user):
        """Sets the is_checked_out_by_user of this DataFileInfo.


        :param is_checked_out_by_user: The is_checked_out_by_user of this DataFileInfo.  # noqa: E501
        :type: UserInfo
        """

        self._is_checked_out_by_user = is_checked_out_by_user

    @property
    def linked_to_bkdn_elem_instance(self):
        """Gets the linked_to_bkdn_elem_instance of this DataFileInfo.  # noqa: E501


        :return: The linked_to_bkdn_elem_instance of this DataFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._linked_to_bkdn_elem_instance

    @linked_to_bkdn_elem_instance.setter
    def linked_to_bkdn_elem_instance(self, linked_to_bkdn_elem_instance):
        """Sets the linked_to_bkdn_elem_instance of this DataFileInfo.


        :param linked_to_bkdn_elem_instance: The linked_to_bkdn_elem_instance of this DataFileInfo.  # noqa: E501
        :type: int
        """

        self._linked_to_bkdn_elem_instance = linked_to_bkdn_elem_instance

    @property
    def linked_to_others(self):
        """Gets the linked_to_others of this DataFileInfo.  # noqa: E501


        :return: The linked_to_others of this DataFileInfo.  # noqa: E501
        :rtype: bool
        """
        return self._linked_to_others

    @linked_to_others.setter
    def linked_to_others(self, linked_to_others):
        """Sets the linked_to_others of this DataFileInfo.


        :param linked_to_others: The linked_to_others of this DataFileInfo.  # noqa: E501
        :type: bool
        """

        self._linked_to_others = linked_to_others

    @property
    def modified_by_user(self):
        """Gets the modified_by_user of this DataFileInfo.  # noqa: E501


        :return: The modified_by_user of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._modified_by_user

    @modified_by_user.setter
    def modified_by_user(self, modified_by_user):
        """Sets the modified_by_user of this DataFileInfo.


        :param modified_by_user: The modified_by_user of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._modified_by_user = modified_by_user

    @property
    def permissions(self):
        """Gets the permissions of this DataFileInfo.  # noqa: E501


        :return: The permissions of this DataFileInfo.  # noqa: E501
        :rtype: PermissionsInfo
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this DataFileInfo.


        :param permissions: The permissions of this DataFileInfo.  # noqa: E501
        :type: PermissionsInfo
        """

        self._permissions = permissions

    @property
    def project_phase(self):
        """Gets the project_phase of this DataFileInfo.  # noqa: E501


        :return: The project_phase of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._project_phase

    @project_phase.setter
    def project_phase(self, project_phase):
        """Sets the project_phase of this DataFileInfo.


        :param project_phase: The project_phase of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._project_phase = project_phase

    @property
    def properties(self):
        """Gets the properties of this DataFileInfo.  # noqa: E501


        :return: The properties of this DataFileInfo.  # noqa: E501
        :rtype: list[SimpleProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this DataFileInfo.


        :param properties: The properties of this DataFileInfo.  # noqa: E501
        :type: list[SimpleProperty]
        """

        self._properties = properties

    @property
    def readonly(self):
        """Gets the readonly of this DataFileInfo.  # noqa: E501


        :return: The readonly of this DataFileInfo.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this DataFileInfo.


        :param readonly: The readonly of this DataFileInfo.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    @property
    def red_flags(self):
        """Gets the red_flags of this DataFileInfo.  # noqa: E501


        :return: The red_flags of this DataFileInfo.  # noqa: E501
        :rtype: list[DataFileVersionTreePathInfo]
        """
        return self._red_flags

    @red_flags.setter
    def red_flags(self, red_flags):
        """Sets the red_flags of this DataFileInfo.


        :param red_flags: The red_flags of this DataFileInfo.  # noqa: E501
        :type: list[DataFileVersionTreePathInfo]
        """

        self._red_flags = red_flags

    @property
    def release_manager(self):
        """Gets the release_manager of this DataFileInfo.  # noqa: E501


        :return: The release_manager of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._release_manager

    @release_manager.setter
    def release_manager(self, release_manager):
        """Sets the release_manager of this DataFileInfo.


        :param release_manager: The release_manager of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._release_manager = release_manager

    @property
    def responsible(self):
        """Gets the responsible of this DataFileInfo.  # noqa: E501


        :return: The responsible of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._responsible

    @responsible.setter
    def responsible(self, responsible):
        """Sets the responsible of this DataFileInfo.


        :param responsible: The responsible of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._responsible = responsible

    @property
    def reviewer(self):
        """Gets the reviewer of this DataFileInfo.  # noqa: E501


        :return: The reviewer of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._reviewer

    @reviewer.setter
    def reviewer(self, reviewer):
        """Sets the reviewer of this DataFileInfo.


        :param reviewer: The reviewer of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._reviewer = reviewer

    @property
    def rid(self):
        """Gets the rid of this DataFileInfo.  # noqa: E501


        :return: The rid of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._rid

    @rid.setter
    def rid(self, rid):
        """Sets the rid of this DataFileInfo.


        :param rid: The rid of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._rid = rid

    @property
    def size(self):
        """Gets the size of this DataFileInfo.  # noqa: E501


        :return: The size of this DataFileInfo.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DataFileInfo.


        :param size: The size of this DataFileInfo.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def source(self):
        """Gets the source of this DataFileInfo.  # noqa: E501


        :return: The source of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this DataFileInfo.


        :param source: The source of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this DataFileInfo.  # noqa: E501


        :return: The status of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataFileInfo.


        :param status: The status of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def template_name(self):
        """Gets the template_name of this DataFileInfo.  # noqa: E501


        :return: The template_name of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this DataFileInfo.


        :param template_name: The template_name of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def title(self):
        """Gets the title of this DataFileInfo.  # noqa: E501


        :return: The title of this DataFileInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DataFileInfo.


        :param title: The title of this DataFileInfo.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def versions(self):
        """Gets the versions of this DataFileInfo.  # noqa: E501


        :return: The versions of this DataFileInfo.  # noqa: E501
        :rtype: list[DataFileVersionInfo]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this DataFileInfo.


        :param versions: The versions of this DataFileInfo.  # noqa: E501
        :type: list[DataFileVersionInfo]
        """

        self._versions = versions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataFileInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataFileInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
