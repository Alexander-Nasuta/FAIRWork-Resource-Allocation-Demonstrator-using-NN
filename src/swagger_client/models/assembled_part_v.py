# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssembledPartV(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'child_id': 'int',
        'location': 'str',
        'parent_id': 'int',
        'part': 'RepresentingPartV',
        'quantity': 'float',
        'template_id': 'int'
    }

    attribute_map = {
        'child_id': 'child_id',
        'location': 'location',
        'parent_id': 'parent_id',
        'part': 'part',
        'quantity': 'quantity',
        'template_id': 'template_id'
    }

    def __init__(self, child_id=None, location=None, parent_id=None, part=None, quantity=None, template_id=None):  # noqa: E501
        """AssembledPartV - a model defined in Swagger"""  # noqa: E501
        self._child_id = None
        self._location = None
        self._parent_id = None
        self._part = None
        self._quantity = None
        self._template_id = None
        self.discriminator = None
        if child_id is not None:
            self.child_id = child_id
        if location is not None:
            self.location = location
        if parent_id is not None:
            self.parent_id = parent_id
        if part is not None:
            self.part = part
        if quantity is not None:
            self.quantity = quantity
        if template_id is not None:
            self.template_id = template_id

    @property
    def child_id(self):
        """Gets the child_id of this AssembledPartV.  # noqa: E501


        :return: The child_id of this AssembledPartV.  # noqa: E501
        :rtype: int
        """
        return self._child_id

    @child_id.setter
    def child_id(self, child_id):
        """Sets the child_id of this AssembledPartV.


        :param child_id: The child_id of this AssembledPartV.  # noqa: E501
        :type: int
        """

        self._child_id = child_id

    @property
    def location(self):
        """Gets the location of this AssembledPartV.  # noqa: E501


        :return: The location of this AssembledPartV.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AssembledPartV.


        :param location: The location of this AssembledPartV.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def parent_id(self):
        """Gets the parent_id of this AssembledPartV.  # noqa: E501


        :return: The parent_id of this AssembledPartV.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this AssembledPartV.


        :param parent_id: The parent_id of this AssembledPartV.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def part(self):
        """Gets the part of this AssembledPartV.  # noqa: E501


        :return: The part of this AssembledPartV.  # noqa: E501
        :rtype: RepresentingPartV
        """
        return self._part

    @part.setter
    def part(self, part):
        """Sets the part of this AssembledPartV.


        :param part: The part of this AssembledPartV.  # noqa: E501
        :type: RepresentingPartV
        """

        self._part = part

    @property
    def quantity(self):
        """Gets the quantity of this AssembledPartV.  # noqa: E501


        :return: The quantity of this AssembledPartV.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this AssembledPartV.


        :param quantity: The quantity of this AssembledPartV.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def template_id(self):
        """Gets the template_id of this AssembledPartV.  # noqa: E501


        :return: The template_id of this AssembledPartV.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this AssembledPartV.


        :param template_id: The template_id of this AssembledPartV.  # noqa: E501
        :type: int
        """

        self._template_id = template_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssembledPartV, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssembledPartV):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
