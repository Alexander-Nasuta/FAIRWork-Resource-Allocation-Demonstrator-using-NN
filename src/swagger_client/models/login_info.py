# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LoginInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_active': 'bool',
        'is_system_admin': 'bool',
        'organization': 'str',
        'real_name': 'str',
        'services_version': 'str',
        'use_2_fa': 'bool',
        'user_2_fa_code': 'str',
        'user_email': 'str',
        'user_name': 'str',
        'user_projects': 'list[UsersProjectInfo]'
    }

    attribute_map = {
        'is_active': 'is_active',
        'is_system_admin': 'is_system_admin',
        'organization': 'organization',
        'real_name': 'real_name',
        'services_version': 'services_version',
        'use_2_fa': 'use_2FA',
        'user_2_fa_code': 'user_2FA_code',
        'user_email': 'user_email',
        'user_name': 'user_name',
        'user_projects': 'user_projects'
    }

    def __init__(self, is_active=None, is_system_admin=None, organization=None, real_name=None, services_version=None, use_2_fa=None, user_2_fa_code=None, user_email=None, user_name=None, user_projects=None):  # noqa: E501
        """LoginInfo - a model defined in Swagger"""  # noqa: E501
        self._is_active = None
        self._is_system_admin = None
        self._organization = None
        self._real_name = None
        self._services_version = None
        self._use_2_fa = None
        self._user_2_fa_code = None
        self._user_email = None
        self._user_name = None
        self._user_projects = None
        self.discriminator = None
        if is_active is not None:
            self.is_active = is_active
        if is_system_admin is not None:
            self.is_system_admin = is_system_admin
        if organization is not None:
            self.organization = organization
        if real_name is not None:
            self.real_name = real_name
        if services_version is not None:
            self.services_version = services_version
        if use_2_fa is not None:
            self.use_2_fa = use_2_fa
        if user_2_fa_code is not None:
            self.user_2_fa_code = user_2_fa_code
        if user_email is not None:
            self.user_email = user_email
        if user_name is not None:
            self.user_name = user_name
        if user_projects is not None:
            self.user_projects = user_projects

    @property
    def is_active(self):
        """Gets the is_active of this LoginInfo.  # noqa: E501


        :return: The is_active of this LoginInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this LoginInfo.


        :param is_active: The is_active of this LoginInfo.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_system_admin(self):
        """Gets the is_system_admin of this LoginInfo.  # noqa: E501


        :return: The is_system_admin of this LoginInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_system_admin

    @is_system_admin.setter
    def is_system_admin(self, is_system_admin):
        """Sets the is_system_admin of this LoginInfo.


        :param is_system_admin: The is_system_admin of this LoginInfo.  # noqa: E501
        :type: bool
        """

        self._is_system_admin = is_system_admin

    @property
    def organization(self):
        """Gets the organization of this LoginInfo.  # noqa: E501


        :return: The organization of this LoginInfo.  # noqa: E501
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this LoginInfo.


        :param organization: The organization of this LoginInfo.  # noqa: E501
        :type: str
        """

        self._organization = organization

    @property
    def real_name(self):
        """Gets the real_name of this LoginInfo.  # noqa: E501


        :return: The real_name of this LoginInfo.  # noqa: E501
        :rtype: str
        """
        return self._real_name

    @real_name.setter
    def real_name(self, real_name):
        """Sets the real_name of this LoginInfo.


        :param real_name: The real_name of this LoginInfo.  # noqa: E501
        :type: str
        """

        self._real_name = real_name

    @property
    def services_version(self):
        """Gets the services_version of this LoginInfo.  # noqa: E501


        :return: The services_version of this LoginInfo.  # noqa: E501
        :rtype: str
        """
        return self._services_version

    @services_version.setter
    def services_version(self, services_version):
        """Sets the services_version of this LoginInfo.


        :param services_version: The services_version of this LoginInfo.  # noqa: E501
        :type: str
        """

        self._services_version = services_version

    @property
    def use_2_fa(self):
        """Gets the use_2_fa of this LoginInfo.  # noqa: E501


        :return: The use_2_fa of this LoginInfo.  # noqa: E501
        :rtype: bool
        """
        return self._use_2_fa

    @use_2_fa.setter
    def use_2_fa(self, use_2_fa):
        """Sets the use_2_fa of this LoginInfo.


        :param use_2_fa: The use_2_fa of this LoginInfo.  # noqa: E501
        :type: bool
        """

        self._use_2_fa = use_2_fa

    @property
    def user_2_fa_code(self):
        """Gets the user_2_fa_code of this LoginInfo.  # noqa: E501


        :return: The user_2_fa_code of this LoginInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_2_fa_code

    @user_2_fa_code.setter
    def user_2_fa_code(self, user_2_fa_code):
        """Sets the user_2_fa_code of this LoginInfo.


        :param user_2_fa_code: The user_2_fa_code of this LoginInfo.  # noqa: E501
        :type: str
        """

        self._user_2_fa_code = user_2_fa_code

    @property
    def user_email(self):
        """Gets the user_email of this LoginInfo.  # noqa: E501


        :return: The user_email of this LoginInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this LoginInfo.


        :param user_email: The user_email of this LoginInfo.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def user_name(self):
        """Gets the user_name of this LoginInfo.  # noqa: E501


        :return: The user_name of this LoginInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this LoginInfo.


        :param user_name: The user_name of this LoginInfo.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_projects(self):
        """Gets the user_projects of this LoginInfo.  # noqa: E501


        :return: The user_projects of this LoginInfo.  # noqa: E501
        :rtype: list[UsersProjectInfo]
        """
        return self._user_projects

    @user_projects.setter
    def user_projects(self, user_projects):
        """Sets the user_projects of this LoginInfo.


        :param user_projects: The user_projects of this LoginInfo.  # noqa: E501
        :type: list[UsersProjectInfo]
        """

        self._user_projects = user_projects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LoginInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LoginInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
