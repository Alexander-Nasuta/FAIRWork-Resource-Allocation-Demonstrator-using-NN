# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClassInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigned_inst': 'int',
        'assignment_id': 'int',
        'class_name': 'str',
        'class_urn': 'str',
        'role_name': 'str',
        'role_urn': 'str',
        'subject': 'str'
    }

    attribute_map = {
        'assigned_inst': 'assigned_inst',
        'assignment_id': 'assignment_id',
        'class_name': 'class_name',
        'class_urn': 'class_urn',
        'role_name': 'role_name',
        'role_urn': 'role_urn',
        'subject': 'subject'
    }

    def __init__(self, assigned_inst=None, assignment_id=None, class_name=None, class_urn=None, role_name=None, role_urn=None, subject=None):  # noqa: E501
        """ClassInfo - a model defined in Swagger"""  # noqa: E501
        self._assigned_inst = None
        self._assignment_id = None
        self._class_name = None
        self._class_urn = None
        self._role_name = None
        self._role_urn = None
        self._subject = None
        self.discriminator = None
        if assigned_inst is not None:
            self.assigned_inst = assigned_inst
        if assignment_id is not None:
            self.assignment_id = assignment_id
        if class_name is not None:
            self.class_name = class_name
        if class_urn is not None:
            self.class_urn = class_urn
        if role_name is not None:
            self.role_name = role_name
        if role_urn is not None:
            self.role_urn = role_urn
        if subject is not None:
            self.subject = subject

    @property
    def assigned_inst(self):
        """Gets the assigned_inst of this ClassInfo.  # noqa: E501


        :return: The assigned_inst of this ClassInfo.  # noqa: E501
        :rtype: int
        """
        return self._assigned_inst

    @assigned_inst.setter
    def assigned_inst(self, assigned_inst):
        """Sets the assigned_inst of this ClassInfo.


        :param assigned_inst: The assigned_inst of this ClassInfo.  # noqa: E501
        :type: int
        """

        self._assigned_inst = assigned_inst

    @property
    def assignment_id(self):
        """Gets the assignment_id of this ClassInfo.  # noqa: E501


        :return: The assignment_id of this ClassInfo.  # noqa: E501
        :rtype: int
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this ClassInfo.


        :param assignment_id: The assignment_id of this ClassInfo.  # noqa: E501
        :type: int
        """

        self._assignment_id = assignment_id

    @property
    def class_name(self):
        """Gets the class_name of this ClassInfo.  # noqa: E501


        :return: The class_name of this ClassInfo.  # noqa: E501
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name):
        """Sets the class_name of this ClassInfo.


        :param class_name: The class_name of this ClassInfo.  # noqa: E501
        :type: str
        """

        self._class_name = class_name

    @property
    def class_urn(self):
        """Gets the class_urn of this ClassInfo.  # noqa: E501


        :return: The class_urn of this ClassInfo.  # noqa: E501
        :rtype: str
        """
        return self._class_urn

    @class_urn.setter
    def class_urn(self, class_urn):
        """Sets the class_urn of this ClassInfo.


        :param class_urn: The class_urn of this ClassInfo.  # noqa: E501
        :type: str
        """

        self._class_urn = class_urn

    @property
    def role_name(self):
        """Gets the role_name of this ClassInfo.  # noqa: E501


        :return: The role_name of this ClassInfo.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this ClassInfo.


        :param role_name: The role_name of this ClassInfo.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def role_urn(self):
        """Gets the role_urn of this ClassInfo.  # noqa: E501


        :return: The role_urn of this ClassInfo.  # noqa: E501
        :rtype: str
        """
        return self._role_urn

    @role_urn.setter
    def role_urn(self, role_urn):
        """Sets the role_urn of this ClassInfo.


        :param role_urn: The role_urn of this ClassInfo.  # noqa: E501
        :type: str
        """

        self._role_urn = role_urn

    @property
    def subject(self):
        """Gets the subject of this ClassInfo.  # noqa: E501


        :return: The subject of this ClassInfo.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ClassInfo.


        :param subject: The subject of this ClassInfo.  # noqa: E501
        :type: str
        """

        self._subject = subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClassInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
