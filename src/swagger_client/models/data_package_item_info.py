# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataPackageItemInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_ref': 'DataFileTreePathInfo',
        'exists_in_db': 'bool',
        'in_version': 'str',
        'linked_to_bkdn_elem_instance': 'int',
        'version_status': 'str'
    }

    attribute_map = {
        'document_ref': 'document_ref',
        'exists_in_db': 'exists_in_db',
        'in_version': 'in_version',
        'linked_to_bkdn_elem_instance': 'linked_to_bkdn_elem_instance',
        'version_status': 'version_status'
    }

    def __init__(self, document_ref=None, exists_in_db=None, in_version=None, linked_to_bkdn_elem_instance=None, version_status=None):  # noqa: E501
        """DataPackageItemInfo - a model defined in Swagger"""  # noqa: E501
        self._document_ref = None
        self._exists_in_db = None
        self._in_version = None
        self._linked_to_bkdn_elem_instance = None
        self._version_status = None
        self.discriminator = None
        if document_ref is not None:
            self.document_ref = document_ref
        if exists_in_db is not None:
            self.exists_in_db = exists_in_db
        if in_version is not None:
            self.in_version = in_version
        if linked_to_bkdn_elem_instance is not None:
            self.linked_to_bkdn_elem_instance = linked_to_bkdn_elem_instance
        if version_status is not None:
            self.version_status = version_status

    @property
    def document_ref(self):
        """Gets the document_ref of this DataPackageItemInfo.  # noqa: E501


        :return: The document_ref of this DataPackageItemInfo.  # noqa: E501
        :rtype: DataFileTreePathInfo
        """
        return self._document_ref

    @document_ref.setter
    def document_ref(self, document_ref):
        """Sets the document_ref of this DataPackageItemInfo.


        :param document_ref: The document_ref of this DataPackageItemInfo.  # noqa: E501
        :type: DataFileTreePathInfo
        """

        self._document_ref = document_ref

    @property
    def exists_in_db(self):
        """Gets the exists_in_db of this DataPackageItemInfo.  # noqa: E501


        :return: The exists_in_db of this DataPackageItemInfo.  # noqa: E501
        :rtype: bool
        """
        return self._exists_in_db

    @exists_in_db.setter
    def exists_in_db(self, exists_in_db):
        """Sets the exists_in_db of this DataPackageItemInfo.


        :param exists_in_db: The exists_in_db of this DataPackageItemInfo.  # noqa: E501
        :type: bool
        """

        self._exists_in_db = exists_in_db

    @property
    def in_version(self):
        """Gets the in_version of this DataPackageItemInfo.  # noqa: E501


        :return: The in_version of this DataPackageItemInfo.  # noqa: E501
        :rtype: str
        """
        return self._in_version

    @in_version.setter
    def in_version(self, in_version):
        """Sets the in_version of this DataPackageItemInfo.


        :param in_version: The in_version of this DataPackageItemInfo.  # noqa: E501
        :type: str
        """

        self._in_version = in_version

    @property
    def linked_to_bkdn_elem_instance(self):
        """Gets the linked_to_bkdn_elem_instance of this DataPackageItemInfo.  # noqa: E501


        :return: The linked_to_bkdn_elem_instance of this DataPackageItemInfo.  # noqa: E501
        :rtype: int
        """
        return self._linked_to_bkdn_elem_instance

    @linked_to_bkdn_elem_instance.setter
    def linked_to_bkdn_elem_instance(self, linked_to_bkdn_elem_instance):
        """Sets the linked_to_bkdn_elem_instance of this DataPackageItemInfo.


        :param linked_to_bkdn_elem_instance: The linked_to_bkdn_elem_instance of this DataPackageItemInfo.  # noqa: E501
        :type: int
        """

        self._linked_to_bkdn_elem_instance = linked_to_bkdn_elem_instance

    @property
    def version_status(self):
        """Gets the version_status of this DataPackageItemInfo.  # noqa: E501


        :return: The version_status of this DataPackageItemInfo.  # noqa: E501
        :rtype: str
        """
        return self._version_status

    @version_status.setter
    def version_status(self, version_status):
        """Sets the version_status of this DataPackageItemInfo.


        :param version_status: The version_status of this DataPackageItemInfo.  # noqa: E501
        :type: str
        """

        self._version_status = version_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataPackageItemInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataPackageItemInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
