# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SimpleProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'is_derived': 'bool',
        'name': 'str',
        'num_val': 'float',
        'si_unit': 'bool',
        'unit': 'str',
        'val': 'str',
        'value_domain': 'str'
    }

    attribute_map = {
        'action': 'action',
        'is_derived': 'is_derived',
        'name': 'name',
        'num_val': 'num_val',
        'si_unit': 'si_unit',
        'unit': 'unit',
        'val': 'val',
        'value_domain': 'value_domain'
    }

    def __init__(self, action=None, is_derived=None, name=None, num_val=None, si_unit=None, unit=None, val=None, value_domain=None):  # noqa: E501
        """SimpleProperty - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._is_derived = None
        self._name = None
        self._num_val = None
        self._si_unit = None
        self._unit = None
        self._val = None
        self._value_domain = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if is_derived is not None:
            self.is_derived = is_derived
        if name is not None:
            self.name = name
        if num_val is not None:
            self.num_val = num_val
        if si_unit is not None:
            self.si_unit = si_unit
        if unit is not None:
            self.unit = unit
        if val is not None:
            self.val = val
        if value_domain is not None:
            self.value_domain = value_domain

    @property
    def action(self):
        """Gets the action of this SimpleProperty.  # noqa: E501


        :return: The action of this SimpleProperty.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this SimpleProperty.


        :param action: The action of this SimpleProperty.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def is_derived(self):
        """Gets the is_derived of this SimpleProperty.  # noqa: E501


        :return: The is_derived of this SimpleProperty.  # noqa: E501
        :rtype: bool
        """
        return self._is_derived

    @is_derived.setter
    def is_derived(self, is_derived):
        """Sets the is_derived of this SimpleProperty.


        :param is_derived: The is_derived of this SimpleProperty.  # noqa: E501
        :type: bool
        """

        self._is_derived = is_derived

    @property
    def name(self):
        """Gets the name of this SimpleProperty.  # noqa: E501


        :return: The name of this SimpleProperty.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SimpleProperty.


        :param name: The name of this SimpleProperty.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_val(self):
        """Gets the num_val of this SimpleProperty.  # noqa: E501


        :return: The num_val of this SimpleProperty.  # noqa: E501
        :rtype: float
        """
        return self._num_val

    @num_val.setter
    def num_val(self, num_val):
        """Sets the num_val of this SimpleProperty.


        :param num_val: The num_val of this SimpleProperty.  # noqa: E501
        :type: float
        """

        self._num_val = num_val

    @property
    def si_unit(self):
        """Gets the si_unit of this SimpleProperty.  # noqa: E501


        :return: The si_unit of this SimpleProperty.  # noqa: E501
        :rtype: bool
        """
        return self._si_unit

    @si_unit.setter
    def si_unit(self, si_unit):
        """Sets the si_unit of this SimpleProperty.


        :param si_unit: The si_unit of this SimpleProperty.  # noqa: E501
        :type: bool
        """

        self._si_unit = si_unit

    @property
    def unit(self):
        """Gets the unit of this SimpleProperty.  # noqa: E501


        :return: The unit of this SimpleProperty.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this SimpleProperty.


        :param unit: The unit of this SimpleProperty.  # noqa: E501
        :type: str
        """

        self._unit = unit

    @property
    def val(self):
        """Gets the val of this SimpleProperty.  # noqa: E501


        :return: The val of this SimpleProperty.  # noqa: E501
        :rtype: str
        """
        return self._val

    @val.setter
    def val(self, val):
        """Sets the val of this SimpleProperty.


        :param val: The val of this SimpleProperty.  # noqa: E501
        :type: str
        """

        self._val = val

    @property
    def value_domain(self):
        """Gets the value_domain of this SimpleProperty.  # noqa: E501


        :return: The value_domain of this SimpleProperty.  # noqa: E501
        :rtype: str
        """
        return self._value_domain

    @value_domain.setter
    def value_domain(self, value_domain):
        """Sets the value_domain of this SimpleProperty.


        :param value_domain: The value_domain of this SimpleProperty.  # noqa: E501
        :type: str
        """

        self._value_domain = value_domain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SimpleProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SimpleProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
