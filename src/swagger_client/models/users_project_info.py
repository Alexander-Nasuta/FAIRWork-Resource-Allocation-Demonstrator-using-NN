# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsersProjectInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_project': 'ProjectInfo',
        'is_active_in_project': 'bool',
        'user_email': 'str',
        'user_name': 'str',
        'user_registered_as': 'list[str]'
    }

    attribute_map = {
        'in_project': 'in_project',
        'is_active_in_project': 'is_active_in_project',
        'user_email': 'user_email',
        'user_name': 'user_name',
        'user_registered_as': 'user_registered_as'
    }

    def __init__(self, in_project=None, is_active_in_project=None, user_email=None, user_name=None, user_registered_as=None):  # noqa: E501
        """UsersProjectInfo - a model defined in Swagger"""  # noqa: E501
        self._in_project = None
        self._is_active_in_project = None
        self._user_email = None
        self._user_name = None
        self._user_registered_as = None
        self.discriminator = None
        if in_project is not None:
            self.in_project = in_project
        if is_active_in_project is not None:
            self.is_active_in_project = is_active_in_project
        if user_email is not None:
            self.user_email = user_email
        if user_name is not None:
            self.user_name = user_name
        if user_registered_as is not None:
            self.user_registered_as = user_registered_as

    @property
    def in_project(self):
        """Gets the in_project of this UsersProjectInfo.  # noqa: E501


        :return: The in_project of this UsersProjectInfo.  # noqa: E501
        :rtype: ProjectInfo
        """
        return self._in_project

    @in_project.setter
    def in_project(self, in_project):
        """Sets the in_project of this UsersProjectInfo.


        :param in_project: The in_project of this UsersProjectInfo.  # noqa: E501
        :type: ProjectInfo
        """

        self._in_project = in_project

    @property
    def is_active_in_project(self):
        """Gets the is_active_in_project of this UsersProjectInfo.  # noqa: E501


        :return: The is_active_in_project of this UsersProjectInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_active_in_project

    @is_active_in_project.setter
    def is_active_in_project(self, is_active_in_project):
        """Sets the is_active_in_project of this UsersProjectInfo.


        :param is_active_in_project: The is_active_in_project of this UsersProjectInfo.  # noqa: E501
        :type: bool
        """

        self._is_active_in_project = is_active_in_project

    @property
    def user_email(self):
        """Gets the user_email of this UsersProjectInfo.  # noqa: E501


        :return: The user_email of this UsersProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this UsersProjectInfo.


        :param user_email: The user_email of this UsersProjectInfo.  # noqa: E501
        :type: str
        """

        self._user_email = user_email

    @property
    def user_name(self):
        """Gets the user_name of this UsersProjectInfo.  # noqa: E501


        :return: The user_name of this UsersProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UsersProjectInfo.


        :param user_name: The user_name of this UsersProjectInfo.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def user_registered_as(self):
        """Gets the user_registered_as of this UsersProjectInfo.  # noqa: E501


        :return: The user_registered_as of this UsersProjectInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_registered_as

    @user_registered_as.setter
    def user_registered_as(self, user_registered_as):
        """Sets the user_registered_as of this UsersProjectInfo.


        :param user_registered_as: The user_registered_as of this UsersProjectInfo.  # noqa: E501
        :type: list[str]
        """

        self._user_registered_as = user_registered_as

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersProjectInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersProjectInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
