# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StickyNoteInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment_by': 'str',
        'comment_on_version': 'str',
        'expiry_date': 'int',
        'note_content': 'str',
        'note_id': 'int',
        'time': 'int'
    }

    attribute_map = {
        'comment_by': 'comment_by',
        'comment_on_version': 'comment_on_version',
        'expiry_date': 'expiry_date',
        'note_content': 'note_content',
        'note_id': 'note_id',
        'time': 'time'
    }

    def __init__(self, comment_by=None, comment_on_version=None, expiry_date=None, note_content=None, note_id=None, time=None):  # noqa: E501
        """StickyNoteInfo - a model defined in Swagger"""  # noqa: E501
        self._comment_by = None
        self._comment_on_version = None
        self._expiry_date = None
        self._note_content = None
        self._note_id = None
        self._time = None
        self.discriminator = None
        if comment_by is not None:
            self.comment_by = comment_by
        if comment_on_version is not None:
            self.comment_on_version = comment_on_version
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if note_content is not None:
            self.note_content = note_content
        if note_id is not None:
            self.note_id = note_id
        if time is not None:
            self.time = time

    @property
    def comment_by(self):
        """Gets the comment_by of this StickyNoteInfo.  # noqa: E501


        :return: The comment_by of this StickyNoteInfo.  # noqa: E501
        :rtype: str
        """
        return self._comment_by

    @comment_by.setter
    def comment_by(self, comment_by):
        """Sets the comment_by of this StickyNoteInfo.


        :param comment_by: The comment_by of this StickyNoteInfo.  # noqa: E501
        :type: str
        """

        self._comment_by = comment_by

    @property
    def comment_on_version(self):
        """Gets the comment_on_version of this StickyNoteInfo.  # noqa: E501


        :return: The comment_on_version of this StickyNoteInfo.  # noqa: E501
        :rtype: str
        """
        return self._comment_on_version

    @comment_on_version.setter
    def comment_on_version(self, comment_on_version):
        """Sets the comment_on_version of this StickyNoteInfo.


        :param comment_on_version: The comment_on_version of this StickyNoteInfo.  # noqa: E501
        :type: str
        """

        self._comment_on_version = comment_on_version

    @property
    def expiry_date(self):
        """Gets the expiry_date of this StickyNoteInfo.  # noqa: E501


        :return: The expiry_date of this StickyNoteInfo.  # noqa: E501
        :rtype: int
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this StickyNoteInfo.


        :param expiry_date: The expiry_date of this StickyNoteInfo.  # noqa: E501
        :type: int
        """

        self._expiry_date = expiry_date

    @property
    def note_content(self):
        """Gets the note_content of this StickyNoteInfo.  # noqa: E501


        :return: The note_content of this StickyNoteInfo.  # noqa: E501
        :rtype: str
        """
        return self._note_content

    @note_content.setter
    def note_content(self, note_content):
        """Sets the note_content of this StickyNoteInfo.


        :param note_content: The note_content of this StickyNoteInfo.  # noqa: E501
        :type: str
        """

        self._note_content = note_content

    @property
    def note_id(self):
        """Gets the note_id of this StickyNoteInfo.  # noqa: E501


        :return: The note_id of this StickyNoteInfo.  # noqa: E501
        :rtype: int
        """
        return self._note_id

    @note_id.setter
    def note_id(self, note_id):
        """Sets the note_id of this StickyNoteInfo.


        :param note_id: The note_id of this StickyNoteInfo.  # noqa: E501
        :type: int
        """

        self._note_id = note_id

    @property
    def time(self):
        """Gets the time of this StickyNoteInfo.  # noqa: E501


        :return: The time of this StickyNoteInfo.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this StickyNoteInfo.


        :param time: The time of this StickyNoteInfo.  # noqa: E501
        :type: int
        """

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StickyNoteInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StickyNoteInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
