# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TypeNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rdl_class': 'RDLClass',
        'subtypes': 'list[TypeNode]'
    }

    attribute_map = {
        'rdl_class': 'rdlClass',
        'subtypes': 'subtypes'
    }

    def __init__(self, rdl_class=None, subtypes=None):  # noqa: E501
        """TypeNode - a model defined in Swagger"""  # noqa: E501
        self._rdl_class = None
        self._subtypes = None
        self.discriminator = None
        if rdl_class is not None:
            self.rdl_class = rdl_class
        if subtypes is not None:
            self.subtypes = subtypes

    @property
    def rdl_class(self):
        """Gets the rdl_class of this TypeNode.  # noqa: E501


        :return: The rdl_class of this TypeNode.  # noqa: E501
        :rtype: RDLClass
        """
        return self._rdl_class

    @rdl_class.setter
    def rdl_class(self, rdl_class):
        """Sets the rdl_class of this TypeNode.


        :param rdl_class: The rdl_class of this TypeNode.  # noqa: E501
        :type: RDLClass
        """

        self._rdl_class = rdl_class

    @property
    def subtypes(self):
        """Gets the subtypes of this TypeNode.  # noqa: E501


        :return: The subtypes of this TypeNode.  # noqa: E501
        :rtype: list[TypeNode]
        """
        return self._subtypes

    @subtypes.setter
    def subtypes(self, subtypes):
        """Sets the subtypes of this TypeNode.


        :param subtypes: The subtypes of this TypeNode.  # noqa: E501
        :type: list[TypeNode]
        """

        self._subtypes = subtypes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TypeNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypeNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
