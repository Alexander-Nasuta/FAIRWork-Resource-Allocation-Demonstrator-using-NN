# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class XtxRDLClass(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ancestors': 'list[str]',
        'class_uri': 'str',
        'constraints': 'list[ConstraintView]',
        'description': 'str',
        'name': 'str',
        'properties': 'list[PropertyView]',
        'status': 'str'
    }

    attribute_map = {
        'ancestors': 'ancestors',
        'class_uri': 'class_uri',
        'constraints': 'constraints',
        'description': 'description',
        'name': 'name',
        'properties': 'properties',
        'status': 'status'
    }

    def __init__(self, ancestors=None, class_uri=None, constraints=None, description=None, name=None, properties=None, status=None):  # noqa: E501
        """XtxRDLClass - a model defined in Swagger"""  # noqa: E501
        self._ancestors = None
        self._class_uri = None
        self._constraints = None
        self._description = None
        self._name = None
        self._properties = None
        self._status = None
        self.discriminator = None
        if ancestors is not None:
            self.ancestors = ancestors
        if class_uri is not None:
            self.class_uri = class_uri
        if constraints is not None:
            self.constraints = constraints
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if properties is not None:
            self.properties = properties
        if status is not None:
            self.status = status

    @property
    def ancestors(self):
        """Gets the ancestors of this XtxRDLClass.  # noqa: E501


        :return: The ancestors of this XtxRDLClass.  # noqa: E501
        :rtype: list[str]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors):
        """Sets the ancestors of this XtxRDLClass.


        :param ancestors: The ancestors of this XtxRDLClass.  # noqa: E501
        :type: list[str]
        """

        self._ancestors = ancestors

    @property
    def class_uri(self):
        """Gets the class_uri of this XtxRDLClass.  # noqa: E501


        :return: The class_uri of this XtxRDLClass.  # noqa: E501
        :rtype: str
        """
        return self._class_uri

    @class_uri.setter
    def class_uri(self, class_uri):
        """Sets the class_uri of this XtxRDLClass.


        :param class_uri: The class_uri of this XtxRDLClass.  # noqa: E501
        :type: str
        """

        self._class_uri = class_uri

    @property
    def constraints(self):
        """Gets the constraints of this XtxRDLClass.  # noqa: E501


        :return: The constraints of this XtxRDLClass.  # noqa: E501
        :rtype: list[ConstraintView]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this XtxRDLClass.


        :param constraints: The constraints of this XtxRDLClass.  # noqa: E501
        :type: list[ConstraintView]
        """

        self._constraints = constraints

    @property
    def description(self):
        """Gets the description of this XtxRDLClass.  # noqa: E501


        :return: The description of this XtxRDLClass.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this XtxRDLClass.


        :param description: The description of this XtxRDLClass.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this XtxRDLClass.  # noqa: E501


        :return: The name of this XtxRDLClass.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this XtxRDLClass.


        :param name: The name of this XtxRDLClass.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this XtxRDLClass.  # noqa: E501


        :return: The properties of this XtxRDLClass.  # noqa: E501
        :rtype: list[PropertyView]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this XtxRDLClass.


        :param properties: The properties of this XtxRDLClass.  # noqa: E501
        :type: list[PropertyView]
        """

        self._properties = properties

    @property
    def status(self):
        """Gets the status of this XtxRDLClass.  # noqa: E501


        :return: The status of this XtxRDLClass.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this XtxRDLClass.


        :param status: The status of this XtxRDLClass.  # noqa: E501
        :type: str
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(XtxRDLClass, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, XtxRDLClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
