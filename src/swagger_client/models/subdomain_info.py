# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubdomainInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'am_i_project_leader': 'bool',
        'am_i_project_member': 'bool',
        'created_by_user': 'UserInfo',
        'creation_date': 'str',
        'id': 'str',
        'my_roles_in_subdomain': 'list[str]',
        'project_leader': 'UserInfo',
        'project_leader_in_phase': 'str',
        'project_members': 'list[UserInSubdomainInfo]',
        'rep_elem_id': 'int',
        'root_bkdn_elem': 'BreakdownElementInfo'
    }

    attribute_map = {
        'am_i_project_leader': 'am_i_project_leader',
        'am_i_project_member': 'am_i_project_member',
        'created_by_user': 'created_by_user',
        'creation_date': 'creation_date',
        'id': 'id',
        'my_roles_in_subdomain': 'my_roles_in_subdomain',
        'project_leader': 'project_leader',
        'project_leader_in_phase': 'project_leader_in_phase',
        'project_members': 'project_members',
        'rep_elem_id': 'rep_elem_id',
        'root_bkdn_elem': 'root_bkdn_elem'
    }

    def __init__(self, am_i_project_leader=None, am_i_project_member=None, created_by_user=None, creation_date=None, id=None, my_roles_in_subdomain=None, project_leader=None, project_leader_in_phase=None, project_members=None, rep_elem_id=None, root_bkdn_elem=None):  # noqa: E501
        """SubdomainInfo - a model defined in Swagger"""  # noqa: E501
        self._am_i_project_leader = None
        self._am_i_project_member = None
        self._created_by_user = None
        self._creation_date = None
        self._id = None
        self._my_roles_in_subdomain = None
        self._project_leader = None
        self._project_leader_in_phase = None
        self._project_members = None
        self._rep_elem_id = None
        self._root_bkdn_elem = None
        self.discriminator = None
        if am_i_project_leader is not None:
            self.am_i_project_leader = am_i_project_leader
        if am_i_project_member is not None:
            self.am_i_project_member = am_i_project_member
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if creation_date is not None:
            self.creation_date = creation_date
        if id is not None:
            self.id = id
        if my_roles_in_subdomain is not None:
            self.my_roles_in_subdomain = my_roles_in_subdomain
        if project_leader is not None:
            self.project_leader = project_leader
        if project_leader_in_phase is not None:
            self.project_leader_in_phase = project_leader_in_phase
        if project_members is not None:
            self.project_members = project_members
        if rep_elem_id is not None:
            self.rep_elem_id = rep_elem_id
        if root_bkdn_elem is not None:
            self.root_bkdn_elem = root_bkdn_elem

    @property
    def am_i_project_leader(self):
        """Gets the am_i_project_leader of this SubdomainInfo.  # noqa: E501


        :return: The am_i_project_leader of this SubdomainInfo.  # noqa: E501
        :rtype: bool
        """
        return self._am_i_project_leader

    @am_i_project_leader.setter
    def am_i_project_leader(self, am_i_project_leader):
        """Sets the am_i_project_leader of this SubdomainInfo.


        :param am_i_project_leader: The am_i_project_leader of this SubdomainInfo.  # noqa: E501
        :type: bool
        """

        self._am_i_project_leader = am_i_project_leader

    @property
    def am_i_project_member(self):
        """Gets the am_i_project_member of this SubdomainInfo.  # noqa: E501


        :return: The am_i_project_member of this SubdomainInfo.  # noqa: E501
        :rtype: bool
        """
        return self._am_i_project_member

    @am_i_project_member.setter
    def am_i_project_member(self, am_i_project_member):
        """Sets the am_i_project_member of this SubdomainInfo.


        :param am_i_project_member: The am_i_project_member of this SubdomainInfo.  # noqa: E501
        :type: bool
        """

        self._am_i_project_member = am_i_project_member

    @property
    def created_by_user(self):
        """Gets the created_by_user of this SubdomainInfo.  # noqa: E501


        :return: The created_by_user of this SubdomainInfo.  # noqa: E501
        :rtype: UserInfo
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this SubdomainInfo.


        :param created_by_user: The created_by_user of this SubdomainInfo.  # noqa: E501
        :type: UserInfo
        """

        self._created_by_user = created_by_user

    @property
    def creation_date(self):
        """Gets the creation_date of this SubdomainInfo.  # noqa: E501


        :return: The creation_date of this SubdomainInfo.  # noqa: E501
        :rtype: str
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this SubdomainInfo.


        :param creation_date: The creation_date of this SubdomainInfo.  # noqa: E501
        :type: str
        """

        self._creation_date = creation_date

    @property
    def id(self):
        """Gets the id of this SubdomainInfo.  # noqa: E501


        :return: The id of this SubdomainInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubdomainInfo.


        :param id: The id of this SubdomainInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def my_roles_in_subdomain(self):
        """Gets the my_roles_in_subdomain of this SubdomainInfo.  # noqa: E501


        :return: The my_roles_in_subdomain of this SubdomainInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._my_roles_in_subdomain

    @my_roles_in_subdomain.setter
    def my_roles_in_subdomain(self, my_roles_in_subdomain):
        """Sets the my_roles_in_subdomain of this SubdomainInfo.


        :param my_roles_in_subdomain: The my_roles_in_subdomain of this SubdomainInfo.  # noqa: E501
        :type: list[str]
        """

        self._my_roles_in_subdomain = my_roles_in_subdomain

    @property
    def project_leader(self):
        """Gets the project_leader of this SubdomainInfo.  # noqa: E501


        :return: The project_leader of this SubdomainInfo.  # noqa: E501
        :rtype: UserInfo
        """
        return self._project_leader

    @project_leader.setter
    def project_leader(self, project_leader):
        """Sets the project_leader of this SubdomainInfo.


        :param project_leader: The project_leader of this SubdomainInfo.  # noqa: E501
        :type: UserInfo
        """

        self._project_leader = project_leader

    @property
    def project_leader_in_phase(self):
        """Gets the project_leader_in_phase of this SubdomainInfo.  # noqa: E501


        :return: The project_leader_in_phase of this SubdomainInfo.  # noqa: E501
        :rtype: str
        """
        return self._project_leader_in_phase

    @project_leader_in_phase.setter
    def project_leader_in_phase(self, project_leader_in_phase):
        """Sets the project_leader_in_phase of this SubdomainInfo.


        :param project_leader_in_phase: The project_leader_in_phase of this SubdomainInfo.  # noqa: E501
        :type: str
        """

        self._project_leader_in_phase = project_leader_in_phase

    @property
    def project_members(self):
        """Gets the project_members of this SubdomainInfo.  # noqa: E501


        :return: The project_members of this SubdomainInfo.  # noqa: E501
        :rtype: list[UserInSubdomainInfo]
        """
        return self._project_members

    @project_members.setter
    def project_members(self, project_members):
        """Sets the project_members of this SubdomainInfo.


        :param project_members: The project_members of this SubdomainInfo.  # noqa: E501
        :type: list[UserInSubdomainInfo]
        """

        self._project_members = project_members

    @property
    def rep_elem_id(self):
        """Gets the rep_elem_id of this SubdomainInfo.  # noqa: E501


        :return: The rep_elem_id of this SubdomainInfo.  # noqa: E501
        :rtype: int
        """
        return self._rep_elem_id

    @rep_elem_id.setter
    def rep_elem_id(self, rep_elem_id):
        """Sets the rep_elem_id of this SubdomainInfo.


        :param rep_elem_id: The rep_elem_id of this SubdomainInfo.  # noqa: E501
        :type: int
        """

        self._rep_elem_id = rep_elem_id

    @property
    def root_bkdn_elem(self):
        """Gets the root_bkdn_elem of this SubdomainInfo.  # noqa: E501


        :return: The root_bkdn_elem of this SubdomainInfo.  # noqa: E501
        :rtype: BreakdownElementInfo
        """
        return self._root_bkdn_elem

    @root_bkdn_elem.setter
    def root_bkdn_elem(self, root_bkdn_elem):
        """Sets the root_bkdn_elem of this SubdomainInfo.


        :param root_bkdn_elem: The root_bkdn_elem of this SubdomainInfo.  # noqa: E501
        :type: BreakdownElementInfo
        """

        self._root_bkdn_elem = root_bkdn_elem

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubdomainInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubdomainInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
