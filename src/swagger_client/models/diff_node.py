# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DiffNode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'baselineid': 'str',
        'children': 'list[DiffNode]',
        'children_count': 'int',
        'description': 'str',
        'doc_instance_id': 'int',
        'id': 'str',
        'name': 'str',
        'nodetype': 'str',
        'string_path': 'list[str]',
        'tree_path': 'list[int]',
        'version': 'str'
    }

    attribute_map = {
        'baselineid': 'baselineid',
        'children': 'children',
        'children_count': 'children_count',
        'description': 'description',
        'doc_instance_id': 'doc_instance_id',
        'id': 'id',
        'name': 'name',
        'nodetype': 'nodetype',
        'string_path': 'stringPath',
        'tree_path': 'treePath',
        'version': 'version'
    }

    def __init__(self, baselineid=None, children=None, children_count=None, description=None, doc_instance_id=None, id=None, name=None, nodetype=None, string_path=None, tree_path=None, version=None):  # noqa: E501
        """DiffNode - a model defined in Swagger"""  # noqa: E501
        self._baselineid = None
        self._children = None
        self._children_count = None
        self._description = None
        self._doc_instance_id = None
        self._id = None
        self._name = None
        self._nodetype = None
        self._string_path = None
        self._tree_path = None
        self._version = None
        self.discriminator = None
        if baselineid is not None:
            self.baselineid = baselineid
        if children is not None:
            self.children = children
        if children_count is not None:
            self.children_count = children_count
        if description is not None:
            self.description = description
        if doc_instance_id is not None:
            self.doc_instance_id = doc_instance_id
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if nodetype is not None:
            self.nodetype = nodetype
        if string_path is not None:
            self.string_path = string_path
        if tree_path is not None:
            self.tree_path = tree_path
        if version is not None:
            self.version = version

    @property
    def baselineid(self):
        """Gets the baselineid of this DiffNode.  # noqa: E501


        :return: The baselineid of this DiffNode.  # noqa: E501
        :rtype: str
        """
        return self._baselineid

    @baselineid.setter
    def baselineid(self, baselineid):
        """Sets the baselineid of this DiffNode.


        :param baselineid: The baselineid of this DiffNode.  # noqa: E501
        :type: str
        """

        self._baselineid = baselineid

    @property
    def children(self):
        """Gets the children of this DiffNode.  # noqa: E501


        :return: The children of this DiffNode.  # noqa: E501
        :rtype: list[DiffNode]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this DiffNode.


        :param children: The children of this DiffNode.  # noqa: E501
        :type: list[DiffNode]
        """

        self._children = children

    @property
    def children_count(self):
        """Gets the children_count of this DiffNode.  # noqa: E501


        :return: The children_count of this DiffNode.  # noqa: E501
        :rtype: int
        """
        return self._children_count

    @children_count.setter
    def children_count(self, children_count):
        """Sets the children_count of this DiffNode.


        :param children_count: The children_count of this DiffNode.  # noqa: E501
        :type: int
        """

        self._children_count = children_count

    @property
    def description(self):
        """Gets the description of this DiffNode.  # noqa: E501


        :return: The description of this DiffNode.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DiffNode.


        :param description: The description of this DiffNode.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def doc_instance_id(self):
        """Gets the doc_instance_id of this DiffNode.  # noqa: E501


        :return: The doc_instance_id of this DiffNode.  # noqa: E501
        :rtype: int
        """
        return self._doc_instance_id

    @doc_instance_id.setter
    def doc_instance_id(self, doc_instance_id):
        """Sets the doc_instance_id of this DiffNode.


        :param doc_instance_id: The doc_instance_id of this DiffNode.  # noqa: E501
        :type: int
        """

        self._doc_instance_id = doc_instance_id

    @property
    def id(self):
        """Gets the id of this DiffNode.  # noqa: E501


        :return: The id of this DiffNode.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiffNode.


        :param id: The id of this DiffNode.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DiffNode.  # noqa: E501


        :return: The name of this DiffNode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DiffNode.


        :param name: The name of this DiffNode.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nodetype(self):
        """Gets the nodetype of this DiffNode.  # noqa: E501


        :return: The nodetype of this DiffNode.  # noqa: E501
        :rtype: str
        """
        return self._nodetype

    @nodetype.setter
    def nodetype(self, nodetype):
        """Sets the nodetype of this DiffNode.


        :param nodetype: The nodetype of this DiffNode.  # noqa: E501
        :type: str
        """

        self._nodetype = nodetype

    @property
    def string_path(self):
        """Gets the string_path of this DiffNode.  # noqa: E501


        :return: The string_path of this DiffNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._string_path

    @string_path.setter
    def string_path(self, string_path):
        """Sets the string_path of this DiffNode.


        :param string_path: The string_path of this DiffNode.  # noqa: E501
        :type: list[str]
        """

        self._string_path = string_path

    @property
    def tree_path(self):
        """Gets the tree_path of this DiffNode.  # noqa: E501


        :return: The tree_path of this DiffNode.  # noqa: E501
        :rtype: list[int]
        """
        return self._tree_path

    @tree_path.setter
    def tree_path(self, tree_path):
        """Sets the tree_path of this DiffNode.


        :param tree_path: The tree_path of this DiffNode.  # noqa: E501
        :type: list[int]
        """

        self._tree_path = tree_path

    @property
    def version(self):
        """Gets the version of this DiffNode.  # noqa: E501


        :return: The version of this DiffNode.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DiffNode.


        :param version: The version of this DiffNode.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DiffNode, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiffNode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
