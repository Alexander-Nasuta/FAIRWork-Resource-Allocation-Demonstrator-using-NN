# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConceptView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asigned_concepts': 'list[str]',
        'asigned_properties': 'list[str]',
        'classified': 'list[str]',
        'classifiers': 'list[str]',
        'description': 'str',
        'editable': 'bool',
        'instance_type': 'str',
        'oneof_elements': 'list[str]',
        'restrictions': 'list[str]',
        'status': 'str',
        'subtypes': 'list[str]',
        'super_types': 'list[str]',
        'units': 'list[str]',
        'urn': 'str'
    }

    attribute_map = {
        'asigned_concepts': 'asigned_concepts',
        'asigned_properties': 'asigned_properties',
        'classified': 'classified',
        'classifiers': 'classifiers',
        'description': 'description',
        'editable': 'editable',
        'instance_type': 'instance_type',
        'oneof_elements': 'oneof_elements',
        'restrictions': 'restrictions',
        'status': 'status',
        'subtypes': 'subtypes',
        'super_types': 'super_types',
        'units': 'units',
        'urn': 'urn'
    }

    def __init__(self, asigned_concepts=None, asigned_properties=None, classified=None, classifiers=None, description=None, editable=None, instance_type=None, oneof_elements=None, restrictions=None, status=None, subtypes=None, super_types=None, units=None, urn=None):  # noqa: E501
        """ConceptView - a model defined in Swagger"""  # noqa: E501
        self._asigned_concepts = None
        self._asigned_properties = None
        self._classified = None
        self._classifiers = None
        self._description = None
        self._editable = None
        self._instance_type = None
        self._oneof_elements = None
        self._restrictions = None
        self._status = None
        self._subtypes = None
        self._super_types = None
        self._units = None
        self._urn = None
        self.discriminator = None
        if asigned_concepts is not None:
            self.asigned_concepts = asigned_concepts
        if asigned_properties is not None:
            self.asigned_properties = asigned_properties
        if classified is not None:
            self.classified = classified
        if classifiers is not None:
            self.classifiers = classifiers
        if description is not None:
            self.description = description
        if editable is not None:
            self.editable = editable
        if instance_type is not None:
            self.instance_type = instance_type
        if oneof_elements is not None:
            self.oneof_elements = oneof_elements
        if restrictions is not None:
            self.restrictions = restrictions
        if status is not None:
            self.status = status
        if subtypes is not None:
            self.subtypes = subtypes
        if super_types is not None:
            self.super_types = super_types
        if units is not None:
            self.units = units
        if urn is not None:
            self.urn = urn

    @property
    def asigned_concepts(self):
        """Gets the asigned_concepts of this ConceptView.  # noqa: E501


        :return: The asigned_concepts of this ConceptView.  # noqa: E501
        :rtype: list[str]
        """
        return self._asigned_concepts

    @asigned_concepts.setter
    def asigned_concepts(self, asigned_concepts):
        """Sets the asigned_concepts of this ConceptView.


        :param asigned_concepts: The asigned_concepts of this ConceptView.  # noqa: E501
        :type: list[str]
        """

        self._asigned_concepts = asigned_concepts

    @property
    def asigned_properties(self):
        """Gets the asigned_properties of this ConceptView.  # noqa: E501


        :return: The asigned_properties of this ConceptView.  # noqa: E501
        :rtype: list[str]
        """
        return self._asigned_properties

    @asigned_properties.setter
    def asigned_properties(self, asigned_properties):
        """Sets the asigned_properties of this ConceptView.


        :param asigned_properties: The asigned_properties of this ConceptView.  # noqa: E501
        :type: list[str]
        """

        self._asigned_properties = asigned_properties

    @property
    def classified(self):
        """Gets the classified of this ConceptView.  # noqa: E501


        :return: The classified of this ConceptView.  # noqa: E501
        :rtype: list[str]
        """
        return self._classified

    @classified.setter
    def classified(self, classified):
        """Sets the classified of this ConceptView.


        :param classified: The classified of this ConceptView.  # noqa: E501
        :type: list[str]
        """

        self._classified = classified

    @property
    def classifiers(self):
        """Gets the classifiers of this ConceptView.  # noqa: E501


        :return: The classifiers of this ConceptView.  # noqa: E501
        :rtype: list[str]
        """
        return self._classifiers

    @classifiers.setter
    def classifiers(self, classifiers):
        """Sets the classifiers of this ConceptView.


        :param classifiers: The classifiers of this ConceptView.  # noqa: E501
        :type: list[str]
        """

        self._classifiers = classifiers

    @property
    def description(self):
        """Gets the description of this ConceptView.  # noqa: E501


        :return: The description of this ConceptView.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConceptView.


        :param description: The description of this ConceptView.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def editable(self):
        """Gets the editable of this ConceptView.  # noqa: E501


        :return: The editable of this ConceptView.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this ConceptView.


        :param editable: The editable of this ConceptView.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def instance_type(self):
        """Gets the instance_type of this ConceptView.  # noqa: E501


        :return: The instance_type of this ConceptView.  # noqa: E501
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this ConceptView.


        :param instance_type: The instance_type of this ConceptView.  # noqa: E501
        :type: str
        """

        self._instance_type = instance_type

    @property
    def oneof_elements(self):
        """Gets the oneof_elements of this ConceptView.  # noqa: E501


        :return: The oneof_elements of this ConceptView.  # noqa: E501
        :rtype: list[str]
        """
        return self._oneof_elements

    @oneof_elements.setter
    def oneof_elements(self, oneof_elements):
        """Sets the oneof_elements of this ConceptView.


        :param oneof_elements: The oneof_elements of this ConceptView.  # noqa: E501
        :type: list[str]
        """

        self._oneof_elements = oneof_elements

    @property
    def restrictions(self):
        """Gets the restrictions of this ConceptView.  # noqa: E501


        :return: The restrictions of this ConceptView.  # noqa: E501
        :rtype: list[str]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this ConceptView.


        :param restrictions: The restrictions of this ConceptView.  # noqa: E501
        :type: list[str]
        """

        self._restrictions = restrictions

    @property
    def status(self):
        """Gets the status of this ConceptView.  # noqa: E501


        :return: The status of this ConceptView.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ConceptView.


        :param status: The status of this ConceptView.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subtypes(self):
        """Gets the subtypes of this ConceptView.  # noqa: E501


        :return: The subtypes of this ConceptView.  # noqa: E501
        :rtype: list[str]
        """
        return self._subtypes

    @subtypes.setter
    def subtypes(self, subtypes):
        """Sets the subtypes of this ConceptView.


        :param subtypes: The subtypes of this ConceptView.  # noqa: E501
        :type: list[str]
        """

        self._subtypes = subtypes

    @property
    def super_types(self):
        """Gets the super_types of this ConceptView.  # noqa: E501


        :return: The super_types of this ConceptView.  # noqa: E501
        :rtype: list[str]
        """
        return self._super_types

    @super_types.setter
    def super_types(self, super_types):
        """Sets the super_types of this ConceptView.


        :param super_types: The super_types of this ConceptView.  # noqa: E501
        :type: list[str]
        """

        self._super_types = super_types

    @property
    def units(self):
        """Gets the units of this ConceptView.  # noqa: E501


        :return: The units of this ConceptView.  # noqa: E501
        :rtype: list[str]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this ConceptView.


        :param units: The units of this ConceptView.  # noqa: E501
        :type: list[str]
        """

        self._units = units

    @property
    def urn(self):
        """Gets the urn of this ConceptView.  # noqa: E501


        :return: The urn of this ConceptView.  # noqa: E501
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this ConceptView.


        :param urn: The urn of this ConceptView.  # noqa: E501
        :type: str
        """

        self._urn = urn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConceptView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConceptView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
