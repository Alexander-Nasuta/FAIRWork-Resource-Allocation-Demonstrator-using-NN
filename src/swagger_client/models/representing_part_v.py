# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RepresentingPartV(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created': 'str',
        'created_by': 'str',
        'description': 'str',
        'documents': 'list[DocumentV]',
        'domain': 'str',
        'has_documents': 'bool',
        'has_parts': 'bool',
        'has_properties': 'bool',
        'id': 'str',
        'in_assembly': 'list[AssembledPartV]',
        'in_breakdown': 'list[BreakdownElementV]',
        'name': 'str',
        'part_type': 'str',
        'parts': 'list[AssembledPartV]',
        'properties': 'list[SimpleProperty]',
        'prt_id': 'int',
        'stage': 'str',
        'template_id': 'int',
        'used_in_assemblies': 'bool',
        'used_in_breakdowns': 'bool',
        'ver': 'str',
        'version_id': 'int',
        'view_id': 'int'
    }

    attribute_map = {
        'created': 'created',
        'created_by': 'created_by',
        'description': 'description',
        'documents': 'documents',
        'domain': 'domain',
        'has_documents': 'has_documents',
        'has_parts': 'has_parts',
        'has_properties': 'has_properties',
        'id': 'id',
        'in_assembly': 'in_assembly',
        'in_breakdown': 'in_breakdown',
        'name': 'name',
        'part_type': 'part_type',
        'parts': 'parts',
        'properties': 'properties',
        'prt_id': 'prt_id',
        'stage': 'stage',
        'template_id': 'template_id',
        'used_in_assemblies': 'used_in_assemblies',
        'used_in_breakdowns': 'used_in_breakdowns',
        'ver': 'ver',
        'version_id': 'version_id',
        'view_id': 'view_id'
    }

    def __init__(self, created=None, created_by=None, description=None, documents=None, domain=None, has_documents=None, has_parts=None, has_properties=None, id=None, in_assembly=None, in_breakdown=None, name=None, part_type=None, parts=None, properties=None, prt_id=None, stage=None, template_id=None, used_in_assemblies=None, used_in_breakdowns=None, ver=None, version_id=None, view_id=None):  # noqa: E501
        """RepresentingPartV - a model defined in Swagger"""  # noqa: E501
        self._created = None
        self._created_by = None
        self._description = None
        self._documents = None
        self._domain = None
        self._has_documents = None
        self._has_parts = None
        self._has_properties = None
        self._id = None
        self._in_assembly = None
        self._in_breakdown = None
        self._name = None
        self._part_type = None
        self._parts = None
        self._properties = None
        self._prt_id = None
        self._stage = None
        self._template_id = None
        self._used_in_assemblies = None
        self._used_in_breakdowns = None
        self._ver = None
        self._version_id = None
        self._view_id = None
        self.discriminator = None
        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if description is not None:
            self.description = description
        if documents is not None:
            self.documents = documents
        if domain is not None:
            self.domain = domain
        if has_documents is not None:
            self.has_documents = has_documents
        if has_parts is not None:
            self.has_parts = has_parts
        if has_properties is not None:
            self.has_properties = has_properties
        if id is not None:
            self.id = id
        if in_assembly is not None:
            self.in_assembly = in_assembly
        if in_breakdown is not None:
            self.in_breakdown = in_breakdown
        if name is not None:
            self.name = name
        if part_type is not None:
            self.part_type = part_type
        if parts is not None:
            self.parts = parts
        if properties is not None:
            self.properties = properties
        if prt_id is not None:
            self.prt_id = prt_id
        if stage is not None:
            self.stage = stage
        if template_id is not None:
            self.template_id = template_id
        if used_in_assemblies is not None:
            self.used_in_assemblies = used_in_assemblies
        if used_in_breakdowns is not None:
            self.used_in_breakdowns = used_in_breakdowns
        if ver is not None:
            self.ver = ver
        if version_id is not None:
            self.version_id = version_id
        if view_id is not None:
            self.view_id = view_id

    @property
    def created(self):
        """Gets the created of this RepresentingPartV.  # noqa: E501


        :return: The created of this RepresentingPartV.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RepresentingPartV.


        :param created: The created of this RepresentingPartV.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this RepresentingPartV.  # noqa: E501


        :return: The created_by of this RepresentingPartV.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this RepresentingPartV.


        :param created_by: The created_by of this RepresentingPartV.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def description(self):
        """Gets the description of this RepresentingPartV.  # noqa: E501


        :return: The description of this RepresentingPartV.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RepresentingPartV.


        :param description: The description of this RepresentingPartV.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def documents(self):
        """Gets the documents of this RepresentingPartV.  # noqa: E501


        :return: The documents of this RepresentingPartV.  # noqa: E501
        :rtype: list[DocumentV]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this RepresentingPartV.


        :param documents: The documents of this RepresentingPartV.  # noqa: E501
        :type: list[DocumentV]
        """

        self._documents = documents

    @property
    def domain(self):
        """Gets the domain of this RepresentingPartV.  # noqa: E501


        :return: The domain of this RepresentingPartV.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this RepresentingPartV.


        :param domain: The domain of this RepresentingPartV.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def has_documents(self):
        """Gets the has_documents of this RepresentingPartV.  # noqa: E501


        :return: The has_documents of this RepresentingPartV.  # noqa: E501
        :rtype: bool
        """
        return self._has_documents

    @has_documents.setter
    def has_documents(self, has_documents):
        """Sets the has_documents of this RepresentingPartV.


        :param has_documents: The has_documents of this RepresentingPartV.  # noqa: E501
        :type: bool
        """

        self._has_documents = has_documents

    @property
    def has_parts(self):
        """Gets the has_parts of this RepresentingPartV.  # noqa: E501


        :return: The has_parts of this RepresentingPartV.  # noqa: E501
        :rtype: bool
        """
        return self._has_parts

    @has_parts.setter
    def has_parts(self, has_parts):
        """Sets the has_parts of this RepresentingPartV.


        :param has_parts: The has_parts of this RepresentingPartV.  # noqa: E501
        :type: bool
        """

        self._has_parts = has_parts

    @property
    def has_properties(self):
        """Gets the has_properties of this RepresentingPartV.  # noqa: E501


        :return: The has_properties of this RepresentingPartV.  # noqa: E501
        :rtype: bool
        """
        return self._has_properties

    @has_properties.setter
    def has_properties(self, has_properties):
        """Sets the has_properties of this RepresentingPartV.


        :param has_properties: The has_properties of this RepresentingPartV.  # noqa: E501
        :type: bool
        """

        self._has_properties = has_properties

    @property
    def id(self):
        """Gets the id of this RepresentingPartV.  # noqa: E501


        :return: The id of this RepresentingPartV.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepresentingPartV.


        :param id: The id of this RepresentingPartV.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def in_assembly(self):
        """Gets the in_assembly of this RepresentingPartV.  # noqa: E501


        :return: The in_assembly of this RepresentingPartV.  # noqa: E501
        :rtype: list[AssembledPartV]
        """
        return self._in_assembly

    @in_assembly.setter
    def in_assembly(self, in_assembly):
        """Sets the in_assembly of this RepresentingPartV.


        :param in_assembly: The in_assembly of this RepresentingPartV.  # noqa: E501
        :type: list[AssembledPartV]
        """

        self._in_assembly = in_assembly

    @property
    def in_breakdown(self):
        """Gets the in_breakdown of this RepresentingPartV.  # noqa: E501


        :return: The in_breakdown of this RepresentingPartV.  # noqa: E501
        :rtype: list[BreakdownElementV]
        """
        return self._in_breakdown

    @in_breakdown.setter
    def in_breakdown(self, in_breakdown):
        """Sets the in_breakdown of this RepresentingPartV.


        :param in_breakdown: The in_breakdown of this RepresentingPartV.  # noqa: E501
        :type: list[BreakdownElementV]
        """

        self._in_breakdown = in_breakdown

    @property
    def name(self):
        """Gets the name of this RepresentingPartV.  # noqa: E501


        :return: The name of this RepresentingPartV.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepresentingPartV.


        :param name: The name of this RepresentingPartV.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def part_type(self):
        """Gets the part_type of this RepresentingPartV.  # noqa: E501


        :return: The part_type of this RepresentingPartV.  # noqa: E501
        :rtype: str
        """
        return self._part_type

    @part_type.setter
    def part_type(self, part_type):
        """Sets the part_type of this RepresentingPartV.


        :param part_type: The part_type of this RepresentingPartV.  # noqa: E501
        :type: str
        """

        self._part_type = part_type

    @property
    def parts(self):
        """Gets the parts of this RepresentingPartV.  # noqa: E501


        :return: The parts of this RepresentingPartV.  # noqa: E501
        :rtype: list[AssembledPartV]
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this RepresentingPartV.


        :param parts: The parts of this RepresentingPartV.  # noqa: E501
        :type: list[AssembledPartV]
        """

        self._parts = parts

    @property
    def properties(self):
        """Gets the properties of this RepresentingPartV.  # noqa: E501


        :return: The properties of this RepresentingPartV.  # noqa: E501
        :rtype: list[SimpleProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this RepresentingPartV.


        :param properties: The properties of this RepresentingPartV.  # noqa: E501
        :type: list[SimpleProperty]
        """

        self._properties = properties

    @property
    def prt_id(self):
        """Gets the prt_id of this RepresentingPartV.  # noqa: E501


        :return: The prt_id of this RepresentingPartV.  # noqa: E501
        :rtype: int
        """
        return self._prt_id

    @prt_id.setter
    def prt_id(self, prt_id):
        """Sets the prt_id of this RepresentingPartV.


        :param prt_id: The prt_id of this RepresentingPartV.  # noqa: E501
        :type: int
        """

        self._prt_id = prt_id

    @property
    def stage(self):
        """Gets the stage of this RepresentingPartV.  # noqa: E501


        :return: The stage of this RepresentingPartV.  # noqa: E501
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this RepresentingPartV.


        :param stage: The stage of this RepresentingPartV.  # noqa: E501
        :type: str
        """

        self._stage = stage

    @property
    def template_id(self):
        """Gets the template_id of this RepresentingPartV.  # noqa: E501


        :return: The template_id of this RepresentingPartV.  # noqa: E501
        :rtype: int
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this RepresentingPartV.


        :param template_id: The template_id of this RepresentingPartV.  # noqa: E501
        :type: int
        """

        self._template_id = template_id

    @property
    def used_in_assemblies(self):
        """Gets the used_in_assemblies of this RepresentingPartV.  # noqa: E501


        :return: The used_in_assemblies of this RepresentingPartV.  # noqa: E501
        :rtype: bool
        """
        return self._used_in_assemblies

    @used_in_assemblies.setter
    def used_in_assemblies(self, used_in_assemblies):
        """Sets the used_in_assemblies of this RepresentingPartV.


        :param used_in_assemblies: The used_in_assemblies of this RepresentingPartV.  # noqa: E501
        :type: bool
        """

        self._used_in_assemblies = used_in_assemblies

    @property
    def used_in_breakdowns(self):
        """Gets the used_in_breakdowns of this RepresentingPartV.  # noqa: E501


        :return: The used_in_breakdowns of this RepresentingPartV.  # noqa: E501
        :rtype: bool
        """
        return self._used_in_breakdowns

    @used_in_breakdowns.setter
    def used_in_breakdowns(self, used_in_breakdowns):
        """Sets the used_in_breakdowns of this RepresentingPartV.


        :param used_in_breakdowns: The used_in_breakdowns of this RepresentingPartV.  # noqa: E501
        :type: bool
        """

        self._used_in_breakdowns = used_in_breakdowns

    @property
    def ver(self):
        """Gets the ver of this RepresentingPartV.  # noqa: E501


        :return: The ver of this RepresentingPartV.  # noqa: E501
        :rtype: str
        """
        return self._ver

    @ver.setter
    def ver(self, ver):
        """Sets the ver of this RepresentingPartV.


        :param ver: The ver of this RepresentingPartV.  # noqa: E501
        :type: str
        """

        self._ver = ver

    @property
    def version_id(self):
        """Gets the version_id of this RepresentingPartV.  # noqa: E501


        :return: The version_id of this RepresentingPartV.  # noqa: E501
        :rtype: int
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this RepresentingPartV.


        :param version_id: The version_id of this RepresentingPartV.  # noqa: E501
        :type: int
        """

        self._version_id = version_id

    @property
    def view_id(self):
        """Gets the view_id of this RepresentingPartV.  # noqa: E501


        :return: The view_id of this RepresentingPartV.  # noqa: E501
        :rtype: int
        """
        return self._view_id

    @view_id.setter
    def view_id(self, view_id):
        """Sets the view_id of this RepresentingPartV.


        :param view_id: The view_id of this RepresentingPartV.  # noqa: E501
        :type: int
        """

        self._view_id = view_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepresentingPartV, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepresentingPartV):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
