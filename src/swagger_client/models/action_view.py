# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActionView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'str',
        'id': 'int',
        'message': 'str',
        'name': 'str',
        'subdomain': 'SubdomainInfo',
        'subj': 'str',
        'targets': 'list[TargetView]'
    }

    attribute_map = {
        'action_type': 'action_type',
        'id': 'id',
        'message': 'message',
        'name': 'name',
        'subdomain': 'subdomain',
        'subj': 'subj',
        'targets': 'targets'
    }

    def __init__(self, action_type=None, id=None, message=None, name=None, subdomain=None, subj=None, targets=None):  # noqa: E501
        """ActionView - a model defined in Swagger"""  # noqa: E501
        self._action_type = None
        self._id = None
        self._message = None
        self._name = None
        self._subdomain = None
        self._subj = None
        self._targets = None
        self.discriminator = None
        if action_type is not None:
            self.action_type = action_type
        if id is not None:
            self.id = id
        if message is not None:
            self.message = message
        if name is not None:
            self.name = name
        if subdomain is not None:
            self.subdomain = subdomain
        if subj is not None:
            self.subj = subj
        if targets is not None:
            self.targets = targets

    @property
    def action_type(self):
        """Gets the action_type of this ActionView.  # noqa: E501


        :return: The action_type of this ActionView.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this ActionView.


        :param action_type: The action_type of this ActionView.  # noqa: E501
        :type: str
        """

        self._action_type = action_type

    @property
    def id(self):
        """Gets the id of this ActionView.  # noqa: E501


        :return: The id of this ActionView.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActionView.


        :param id: The id of this ActionView.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def message(self):
        """Gets the message of this ActionView.  # noqa: E501


        :return: The message of this ActionView.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ActionView.


        :param message: The message of this ActionView.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this ActionView.  # noqa: E501


        :return: The name of this ActionView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActionView.


        :param name: The name of this ActionView.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def subdomain(self):
        """Gets the subdomain of this ActionView.  # noqa: E501


        :return: The subdomain of this ActionView.  # noqa: E501
        :rtype: SubdomainInfo
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this ActionView.


        :param subdomain: The subdomain of this ActionView.  # noqa: E501
        :type: SubdomainInfo
        """

        self._subdomain = subdomain

    @property
    def subj(self):
        """Gets the subj of this ActionView.  # noqa: E501


        :return: The subj of this ActionView.  # noqa: E501
        :rtype: str
        """
        return self._subj

    @subj.setter
    def subj(self, subj):
        """Sets the subj of this ActionView.


        :param subj: The subj of this ActionView.  # noqa: E501
        :type: str
        """

        self._subj = subj

    @property
    def targets(self):
        """Gets the targets of this ActionView.  # noqa: E501


        :return: The targets of this ActionView.  # noqa: E501
        :rtype: list[TargetView]
        """
        return self._targets

    @targets.setter
    def targets(self, targets):
        """Sets the targets of this ActionView.


        :param targets: The targets of this ActionView.  # noqa: E501
        :type: list[TargetView]
        """

        self._targets = targets

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
