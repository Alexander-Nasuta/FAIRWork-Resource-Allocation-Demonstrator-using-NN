# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PermissionsInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'can_i_delete': 'bool',
        'can_i_read': 'bool',
        'can_i_write': 'bool',
        'permissions_delete': 'list[str]',
        'permissions_read': 'list[str]',
        'permissions_write': 'list[str]'
    }

    attribute_map = {
        'can_i_delete': 'can_i_delete',
        'can_i_read': 'can_i_read',
        'can_i_write': 'can_i_write',
        'permissions_delete': 'permissions_delete',
        'permissions_read': 'permissions_read',
        'permissions_write': 'permissions_write'
    }

    def __init__(self, can_i_delete=None, can_i_read=None, can_i_write=None, permissions_delete=None, permissions_read=None, permissions_write=None):  # noqa: E501
        """PermissionsInfo - a model defined in Swagger"""  # noqa: E501
        self._can_i_delete = None
        self._can_i_read = None
        self._can_i_write = None
        self._permissions_delete = None
        self._permissions_read = None
        self._permissions_write = None
        self.discriminator = None
        if can_i_delete is not None:
            self.can_i_delete = can_i_delete
        if can_i_read is not None:
            self.can_i_read = can_i_read
        if can_i_write is not None:
            self.can_i_write = can_i_write
        if permissions_delete is not None:
            self.permissions_delete = permissions_delete
        if permissions_read is not None:
            self.permissions_read = permissions_read
        if permissions_write is not None:
            self.permissions_write = permissions_write

    @property
    def can_i_delete(self):
        """Gets the can_i_delete of this PermissionsInfo.  # noqa: E501


        :return: The can_i_delete of this PermissionsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._can_i_delete

    @can_i_delete.setter
    def can_i_delete(self, can_i_delete):
        """Sets the can_i_delete of this PermissionsInfo.


        :param can_i_delete: The can_i_delete of this PermissionsInfo.  # noqa: E501
        :type: bool
        """

        self._can_i_delete = can_i_delete

    @property
    def can_i_read(self):
        """Gets the can_i_read of this PermissionsInfo.  # noqa: E501


        :return: The can_i_read of this PermissionsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._can_i_read

    @can_i_read.setter
    def can_i_read(self, can_i_read):
        """Sets the can_i_read of this PermissionsInfo.


        :param can_i_read: The can_i_read of this PermissionsInfo.  # noqa: E501
        :type: bool
        """

        self._can_i_read = can_i_read

    @property
    def can_i_write(self):
        """Gets the can_i_write of this PermissionsInfo.  # noqa: E501


        :return: The can_i_write of this PermissionsInfo.  # noqa: E501
        :rtype: bool
        """
        return self._can_i_write

    @can_i_write.setter
    def can_i_write(self, can_i_write):
        """Sets the can_i_write of this PermissionsInfo.


        :param can_i_write: The can_i_write of this PermissionsInfo.  # noqa: E501
        :type: bool
        """

        self._can_i_write = can_i_write

    @property
    def permissions_delete(self):
        """Gets the permissions_delete of this PermissionsInfo.  # noqa: E501


        :return: The permissions_delete of this PermissionsInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions_delete

    @permissions_delete.setter
    def permissions_delete(self, permissions_delete):
        """Sets the permissions_delete of this PermissionsInfo.


        :param permissions_delete: The permissions_delete of this PermissionsInfo.  # noqa: E501
        :type: list[str]
        """

        self._permissions_delete = permissions_delete

    @property
    def permissions_read(self):
        """Gets the permissions_read of this PermissionsInfo.  # noqa: E501


        :return: The permissions_read of this PermissionsInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions_read

    @permissions_read.setter
    def permissions_read(self, permissions_read):
        """Sets the permissions_read of this PermissionsInfo.


        :param permissions_read: The permissions_read of this PermissionsInfo.  # noqa: E501
        :type: list[str]
        """

        self._permissions_read = permissions_read

    @property
    def permissions_write(self):
        """Gets the permissions_write of this PermissionsInfo.  # noqa: E501


        :return: The permissions_write of this PermissionsInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._permissions_write

    @permissions_write.setter
    def permissions_write(self, permissions_write):
        """Sets the permissions_write of this PermissionsInfo.


        :param permissions_write: The permissions_write of this PermissionsInfo.  # noqa: E501
        :type: list[str]
        """

        self._permissions_write = permissions_write

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PermissionsInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PermissionsInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
