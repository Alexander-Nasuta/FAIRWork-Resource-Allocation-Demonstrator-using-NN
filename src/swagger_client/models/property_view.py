# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PropertyView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigned_to': 'str',
        'description': 'str',
        'domains': 'list[str]',
        'editable': 'bool',
        'editable_for': 'list[str]',
        'expression': 'str',
        'name': 'str',
        'optional_flag': 'bool',
        'options': 'list[str]',
        'super_types': 'list[str]',
        'units': 'list[str]',
        'urn': 'str'
    }

    attribute_map = {
        'assigned_to': 'assigned_to',
        'description': 'description',
        'domains': 'domains',
        'editable': 'editable',
        'editable_for': 'editable_for',
        'expression': 'expression',
        'name': 'name',
        'optional_flag': 'optional_flag',
        'options': 'options',
        'super_types': 'super_types',
        'units': 'units',
        'urn': 'urn'
    }

    def __init__(self, assigned_to=None, description=None, domains=None, editable=None, editable_for=None, expression=None, name=None, optional_flag=None, options=None, super_types=None, units=None, urn=None):  # noqa: E501
        """PropertyView - a model defined in Swagger"""  # noqa: E501
        self._assigned_to = None
        self._description = None
        self._domains = None
        self._editable = None
        self._editable_for = None
        self._expression = None
        self._name = None
        self._optional_flag = None
        self._options = None
        self._super_types = None
        self._units = None
        self._urn = None
        self.discriminator = None
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if description is not None:
            self.description = description
        if domains is not None:
            self.domains = domains
        if editable is not None:
            self.editable = editable
        if editable_for is not None:
            self.editable_for = editable_for
        if expression is not None:
            self.expression = expression
        if name is not None:
            self.name = name
        if optional_flag is not None:
            self.optional_flag = optional_flag
        if options is not None:
            self.options = options
        if super_types is not None:
            self.super_types = super_types
        if units is not None:
            self.units = units
        if urn is not None:
            self.urn = urn

    @property
    def assigned_to(self):
        """Gets the assigned_to of this PropertyView.  # noqa: E501


        :return: The assigned_to of this PropertyView.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this PropertyView.


        :param assigned_to: The assigned_to of this PropertyView.  # noqa: E501
        :type: str
        """

        self._assigned_to = assigned_to

    @property
    def description(self):
        """Gets the description of this PropertyView.  # noqa: E501


        :return: The description of this PropertyView.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PropertyView.


        :param description: The description of this PropertyView.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def domains(self):
        """Gets the domains of this PropertyView.  # noqa: E501


        :return: The domains of this PropertyView.  # noqa: E501
        :rtype: list[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this PropertyView.


        :param domains: The domains of this PropertyView.  # noqa: E501
        :type: list[str]
        """

        self._domains = domains

    @property
    def editable(self):
        """Gets the editable of this PropertyView.  # noqa: E501


        :return: The editable of this PropertyView.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this PropertyView.


        :param editable: The editable of this PropertyView.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def editable_for(self):
        """Gets the editable_for of this PropertyView.  # noqa: E501


        :return: The editable_for of this PropertyView.  # noqa: E501
        :rtype: list[str]
        """
        return self._editable_for

    @editable_for.setter
    def editable_for(self, editable_for):
        """Sets the editable_for of this PropertyView.


        :param editable_for: The editable_for of this PropertyView.  # noqa: E501
        :type: list[str]
        """

        self._editable_for = editable_for

    @property
    def expression(self):
        """Gets the expression of this PropertyView.  # noqa: E501


        :return: The expression of this PropertyView.  # noqa: E501
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this PropertyView.


        :param expression: The expression of this PropertyView.  # noqa: E501
        :type: str
        """

        self._expression = expression

    @property
    def name(self):
        """Gets the name of this PropertyView.  # noqa: E501


        :return: The name of this PropertyView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PropertyView.


        :param name: The name of this PropertyView.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def optional_flag(self):
        """Gets the optional_flag of this PropertyView.  # noqa: E501


        :return: The optional_flag of this PropertyView.  # noqa: E501
        :rtype: bool
        """
        return self._optional_flag

    @optional_flag.setter
    def optional_flag(self, optional_flag):
        """Sets the optional_flag of this PropertyView.


        :param optional_flag: The optional_flag of this PropertyView.  # noqa: E501
        :type: bool
        """

        self._optional_flag = optional_flag

    @property
    def options(self):
        """Gets the options of this PropertyView.  # noqa: E501


        :return: The options of this PropertyView.  # noqa: E501
        :rtype: list[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this PropertyView.


        :param options: The options of this PropertyView.  # noqa: E501
        :type: list[str]
        """

        self._options = options

    @property
    def super_types(self):
        """Gets the super_types of this PropertyView.  # noqa: E501


        :return: The super_types of this PropertyView.  # noqa: E501
        :rtype: list[str]
        """
        return self._super_types

    @super_types.setter
    def super_types(self, super_types):
        """Sets the super_types of this PropertyView.


        :param super_types: The super_types of this PropertyView.  # noqa: E501
        :type: list[str]
        """

        self._super_types = super_types

    @property
    def units(self):
        """Gets the units of this PropertyView.  # noqa: E501


        :return: The units of this PropertyView.  # noqa: E501
        :rtype: list[str]
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this PropertyView.


        :param units: The units of this PropertyView.  # noqa: E501
        :type: list[str]
        """

        self._units = units

    @property
    def urn(self):
        """Gets the urn of this PropertyView.  # noqa: E501


        :return: The urn of this PropertyView.  # noqa: E501
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this PropertyView.


        :param urn: The urn of this PropertyView.  # noqa: E501
        :type: str
        """

        self._urn = urn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PropertyView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyView):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
