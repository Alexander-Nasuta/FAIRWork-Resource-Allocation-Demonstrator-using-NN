# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrgV(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'description': 'str',
        'email': 'str',
        'invalid_from': 'str',
        'org_id': 'int',
        'phone': 'str',
        'registered': 'str',
        'roles': 'str',
        'title': 'str',
        'uid': 'str',
        'url': 'str'
    }

    attribute_map = {
        'address': 'address',
        'description': 'description',
        'email': 'email',
        'invalid_from': 'invalid_from',
        'org_id': 'org_id',
        'phone': 'phone',
        'registered': 'registered',
        'roles': 'roles',
        'title': 'title',
        'uid': 'uid',
        'url': 'url'
    }

    def __init__(self, address=None, description=None, email=None, invalid_from=None, org_id=None, phone=None, registered=None, roles=None, title=None, uid=None, url=None):  # noqa: E501
        """OrgV - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._description = None
        self._email = None
        self._invalid_from = None
        self._org_id = None
        self._phone = None
        self._registered = None
        self._roles = None
        self._title = None
        self._uid = None
        self._url = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if description is not None:
            self.description = description
        if email is not None:
            self.email = email
        if invalid_from is not None:
            self.invalid_from = invalid_from
        if org_id is not None:
            self.org_id = org_id
        if phone is not None:
            self.phone = phone
        if registered is not None:
            self.registered = registered
        if roles is not None:
            self.roles = roles
        if title is not None:
            self.title = title
        if uid is not None:
            self.uid = uid
        if url is not None:
            self.url = url

    @property
    def address(self):
        """Gets the address of this OrgV.  # noqa: E501


        :return: The address of this OrgV.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this OrgV.


        :param address: The address of this OrgV.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def description(self):
        """Gets the description of this OrgV.  # noqa: E501


        :return: The description of this OrgV.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrgV.


        :param description: The description of this OrgV.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def email(self):
        """Gets the email of this OrgV.  # noqa: E501


        :return: The email of this OrgV.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this OrgV.


        :param email: The email of this OrgV.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def invalid_from(self):
        """Gets the invalid_from of this OrgV.  # noqa: E501


        :return: The invalid_from of this OrgV.  # noqa: E501
        :rtype: str
        """
        return self._invalid_from

    @invalid_from.setter
    def invalid_from(self, invalid_from):
        """Sets the invalid_from of this OrgV.


        :param invalid_from: The invalid_from of this OrgV.  # noqa: E501
        :type: str
        """

        self._invalid_from = invalid_from

    @property
    def org_id(self):
        """Gets the org_id of this OrgV.  # noqa: E501


        :return: The org_id of this OrgV.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this OrgV.


        :param org_id: The org_id of this OrgV.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def phone(self):
        """Gets the phone of this OrgV.  # noqa: E501


        :return: The phone of this OrgV.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this OrgV.


        :param phone: The phone of this OrgV.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def registered(self):
        """Gets the registered of this OrgV.  # noqa: E501


        :return: The registered of this OrgV.  # noqa: E501
        :rtype: str
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this OrgV.


        :param registered: The registered of this OrgV.  # noqa: E501
        :type: str
        """

        self._registered = registered

    @property
    def roles(self):
        """Gets the roles of this OrgV.  # noqa: E501


        :return: The roles of this OrgV.  # noqa: E501
        :rtype: str
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this OrgV.


        :param roles: The roles of this OrgV.  # noqa: E501
        :type: str
        """

        self._roles = roles

    @property
    def title(self):
        """Gets the title of this OrgV.  # noqa: E501


        :return: The title of this OrgV.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OrgV.


        :param title: The title of this OrgV.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def uid(self):
        """Gets the uid of this OrgV.  # noqa: E501


        :return: The uid of this OrgV.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this OrgV.


        :param uid: The uid of this OrgV.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def url(self):
        """Gets the url of this OrgV.  # noqa: E501


        :return: The url of this OrgV.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this OrgV.


        :param url: The url of this OrgV.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgV, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgV):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
