# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AggregatedProperty(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'columns': 'list[ColumnInfo]',
        'page_number': 'int',
        'page_size': 'int',
        'rows': 'int',
        'urn': 'str',
        'values': 'list[str]'
    }

    attribute_map = {
        'columns': 'columns',
        'page_number': 'page_number',
        'page_size': 'page_size',
        'rows': 'rows',
        'urn': 'urn',
        'values': 'values'
    }

    def __init__(self, columns=None, page_number=None, page_size=None, rows=None, urn=None, values=None):  # noqa: E501
        """AggregatedProperty - a model defined in Swagger"""  # noqa: E501
        self._columns = None
        self._page_number = None
        self._page_size = None
        self._rows = None
        self._urn = None
        self._values = None
        self.discriminator = None
        if columns is not None:
            self.columns = columns
        if page_number is not None:
            self.page_number = page_number
        if page_size is not None:
            self.page_size = page_size
        if rows is not None:
            self.rows = rows
        if urn is not None:
            self.urn = urn
        if values is not None:
            self.values = values

    @property
    def columns(self):
        """Gets the columns of this AggregatedProperty.  # noqa: E501


        :return: The columns of this AggregatedProperty.  # noqa: E501
        :rtype: list[ColumnInfo]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this AggregatedProperty.


        :param columns: The columns of this AggregatedProperty.  # noqa: E501
        :type: list[ColumnInfo]
        """

        self._columns = columns

    @property
    def page_number(self):
        """Gets the page_number of this AggregatedProperty.  # noqa: E501


        :return: The page_number of this AggregatedProperty.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this AggregatedProperty.


        :param page_number: The page_number of this AggregatedProperty.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    @property
    def page_size(self):
        """Gets the page_size of this AggregatedProperty.  # noqa: E501


        :return: The page_size of this AggregatedProperty.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this AggregatedProperty.


        :param page_size: The page_size of this AggregatedProperty.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def rows(self):
        """Gets the rows of this AggregatedProperty.  # noqa: E501


        :return: The rows of this AggregatedProperty.  # noqa: E501
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this AggregatedProperty.


        :param rows: The rows of this AggregatedProperty.  # noqa: E501
        :type: int
        """

        self._rows = rows

    @property
    def urn(self):
        """Gets the urn of this AggregatedProperty.  # noqa: E501


        :return: The urn of this AggregatedProperty.  # noqa: E501
        :rtype: str
        """
        return self._urn

    @urn.setter
    def urn(self, urn):
        """Sets the urn of this AggregatedProperty.


        :param urn: The urn of this AggregatedProperty.  # noqa: E501
        :type: str
        """

        self._urn = urn

    @property
    def values(self):
        """Gets the values of this AggregatedProperty.  # noqa: E501


        :return: The values of this AggregatedProperty.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this AggregatedProperty.


        :param values: The values of this AggregatedProperty.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AggregatedProperty, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggregatedProperty):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
