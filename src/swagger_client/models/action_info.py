# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActionInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_list_name': 'str',
        'action_list_set_by': 'UserInfo',
        'action_list_uuid': 'str',
        'date_completed': 'int',
        'deadline': 'int',
        'description': 'str',
        'on_objects': 'list[DataPackageItemInfo]',
        'responsibles': 'list[UserInfo]',
        'rid_references': 'str',
        'set_by': 'UserInfo',
        'status': 'str',
        'uuid': 'str'
    }

    attribute_map = {
        'action_list_name': 'action_list_name',
        'action_list_set_by': 'action_list_set_by',
        'action_list_uuid': 'action_list_uuid',
        'date_completed': 'date_completed',
        'deadline': 'deadline',
        'description': 'description',
        'on_objects': 'on_objects',
        'responsibles': 'responsibles',
        'rid_references': 'rid_references',
        'set_by': 'set_by',
        'status': 'status',
        'uuid': 'uuid'
    }

    def __init__(self, action_list_name=None, action_list_set_by=None, action_list_uuid=None, date_completed=None, deadline=None, description=None, on_objects=None, responsibles=None, rid_references=None, set_by=None, status=None, uuid=None):  # noqa: E501
        """ActionInfo - a model defined in Swagger"""  # noqa: E501
        self._action_list_name = None
        self._action_list_set_by = None
        self._action_list_uuid = None
        self._date_completed = None
        self._deadline = None
        self._description = None
        self._on_objects = None
        self._responsibles = None
        self._rid_references = None
        self._set_by = None
        self._status = None
        self._uuid = None
        self.discriminator = None
        if action_list_name is not None:
            self.action_list_name = action_list_name
        if action_list_set_by is not None:
            self.action_list_set_by = action_list_set_by
        if action_list_uuid is not None:
            self.action_list_uuid = action_list_uuid
        if date_completed is not None:
            self.date_completed = date_completed
        if deadline is not None:
            self.deadline = deadline
        if description is not None:
            self.description = description
        if on_objects is not None:
            self.on_objects = on_objects
        if responsibles is not None:
            self.responsibles = responsibles
        if rid_references is not None:
            self.rid_references = rid_references
        if set_by is not None:
            self.set_by = set_by
        if status is not None:
            self.status = status
        if uuid is not None:
            self.uuid = uuid

    @property
    def action_list_name(self):
        """Gets the action_list_name of this ActionInfo.  # noqa: E501


        :return: The action_list_name of this ActionInfo.  # noqa: E501
        :rtype: str
        """
        return self._action_list_name

    @action_list_name.setter
    def action_list_name(self, action_list_name):
        """Sets the action_list_name of this ActionInfo.


        :param action_list_name: The action_list_name of this ActionInfo.  # noqa: E501
        :type: str
        """

        self._action_list_name = action_list_name

    @property
    def action_list_set_by(self):
        """Gets the action_list_set_by of this ActionInfo.  # noqa: E501


        :return: The action_list_set_by of this ActionInfo.  # noqa: E501
        :rtype: UserInfo
        """
        return self._action_list_set_by

    @action_list_set_by.setter
    def action_list_set_by(self, action_list_set_by):
        """Sets the action_list_set_by of this ActionInfo.


        :param action_list_set_by: The action_list_set_by of this ActionInfo.  # noqa: E501
        :type: UserInfo
        """

        self._action_list_set_by = action_list_set_by

    @property
    def action_list_uuid(self):
        """Gets the action_list_uuid of this ActionInfo.  # noqa: E501


        :return: The action_list_uuid of this ActionInfo.  # noqa: E501
        :rtype: str
        """
        return self._action_list_uuid

    @action_list_uuid.setter
    def action_list_uuid(self, action_list_uuid):
        """Sets the action_list_uuid of this ActionInfo.


        :param action_list_uuid: The action_list_uuid of this ActionInfo.  # noqa: E501
        :type: str
        """

        self._action_list_uuid = action_list_uuid

    @property
    def date_completed(self):
        """Gets the date_completed of this ActionInfo.  # noqa: E501


        :return: The date_completed of this ActionInfo.  # noqa: E501
        :rtype: int
        """
        return self._date_completed

    @date_completed.setter
    def date_completed(self, date_completed):
        """Sets the date_completed of this ActionInfo.


        :param date_completed: The date_completed of this ActionInfo.  # noqa: E501
        :type: int
        """

        self._date_completed = date_completed

    @property
    def deadline(self):
        """Gets the deadline of this ActionInfo.  # noqa: E501


        :return: The deadline of this ActionInfo.  # noqa: E501
        :rtype: int
        """
        return self._deadline

    @deadline.setter
    def deadline(self, deadline):
        """Sets the deadline of this ActionInfo.


        :param deadline: The deadline of this ActionInfo.  # noqa: E501
        :type: int
        """

        self._deadline = deadline

    @property
    def description(self):
        """Gets the description of this ActionInfo.  # noqa: E501


        :return: The description of this ActionInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActionInfo.


        :param description: The description of this ActionInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def on_objects(self):
        """Gets the on_objects of this ActionInfo.  # noqa: E501


        :return: The on_objects of this ActionInfo.  # noqa: E501
        :rtype: list[DataPackageItemInfo]
        """
        return self._on_objects

    @on_objects.setter
    def on_objects(self, on_objects):
        """Sets the on_objects of this ActionInfo.


        :param on_objects: The on_objects of this ActionInfo.  # noqa: E501
        :type: list[DataPackageItemInfo]
        """

        self._on_objects = on_objects

    @property
    def responsibles(self):
        """Gets the responsibles of this ActionInfo.  # noqa: E501


        :return: The responsibles of this ActionInfo.  # noqa: E501
        :rtype: list[UserInfo]
        """
        return self._responsibles

    @responsibles.setter
    def responsibles(self, responsibles):
        """Sets the responsibles of this ActionInfo.


        :param responsibles: The responsibles of this ActionInfo.  # noqa: E501
        :type: list[UserInfo]
        """

        self._responsibles = responsibles

    @property
    def rid_references(self):
        """Gets the rid_references of this ActionInfo.  # noqa: E501


        :return: The rid_references of this ActionInfo.  # noqa: E501
        :rtype: str
        """
        return self._rid_references

    @rid_references.setter
    def rid_references(self, rid_references):
        """Sets the rid_references of this ActionInfo.


        :param rid_references: The rid_references of this ActionInfo.  # noqa: E501
        :type: str
        """

        self._rid_references = rid_references

    @property
    def set_by(self):
        """Gets the set_by of this ActionInfo.  # noqa: E501


        :return: The set_by of this ActionInfo.  # noqa: E501
        :rtype: UserInfo
        """
        return self._set_by

    @set_by.setter
    def set_by(self, set_by):
        """Sets the set_by of this ActionInfo.


        :param set_by: The set_by of this ActionInfo.  # noqa: E501
        :type: UserInfo
        """

        self._set_by = set_by

    @property
    def status(self):
        """Gets the status of this ActionInfo.  # noqa: E501


        :return: The status of this ActionInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ActionInfo.


        :param status: The status of this ActionInfo.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def uuid(self):
        """Gets the uuid of this ActionInfo.  # noqa: E501


        :return: The uuid of this ActionInfo.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ActionInfo.


        :param uuid: The uuid of this ActionInfo.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
