# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VGroupFolder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'children': 'list[VGroupFolder]',
        'name': 'str',
        'parent': 'VGroupFolder',
        'projects': 'list[ProjectInfo]',
        'user': 'str'
    }

    attribute_map = {
        'children': 'children',
        'name': 'name',
        'parent': 'parent',
        'projects': 'projects',
        'user': 'user'
    }

    def __init__(self, children=None, name=None, parent=None, projects=None, user=None):  # noqa: E501
        """VGroupFolder - a model defined in Swagger"""  # noqa: E501
        self._children = None
        self._name = None
        self._parent = None
        self._projects = None
        self._user = None
        self.discriminator = None
        if children is not None:
            self.children = children
        if name is not None:
            self.name = name
        if parent is not None:
            self.parent = parent
        if projects is not None:
            self.projects = projects
        if user is not None:
            self.user = user

    @property
    def children(self):
        """Gets the children of this VGroupFolder.  # noqa: E501


        :return: The children of this VGroupFolder.  # noqa: E501
        :rtype: list[VGroupFolder]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this VGroupFolder.


        :param children: The children of this VGroupFolder.  # noqa: E501
        :type: list[VGroupFolder]
        """

        self._children = children

    @property
    def name(self):
        """Gets the name of this VGroupFolder.  # noqa: E501


        :return: The name of this VGroupFolder.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VGroupFolder.


        :param name: The name of this VGroupFolder.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def parent(self):
        """Gets the parent of this VGroupFolder.  # noqa: E501


        :return: The parent of this VGroupFolder.  # noqa: E501
        :rtype: VGroupFolder
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this VGroupFolder.


        :param parent: The parent of this VGroupFolder.  # noqa: E501
        :type: VGroupFolder
        """

        self._parent = parent

    @property
    def projects(self):
        """Gets the projects of this VGroupFolder.  # noqa: E501


        :return: The projects of this VGroupFolder.  # noqa: E501
        :rtype: list[ProjectInfo]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this VGroupFolder.


        :param projects: The projects of this VGroupFolder.  # noqa: E501
        :type: list[ProjectInfo]
        """

        self._projects = projects

    @property
    def user(self):
        """Gets the user of this VGroupFolder.  # noqa: E501


        :return: The user of this VGroupFolder.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this VGroupFolder.


        :param user: The user of this VGroupFolder.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VGroupFolder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VGroupFolder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
