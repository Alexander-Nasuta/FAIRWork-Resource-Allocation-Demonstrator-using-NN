# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UsersRolesInfoPackage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_user_roles': 'list[str]',
        'available_users': 'list[UserInfo]'
    }

    attribute_map = {
        'available_user_roles': 'available_user_roles',
        'available_users': 'available_users'
    }

    def __init__(self, available_user_roles=None, available_users=None):  # noqa: E501
        """UsersRolesInfoPackage - a model defined in Swagger"""  # noqa: E501
        self._available_user_roles = None
        self._available_users = None
        self.discriminator = None
        if available_user_roles is not None:
            self.available_user_roles = available_user_roles
        if available_users is not None:
            self.available_users = available_users

    @property
    def available_user_roles(self):
        """Gets the available_user_roles of this UsersRolesInfoPackage.  # noqa: E501


        :return: The available_user_roles of this UsersRolesInfoPackage.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_user_roles

    @available_user_roles.setter
    def available_user_roles(self, available_user_roles):
        """Sets the available_user_roles of this UsersRolesInfoPackage.


        :param available_user_roles: The available_user_roles of this UsersRolesInfoPackage.  # noqa: E501
        :type: list[str]
        """

        self._available_user_roles = available_user_roles

    @property
    def available_users(self):
        """Gets the available_users of this UsersRolesInfoPackage.  # noqa: E501


        :return: The available_users of this UsersRolesInfoPackage.  # noqa: E501
        :rtype: list[UserInfo]
        """
        return self._available_users

    @available_users.setter
    def available_users(self, available_users):
        """Sets the available_users of this UsersRolesInfoPackage.


        :param available_users: The available_users of this UsersRolesInfoPackage.  # noqa: E501
        :type: list[UserInfo]
        """

        self._available_users = available_users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UsersRolesInfoPackage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersRolesInfoPackage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
