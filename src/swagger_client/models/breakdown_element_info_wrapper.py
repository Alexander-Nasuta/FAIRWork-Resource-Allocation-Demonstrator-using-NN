# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BreakdownElementInfoWrapper(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'err_code': 'int',
        'items': 'list[BreakdownElementInfo]',
        'updated_node_date': 'str',
        'updated_node_id': 'str',
        'updated_node_user': 'str',
        'updated_node_version': 'str'
    }

    attribute_map = {
        'err_code': 'err_code',
        'items': 'items',
        'updated_node_date': 'updated_node_date',
        'updated_node_id': 'updated_node_id',
        'updated_node_user': 'updated_node_user',
        'updated_node_version': 'updated_node_version'
    }

    def __init__(self, err_code=None, items=None, updated_node_date=None, updated_node_id=None, updated_node_user=None, updated_node_version=None):  # noqa: E501
        """BreakdownElementInfoWrapper - a model defined in Swagger"""  # noqa: E501
        self._err_code = None
        self._items = None
        self._updated_node_date = None
        self._updated_node_id = None
        self._updated_node_user = None
        self._updated_node_version = None
        self.discriminator = None
        if err_code is not None:
            self.err_code = err_code
        if items is not None:
            self.items = items
        if updated_node_date is not None:
            self.updated_node_date = updated_node_date
        if updated_node_id is not None:
            self.updated_node_id = updated_node_id
        if updated_node_user is not None:
            self.updated_node_user = updated_node_user
        if updated_node_version is not None:
            self.updated_node_version = updated_node_version

    @property
    def err_code(self):
        """Gets the err_code of this BreakdownElementInfoWrapper.  # noqa: E501


        :return: The err_code of this BreakdownElementInfoWrapper.  # noqa: E501
        :rtype: int
        """
        return self._err_code

    @err_code.setter
    def err_code(self, err_code):
        """Sets the err_code of this BreakdownElementInfoWrapper.


        :param err_code: The err_code of this BreakdownElementInfoWrapper.  # noqa: E501
        :type: int
        """

        self._err_code = err_code

    @property
    def items(self):
        """Gets the items of this BreakdownElementInfoWrapper.  # noqa: E501


        :return: The items of this BreakdownElementInfoWrapper.  # noqa: E501
        :rtype: list[BreakdownElementInfo]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this BreakdownElementInfoWrapper.


        :param items: The items of this BreakdownElementInfoWrapper.  # noqa: E501
        :type: list[BreakdownElementInfo]
        """

        self._items = items

    @property
    def updated_node_date(self):
        """Gets the updated_node_date of this BreakdownElementInfoWrapper.  # noqa: E501


        :return: The updated_node_date of this BreakdownElementInfoWrapper.  # noqa: E501
        :rtype: str
        """
        return self._updated_node_date

    @updated_node_date.setter
    def updated_node_date(self, updated_node_date):
        """Sets the updated_node_date of this BreakdownElementInfoWrapper.


        :param updated_node_date: The updated_node_date of this BreakdownElementInfoWrapper.  # noqa: E501
        :type: str
        """

        self._updated_node_date = updated_node_date

    @property
    def updated_node_id(self):
        """Gets the updated_node_id of this BreakdownElementInfoWrapper.  # noqa: E501


        :return: The updated_node_id of this BreakdownElementInfoWrapper.  # noqa: E501
        :rtype: str
        """
        return self._updated_node_id

    @updated_node_id.setter
    def updated_node_id(self, updated_node_id):
        """Sets the updated_node_id of this BreakdownElementInfoWrapper.


        :param updated_node_id: The updated_node_id of this BreakdownElementInfoWrapper.  # noqa: E501
        :type: str
        """

        self._updated_node_id = updated_node_id

    @property
    def updated_node_user(self):
        """Gets the updated_node_user of this BreakdownElementInfoWrapper.  # noqa: E501


        :return: The updated_node_user of this BreakdownElementInfoWrapper.  # noqa: E501
        :rtype: str
        """
        return self._updated_node_user

    @updated_node_user.setter
    def updated_node_user(self, updated_node_user):
        """Sets the updated_node_user of this BreakdownElementInfoWrapper.


        :param updated_node_user: The updated_node_user of this BreakdownElementInfoWrapper.  # noqa: E501
        :type: str
        """

        self._updated_node_user = updated_node_user

    @property
    def updated_node_version(self):
        """Gets the updated_node_version of this BreakdownElementInfoWrapper.  # noqa: E501


        :return: The updated_node_version of this BreakdownElementInfoWrapper.  # noqa: E501
        :rtype: str
        """
        return self._updated_node_version

    @updated_node_version.setter
    def updated_node_version(self, updated_node_version):
        """Sets the updated_node_version of this BreakdownElementInfoWrapper.


        :param updated_node_version: The updated_node_version of this BreakdownElementInfoWrapper.  # noqa: E501
        :type: str
        """

        self._updated_node_version = updated_node_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BreakdownElementInfoWrapper, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BreakdownElementInfoWrapper):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
