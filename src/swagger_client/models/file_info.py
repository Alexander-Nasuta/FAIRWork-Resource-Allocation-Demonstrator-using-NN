# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FileInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app': 'str',
        'content_type': 'str',
        'descr': 'str',
        'discipline': 'str',
        'editor': 'str',
        'is_new_issue': 'bool',
        'proj_phase': 'str',
        'resp': 'str',
        'rev': 'str',
        'rev_man': 'str',
        'source': 'str',
        'status': 'str',
        'title': 'str'
    }

    attribute_map = {
        'app': 'app',
        'content_type': 'contentType',
        'descr': 'descr',
        'discipline': 'discipline',
        'editor': 'editor',
        'is_new_issue': 'isNewIssue',
        'proj_phase': 'projPhase',
        'resp': 'resp',
        'rev': 'rev',
        'rev_man': 'revMan',
        'source': 'source',
        'status': 'status',
        'title': 'title'
    }

    def __init__(self, app=None, content_type=None, descr=None, discipline=None, editor=None, is_new_issue=None, proj_phase=None, resp=None, rev=None, rev_man=None, source=None, status=None, title=None):  # noqa: E501
        """FileInfo - a model defined in Swagger"""  # noqa: E501
        self._app = None
        self._content_type = None
        self._descr = None
        self._discipline = None
        self._editor = None
        self._is_new_issue = None
        self._proj_phase = None
        self._resp = None
        self._rev = None
        self._rev_man = None
        self._source = None
        self._status = None
        self._title = None
        self.discriminator = None
        if app is not None:
            self.app = app
        if content_type is not None:
            self.content_type = content_type
        if descr is not None:
            self.descr = descr
        if discipline is not None:
            self.discipline = discipline
        if editor is not None:
            self.editor = editor
        if is_new_issue is not None:
            self.is_new_issue = is_new_issue
        if proj_phase is not None:
            self.proj_phase = proj_phase
        if resp is not None:
            self.resp = resp
        if rev is not None:
            self.rev = rev
        if rev_man is not None:
            self.rev_man = rev_man
        if source is not None:
            self.source = source
        if status is not None:
            self.status = status
        if title is not None:
            self.title = title

    @property
    def app(self):
        """Gets the app of this FileInfo.  # noqa: E501

        Login of person, who approved the document  # noqa: E501

        :return: The app of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._app

    @app.setter
    def app(self, app):
        """Sets the app of this FileInfo.

        Login of person, who approved the document  # noqa: E501

        :param app: The app of this FileInfo.  # noqa: E501
        :type: str
        """

        self._app = app

    @property
    def content_type(self):
        """Gets the content_type of this FileInfo.  # noqa: E501

        Content type of the document  # noqa: E501

        :return: The content_type of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this FileInfo.

        Content type of the document  # noqa: E501

        :param content_type: The content_type of this FileInfo.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def descr(self):
        """Gets the descr of this FileInfo.  # noqa: E501

        Description of the document  # noqa: E501

        :return: The descr of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._descr

    @descr.setter
    def descr(self, descr):
        """Sets the descr of this FileInfo.

        Description of the document  # noqa: E501

        :param descr: The descr of this FileInfo.  # noqa: E501
        :type: str
        """

        self._descr = descr

    @property
    def discipline(self):
        """Gets the discipline of this FileInfo.  # noqa: E501

        Discipline of the document  # noqa: E501

        :return: The discipline of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this FileInfo.

        Discipline of the document  # noqa: E501

        :param discipline: The discipline of this FileInfo.  # noqa: E501
        :type: str
        """

        self._discipline = discipline

    @property
    def editor(self):
        """Gets the editor of this FileInfo.  # noqa: E501

        Login of person, who edited the document  # noqa: E501

        :return: The editor of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this FileInfo.

        Login of person, who edited the document  # noqa: E501

        :param editor: The editor of this FileInfo.  # noqa: E501
        :type: str
        """

        self._editor = editor

    @property
    def is_new_issue(self):
        """Gets the is_new_issue of this FileInfo.  # noqa: E501

        Is it the new major version of the document  # noqa: E501

        :return: The is_new_issue of this FileInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_new_issue

    @is_new_issue.setter
    def is_new_issue(self, is_new_issue):
        """Sets the is_new_issue of this FileInfo.

        Is it the new major version of the document  # noqa: E501

        :param is_new_issue: The is_new_issue of this FileInfo.  # noqa: E501
        :type: bool
        """

        self._is_new_issue = is_new_issue

    @property
    def proj_phase(self):
        """Gets the proj_phase of this FileInfo.  # noqa: E501

        Project phase of the document  # noqa: E501

        :return: The proj_phase of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._proj_phase

    @proj_phase.setter
    def proj_phase(self, proj_phase):
        """Sets the proj_phase of this FileInfo.

        Project phase of the document  # noqa: E501

        :param proj_phase: The proj_phase of this FileInfo.  # noqa: E501
        :type: str
        """

        self._proj_phase = proj_phase

    @property
    def resp(self):
        """Gets the resp of this FileInfo.  # noqa: E501

        Login of person, who responsible for the document  # noqa: E501

        :return: The resp of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._resp

    @resp.setter
    def resp(self, resp):
        """Sets the resp of this FileInfo.

        Login of person, who responsible for the document  # noqa: E501

        :param resp: The resp of this FileInfo.  # noqa: E501
        :type: str
        """

        self._resp = resp

    @property
    def rev(self):
        """Gets the rev of this FileInfo.  # noqa: E501

        Login of person, who reviewed the document  # noqa: E501

        :return: The rev of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._rev

    @rev.setter
    def rev(self, rev):
        """Sets the rev of this FileInfo.

        Login of person, who reviewed the document  # noqa: E501

        :param rev: The rev of this FileInfo.  # noqa: E501
        :type: str
        """

        self._rev = rev

    @property
    def rev_man(self):
        """Gets the rev_man of this FileInfo.  # noqa: E501

        Login of person, who is the release manager for the document  # noqa: E501

        :return: The rev_man of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._rev_man

    @rev_man.setter
    def rev_man(self, rev_man):
        """Sets the rev_man of this FileInfo.

        Login of person, who is the release manager for the document  # noqa: E501

        :param rev_man: The rev_man of this FileInfo.  # noqa: E501
        :type: str
        """

        self._rev_man = rev_man

    @property
    def source(self):
        """Gets the source of this FileInfo.  # noqa: E501

        Source of the document  # noqa: E501

        :return: The source of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this FileInfo.

        Source of the document  # noqa: E501

        :param source: The source of this FileInfo.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this FileInfo.  # noqa: E501

        Status of the document  # noqa: E501

        :return: The status of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FileInfo.

        Status of the document  # noqa: E501

        :param status: The status of this FileInfo.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this FileInfo.  # noqa: E501

        Title of the document  # noqa: E501

        :return: The title of this FileInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FileInfo.

        Title of the document  # noqa: E501

        :param title: The title of this FileInfo.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FileInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
