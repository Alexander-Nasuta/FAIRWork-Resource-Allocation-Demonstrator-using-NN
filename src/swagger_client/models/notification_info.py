# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_datetime': 'str',
        'message': 'str',
        'notif_type': 'str',
        'related_action': 'ActionInfo',
        'related_red_flag': 'DataFileVersionTreePathInfo',
        'related_scheduled_event': 'ScheduledEventInfo',
        'uuid': 'str'
    }

    attribute_map = {
        '_datetime': 'datetime',
        'message': 'message',
        'notif_type': 'notif_type',
        'related_action': 'related_action',
        'related_red_flag': 'related_red_flag',
        'related_scheduled_event': 'related_scheduled_event',
        'uuid': 'uuid'
    }

    def __init__(self, _datetime=None, message=None, notif_type=None, related_action=None, related_red_flag=None, related_scheduled_event=None, uuid=None):  # noqa: E501
        """NotificationInfo - a model defined in Swagger"""  # noqa: E501
        self.__datetime = None
        self._message = None
        self._notif_type = None
        self._related_action = None
        self._related_red_flag = None
        self._related_scheduled_event = None
        self._uuid = None
        self.discriminator = None
        if _datetime is not None:
            self._datetime = _datetime
        if message is not None:
            self.message = message
        if notif_type is not None:
            self.notif_type = notif_type
        if related_action is not None:
            self.related_action = related_action
        if related_red_flag is not None:
            self.related_red_flag = related_red_flag
        if related_scheduled_event is not None:
            self.related_scheduled_event = related_scheduled_event
        if uuid is not None:
            self.uuid = uuid

    @property
    def _datetime(self):
        """Gets the _datetime of this NotificationInfo.  # noqa: E501


        :return: The _datetime of this NotificationInfo.  # noqa: E501
        :rtype: str
        """
        return self.__datetime

    @_datetime.setter
    def _datetime(self, _datetime):
        """Sets the _datetime of this NotificationInfo.


        :param _datetime: The _datetime of this NotificationInfo.  # noqa: E501
        :type: str
        """

        self.__datetime = _datetime

    @property
    def message(self):
        """Gets the message of this NotificationInfo.  # noqa: E501


        :return: The message of this NotificationInfo.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NotificationInfo.


        :param message: The message of this NotificationInfo.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def notif_type(self):
        """Gets the notif_type of this NotificationInfo.  # noqa: E501


        :return: The notif_type of this NotificationInfo.  # noqa: E501
        :rtype: str
        """
        return self._notif_type

    @notif_type.setter
    def notif_type(self, notif_type):
        """Sets the notif_type of this NotificationInfo.


        :param notif_type: The notif_type of this NotificationInfo.  # noqa: E501
        :type: str
        """

        self._notif_type = notif_type

    @property
    def related_action(self):
        """Gets the related_action of this NotificationInfo.  # noqa: E501


        :return: The related_action of this NotificationInfo.  # noqa: E501
        :rtype: ActionInfo
        """
        return self._related_action

    @related_action.setter
    def related_action(self, related_action):
        """Sets the related_action of this NotificationInfo.


        :param related_action: The related_action of this NotificationInfo.  # noqa: E501
        :type: ActionInfo
        """

        self._related_action = related_action

    @property
    def related_red_flag(self):
        """Gets the related_red_flag of this NotificationInfo.  # noqa: E501


        :return: The related_red_flag of this NotificationInfo.  # noqa: E501
        :rtype: DataFileVersionTreePathInfo
        """
        return self._related_red_flag

    @related_red_flag.setter
    def related_red_flag(self, related_red_flag):
        """Sets the related_red_flag of this NotificationInfo.


        :param related_red_flag: The related_red_flag of this NotificationInfo.  # noqa: E501
        :type: DataFileVersionTreePathInfo
        """

        self._related_red_flag = related_red_flag

    @property
    def related_scheduled_event(self):
        """Gets the related_scheduled_event of this NotificationInfo.  # noqa: E501


        :return: The related_scheduled_event of this NotificationInfo.  # noqa: E501
        :rtype: ScheduledEventInfo
        """
        return self._related_scheduled_event

    @related_scheduled_event.setter
    def related_scheduled_event(self, related_scheduled_event):
        """Sets the related_scheduled_event of this NotificationInfo.


        :param related_scheduled_event: The related_scheduled_event of this NotificationInfo.  # noqa: E501
        :type: ScheduledEventInfo
        """

        self._related_scheduled_event = related_scheduled_event

    @property
    def uuid(self):
        """Gets the uuid of this NotificationInfo.  # noqa: E501


        :return: The uuid of this NotificationInfo.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this NotificationInfo.


        :param uuid: The uuid of this NotificationInfo.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
