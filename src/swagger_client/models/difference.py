# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Difference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'difference_type': 'str',
        'element_1': 'DiffNode',
        'element_2': 'DiffNode',
        'name': 'str'
    }

    attribute_map = {
        'difference_type': 'difference_type',
        'element_1': 'element_1',
        'element_2': 'element_2',
        'name': 'name'
    }

    def __init__(self, difference_type=None, element_1=None, element_2=None, name=None):  # noqa: E501
        """Difference - a model defined in Swagger"""  # noqa: E501
        self._difference_type = None
        self._element_1 = None
        self._element_2 = None
        self._name = None
        self.discriminator = None
        if difference_type is not None:
            self.difference_type = difference_type
        if element_1 is not None:
            self.element_1 = element_1
        if element_2 is not None:
            self.element_2 = element_2
        if name is not None:
            self.name = name

    @property
    def difference_type(self):
        """Gets the difference_type of this Difference.  # noqa: E501


        :return: The difference_type of this Difference.  # noqa: E501
        :rtype: str
        """
        return self._difference_type

    @difference_type.setter
    def difference_type(self, difference_type):
        """Sets the difference_type of this Difference.


        :param difference_type: The difference_type of this Difference.  # noqa: E501
        :type: str
        """

        self._difference_type = difference_type

    @property
    def element_1(self):
        """Gets the element_1 of this Difference.  # noqa: E501


        :return: The element_1 of this Difference.  # noqa: E501
        :rtype: DiffNode
        """
        return self._element_1

    @element_1.setter
    def element_1(self, element_1):
        """Sets the element_1 of this Difference.


        :param element_1: The element_1 of this Difference.  # noqa: E501
        :type: DiffNode
        """

        self._element_1 = element_1

    @property
    def element_2(self):
        """Gets the element_2 of this Difference.  # noqa: E501


        :return: The element_2 of this Difference.  # noqa: E501
        :rtype: DiffNode
        """
        return self._element_2

    @element_2.setter
    def element_2(self, element_2):
        """Sets the element_2 of this Difference.


        :param element_2: The element_2 of this Difference.  # noqa: E501
        :type: DiffNode
        """

        self._element_2 = element_2

    @property
    def name(self):
        """Gets the name of this Difference.  # noqa: E501


        :return: The name of this Difference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Difference.


        :param name: The name of this Difference.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Difference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Difference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
