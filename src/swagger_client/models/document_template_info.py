# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DocumentTemplateInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by_user': 'str',
        'date_created': 'str',
        'description': 'str',
        'file_name': 'str',
        'id': 'str',
        'instance_id': 'int',
        'permissions': 'PermissionsInfo',
        'title': 'str'
    }

    attribute_map = {
        'created_by_user': 'created_by_user',
        'date_created': 'date_created',
        'description': 'description',
        'file_name': 'file_name',
        'id': 'id',
        'instance_id': 'instance_id',
        'permissions': 'permissions',
        'title': 'title'
    }

    def __init__(self, created_by_user=None, date_created=None, description=None, file_name=None, id=None, instance_id=None, permissions=None, title=None):  # noqa: E501
        """DocumentTemplateInfo - a model defined in Swagger"""  # noqa: E501
        self._created_by_user = None
        self._date_created = None
        self._description = None
        self._file_name = None
        self._id = None
        self._instance_id = None
        self._permissions = None
        self._title = None
        self.discriminator = None
        if created_by_user is not None:
            self.created_by_user = created_by_user
        if date_created is not None:
            self.date_created = date_created
        if description is not None:
            self.description = description
        if file_name is not None:
            self.file_name = file_name
        if id is not None:
            self.id = id
        if instance_id is not None:
            self.instance_id = instance_id
        if permissions is not None:
            self.permissions = permissions
        if title is not None:
            self.title = title

    @property
    def created_by_user(self):
        """Gets the created_by_user of this DocumentTemplateInfo.  # noqa: E501


        :return: The created_by_user of this DocumentTemplateInfo.  # noqa: E501
        :rtype: str
        """
        return self._created_by_user

    @created_by_user.setter
    def created_by_user(self, created_by_user):
        """Sets the created_by_user of this DocumentTemplateInfo.


        :param created_by_user: The created_by_user of this DocumentTemplateInfo.  # noqa: E501
        :type: str
        """

        self._created_by_user = created_by_user

    @property
    def date_created(self):
        """Gets the date_created of this DocumentTemplateInfo.  # noqa: E501


        :return: The date_created of this DocumentTemplateInfo.  # noqa: E501
        :rtype: str
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this DocumentTemplateInfo.


        :param date_created: The date_created of this DocumentTemplateInfo.  # noqa: E501
        :type: str
        """

        self._date_created = date_created

    @property
    def description(self):
        """Gets the description of this DocumentTemplateInfo.  # noqa: E501


        :return: The description of this DocumentTemplateInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DocumentTemplateInfo.


        :param description: The description of this DocumentTemplateInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def file_name(self):
        """Gets the file_name of this DocumentTemplateInfo.  # noqa: E501


        :return: The file_name of this DocumentTemplateInfo.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this DocumentTemplateInfo.


        :param file_name: The file_name of this DocumentTemplateInfo.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def id(self):
        """Gets the id of this DocumentTemplateInfo.  # noqa: E501


        :return: The id of this DocumentTemplateInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentTemplateInfo.


        :param id: The id of this DocumentTemplateInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def instance_id(self):
        """Gets the instance_id of this DocumentTemplateInfo.  # noqa: E501


        :return: The instance_id of this DocumentTemplateInfo.  # noqa: E501
        :rtype: int
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this DocumentTemplateInfo.


        :param instance_id: The instance_id of this DocumentTemplateInfo.  # noqa: E501
        :type: int
        """

        self._instance_id = instance_id

    @property
    def permissions(self):
        """Gets the permissions of this DocumentTemplateInfo.  # noqa: E501


        :return: The permissions of this DocumentTemplateInfo.  # noqa: E501
        :rtype: PermissionsInfo
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this DocumentTemplateInfo.


        :param permissions: The permissions of this DocumentTemplateInfo.  # noqa: E501
        :type: PermissionsInfo
        """

        self._permissions = permissions

    @property
    def title(self):
        """Gets the title of this DocumentTemplateInfo.  # noqa: E501


        :return: The title of this DocumentTemplateInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this DocumentTemplateInfo.


        :param title: The title of this DocumentTemplateInfo.  # noqa: E501
        :type: str
        """

        self._title = title

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentTemplateInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentTemplateInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
