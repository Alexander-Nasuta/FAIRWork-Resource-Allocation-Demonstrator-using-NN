# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BaselineControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_baseline_using_post(self, baseline, descr, model, repository, root, token, **kwargs):  # noqa: E501
        """Create new baseline in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_baseline_using_post(baseline, descr, model, repository, root, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str baseline: Baseline ID (required)
        :param str descr: Baseline description (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param int root: Breakdown element instance ID to use as the root of the baseline (required)
        :param str token: Server connection token (required)
        :return: StatusOfAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_baseline_using_post_with_http_info(baseline, descr, model, repository, root, token, **kwargs)  # noqa: E501
        else:
            (data) = self.create_baseline_using_post_with_http_info(baseline, descr, model, repository, root, token, **kwargs)  # noqa: E501
            return data

    def create_baseline_using_post_with_http_info(self, baseline, descr, model, repository, root, token, **kwargs):  # noqa: E501
        """Create new baseline in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_baseline_using_post_with_http_info(baseline, descr, model, repository, root, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str baseline: Baseline ID (required)
        :param str descr: Baseline description (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param int root: Breakdown element instance ID to use as the root of the baseline (required)
        :param str token: Server connection token (required)
        :return: StatusOfAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['baseline', 'descr', 'model', 'repository', 'root', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_baseline_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'baseline' is set
        if ('baseline' not in params or
                params['baseline'] is None):
            raise ValueError("Missing the required parameter `baseline` when calling `create_baseline_using_post`")  # noqa: E501
        # verify the required parameter 'descr' is set
        if ('descr' not in params or
                params['descr'] is None):
            raise ValueError("Missing the required parameter `descr` when calling `create_baseline_using_post`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `create_baseline_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `create_baseline_using_post`")  # noqa: E501
        # verify the required parameter 'root' is set
        if ('root' not in params or
                params['root'] is None):
            raise ValueError("Missing the required parameter `root` when calling `create_baseline_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `create_baseline_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'root' in params:
            path_params['root'] = params['root']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'baseline' in params:
            query_params.append(('baseline', params['baseline']))  # noqa: E501
        if 'descr' in params:
            query_params.append(('descr', params['descr']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/bsl/create/{repository}/{model}/{root}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusOfAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_baseline_using_delete(self, baseline, model, repository, token, **kwargs):  # noqa: E501
        """Delete the baseline from the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_baseline_using_delete(baseline, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str baseline: Baseline ID (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: StatusOfAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_baseline_using_delete_with_http_info(baseline, model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_baseline_using_delete_with_http_info(baseline, model, repository, token, **kwargs)  # noqa: E501
            return data

    def delete_baseline_using_delete_with_http_info(self, baseline, model, repository, token, **kwargs):  # noqa: E501
        """Delete the baseline from the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_baseline_using_delete_with_http_info(baseline, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str baseline: Baseline ID (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: StatusOfAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['baseline', 'model', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_baseline_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'baseline' is set
        if ('baseline' not in params or
                params['baseline'] is None):
            raise ValueError("Missing the required parameter `baseline` when calling `delete_baseline_using_delete`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `delete_baseline_using_delete`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `delete_baseline_using_delete`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `delete_baseline_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'baseline' in params:
            path_params['baseline'] = params['baseline']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/bsl/{repository}/{model}/{baseline}/{token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusOfAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_baseline_to_file_using_get(self, baseline, model, repository, token, **kwargs):  # noqa: E501
        """Export the baseline as a zip package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_baseline_to_file_using_get(baseline, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str baseline: Baseline ID (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: FileInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.export_baseline_to_file_using_get_with_http_info(baseline, model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.export_baseline_to_file_using_get_with_http_info(baseline, model, repository, token, **kwargs)  # noqa: E501
            return data

    def export_baseline_to_file_using_get_with_http_info(self, baseline, model, repository, token, **kwargs):  # noqa: E501
        """Export the baseline as a zip package  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_baseline_to_file_using_get_with_http_info(baseline, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str baseline: Baseline ID (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: FileInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['baseline', 'model', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_baseline_to_file_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'baseline' is set
        if ('baseline' not in params or
                params['baseline'] is None):
            raise ValueError("Missing the required parameter `baseline` when calling `export_baseline_to_file_using_get`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `export_baseline_to_file_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `export_baseline_to_file_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `export_baseline_to_file_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'baseline' in params:
            path_params['baseline'] = params['baseline']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/bsl/export/{repository}/{model}/{baseline}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_baselines_list_using_get(self, model, repository, token, **kwargs):  # noqa: E501
        """Return the list of the baselines in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_baselines_list_using_get(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[BaselineInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_baselines_list_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_baselines_list_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
            return data

    def get_baselines_list_using_get_with_http_info(self, model, repository, token, **kwargs):  # noqa: E501
        """Return the list of the baselines in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_baselines_list_using_get_with_http_info(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[BaselineInfo]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_baselines_list_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_baselines_list_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_baselines_list_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_baselines_list_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/bsl/{repository}/{model}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BaselineInfo]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_baseline_using_post(self, baseline, descr, milestone, model, repository, token, **kwargs):  # noqa: E501
        """Update baseline parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_baseline_using_post(baseline, descr, milestone, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str baseline: Baseline ID (required)
        :param str descr: Description of the baseline (required)
        :param str milestone: Milestone for the baseline (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: StatusOfAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_baseline_using_post_with_http_info(baseline, descr, milestone, model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_baseline_using_post_with_http_info(baseline, descr, milestone, model, repository, token, **kwargs)  # noqa: E501
            return data

    def modify_baseline_using_post_with_http_info(self, baseline, descr, milestone, model, repository, token, **kwargs):  # noqa: E501
        """Update baseline parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_baseline_using_post_with_http_info(baseline, descr, milestone, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str baseline: Baseline ID (required)
        :param str descr: Description of the baseline (required)
        :param str milestone: Milestone for the baseline (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: StatusOfAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['baseline', 'descr', 'milestone', 'model', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_baseline_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'baseline' is set
        if ('baseline' not in params or
                params['baseline'] is None):
            raise ValueError("Missing the required parameter `baseline` when calling `modify_baseline_using_post`")  # noqa: E501
        # verify the required parameter 'descr' is set
        if ('descr' not in params or
                params['descr'] is None):
            raise ValueError("Missing the required parameter `descr` when calling `modify_baseline_using_post`")  # noqa: E501
        # verify the required parameter 'milestone' is set
        if ('milestone' not in params or
                params['milestone'] is None):
            raise ValueError("Missing the required parameter `milestone` when calling `modify_baseline_using_post`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `modify_baseline_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `modify_baseline_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `modify_baseline_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'baseline' in params:
            path_params['baseline'] = params['baseline']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'descr' in params:
            query_params.append(('descr', params['descr']))  # noqa: E501
        if 'milestone' in params:
            query_params.append(('milestone', params['milestone']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/bsl/{repository}/{model}/{baseline}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StatusOfAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
