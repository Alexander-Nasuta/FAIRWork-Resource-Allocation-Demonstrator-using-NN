# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TemplateFolderControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_doc_by_tmpl_using_post(self, file, app, content_type, descr, discipline, editor, is_new_issue, proj_phase, resp, rev, rev_man, server, source, status, title, model, node, repository, token, **kwargs):  # noqa: E501
        """Get document based on template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_doc_by_tmpl_using_post(file, app, content_type, descr, discipline, editor, is_new_issue, proj_phase, resp, rev, rev_man, server, source, status, title, model, node, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str app: Login of person, who approved the document (required)
        :param str content_type: Content type of the document (required)
        :param str descr: Description of the document (required)
        :param str discipline: Discipline of the document (required)
        :param str editor: Login of person, who edited the document (required)
        :param bool is_new_issue: Is it the new major version of the document (required)
        :param str proj_phase: Project phase of the document (required)
        :param str resp: Login of person, who responsible for the document (required)
        :param str rev: Login of person, who reviewed the document (required)
        :param str rev_man: Login of person, who is the release manager for the document (required)
        :param str server: Current client URL (required)
        :param str source: Source of the document (required)
        :param str status: Status of the document (required)
        :param str title: Title of the document (required)
        :param str model: Model name (required)
        :param int node: Instance ID of the breakdown element (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param int act_timestamp: Timestamp of the request
        :return: FileInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_doc_by_tmpl_using_post_with_http_info(file, app, content_type, descr, discipline, editor, is_new_issue, proj_phase, resp, rev, rev_man, server, source, status, title, model, node, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_doc_by_tmpl_using_post_with_http_info(file, app, content_type, descr, discipline, editor, is_new_issue, proj_phase, resp, rev, rev_man, server, source, status, title, model, node, repository, token, **kwargs)  # noqa: E501
            return data

    def get_doc_by_tmpl_using_post_with_http_info(self, file, app, content_type, descr, discipline, editor, is_new_issue, proj_phase, resp, rev, rev_man, server, source, status, title, model, node, repository, token, **kwargs):  # noqa: E501
        """Get document based on template  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_doc_by_tmpl_using_post_with_http_info(file, app, content_type, descr, discipline, editor, is_new_issue, proj_phase, resp, rev, rev_man, server, source, status, title, model, node, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str file: (required)
        :param str app: Login of person, who approved the document (required)
        :param str content_type: Content type of the document (required)
        :param str descr: Description of the document (required)
        :param str discipline: Discipline of the document (required)
        :param str editor: Login of person, who edited the document (required)
        :param bool is_new_issue: Is it the new major version of the document (required)
        :param str proj_phase: Project phase of the document (required)
        :param str resp: Login of person, who responsible for the document (required)
        :param str rev: Login of person, who reviewed the document (required)
        :param str rev_man: Login of person, who is the release manager for the document (required)
        :param str server: Current client URL (required)
        :param str source: Source of the document (required)
        :param str status: Status of the document (required)
        :param str title: Title of the document (required)
        :param str model: Model name (required)
        :param int node: Instance ID of the breakdown element (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param int act_timestamp: Timestamp of the request
        :return: FileInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'app', 'content_type', 'descr', 'discipline', 'editor', 'is_new_issue', 'proj_phase', 'resp', 'rev', 'rev_man', 'server', 'source', 'status', 'title', 'model', 'node', 'repository', 'token', 'act_timestamp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_doc_by_tmpl_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'app' is set
        if ('app' not in params or
                params['app'] is None):
            raise ValueError("Missing the required parameter `app` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'content_type' is set
        if ('content_type' not in params or
                params['content_type'] is None):
            raise ValueError("Missing the required parameter `content_type` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'descr' is set
        if ('descr' not in params or
                params['descr'] is None):
            raise ValueError("Missing the required parameter `descr` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'discipline' is set
        if ('discipline' not in params or
                params['discipline'] is None):
            raise ValueError("Missing the required parameter `discipline` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'editor' is set
        if ('editor' not in params or
                params['editor'] is None):
            raise ValueError("Missing the required parameter `editor` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'is_new_issue' is set
        if ('is_new_issue' not in params or
                params['is_new_issue'] is None):
            raise ValueError("Missing the required parameter `is_new_issue` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'proj_phase' is set
        if ('proj_phase' not in params or
                params['proj_phase'] is None):
            raise ValueError("Missing the required parameter `proj_phase` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'resp' is set
        if ('resp' not in params or
                params['resp'] is None):
            raise ValueError("Missing the required parameter `resp` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'rev' is set
        if ('rev' not in params or
                params['rev'] is None):
            raise ValueError("Missing the required parameter `rev` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'rev_man' is set
        if ('rev_man' not in params or
                params['rev_man'] is None):
            raise ValueError("Missing the required parameter `rev_man` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'server' is set
        if ('server' not in params or
                params['server'] is None):
            raise ValueError("Missing the required parameter `server` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'source' is set
        if ('source' not in params or
                params['source'] is None):
            raise ValueError("Missing the required parameter `source` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'status' is set
        if ('status' not in params or
                params['status'] is None):
            raise ValueError("Missing the required parameter `status` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'title' is set
        if ('title' not in params or
                params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'node' is set
        if ('node' not in params or
                params['node'] is None):
            raise ValueError("Missing the required parameter `node` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_doc_by_tmpl_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'node' in params:
            path_params['node'] = params['node']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'act_timestamp' in params:
            query_params.append(('act_timestamp', params['act_timestamp']))  # noqa: E501
        if 'app' in params:
            query_params.append(('app', params['app']))  # noqa: E501
        if 'content_type' in params:
            query_params.append(('contentType', params['content_type']))  # noqa: E501
        if 'descr' in params:
            query_params.append(('descr', params['descr']))  # noqa: E501
        if 'discipline' in params:
            query_params.append(('discipline', params['discipline']))  # noqa: E501
        if 'editor' in params:
            query_params.append(('editor', params['editor']))  # noqa: E501
        if 'is_new_issue' in params:
            query_params.append(('isNewIssue', params['is_new_issue']))  # noqa: E501
        if 'proj_phase' in params:
            query_params.append(('projPhase', params['proj_phase']))  # noqa: E501
        if 'resp' in params:
            query_params.append(('resp', params['resp']))  # noqa: E501
        if 'rev' in params:
            query_params.append(('rev', params['rev']))  # noqa: E501
        if 'rev_man' in params:
            query_params.append(('revMan', params['rev_man']))  # noqa: E501
        if 'server' in params:
            query_params.append(('server', params['server']))  # noqa: E501
        if 'source' in params:
            query_params.append(('source', params['source']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'title' in params:
            query_params.append(('title', params['title']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/tmpl/{repository}/{model}/{node}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FileInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
