# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IFDControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_class_using_post(self, model, prn_urn, repository, token, urn, **kwargs):  # noqa: E501
        """Defines new concept (instance of xtdSubject) within specified ontology or    just assign existing concept (any subtype of xtdObject, like class, property,    value, unit, measure) to another superclass  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_class_using_post(model, prn_urn, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Urn name of its superclass (could be from another ontology) (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: Name of the concept (unique within the domain ontology) (required)
        :param str descr: descr
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_class_using_post_with_http_info(model, prn_urn, repository, token, urn, **kwargs)  # noqa: E501
        else:
            (data) = self.add_class_using_post_with_http_info(model, prn_urn, repository, token, urn, **kwargs)  # noqa: E501
            return data

    def add_class_using_post_with_http_info(self, model, prn_urn, repository, token, urn, **kwargs):  # noqa: E501
        """Defines new concept (instance of xtdSubject) within specified ontology or    just assign existing concept (any subtype of xtdObject, like class, property,    value, unit, measure) to another superclass  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_class_using_post_with_http_info(model, prn_urn, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Urn name of its superclass (could be from another ontology) (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: Name of the concept (unique within the domain ontology) (required)
        :param str descr: descr
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'prn_urn', 'repository', 'token', 'urn', 'descr']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_class_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `add_class_using_post`")  # noqa: E501
        # verify the required parameter 'prn_urn' is set
        if ('prn_urn' not in params or
                params['prn_urn'] is None):
            raise ValueError("Missing the required parameter `prn_urn` when calling `add_class_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `add_class_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `add_class_using_post`")  # noqa: E501
        # verify the required parameter 'urn' is set
        if ('urn' not in params or
                params['urn'] is None):
            raise ValueError("Missing the required parameter `urn` when calling `add_class_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'prn_urn' in params:
            path_params['prn_urn'] = params['prn_urn']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'urn' in params:
            path_params['urn'] = params['urn']  # noqa: E501

        query_params = []
        if 'descr' in params:
            query_params.append(('descr', params['descr']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/class/{repository}/{model}/{urn}/{prn_urn}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_enum_using_post(self, model, repository, token, urn, **kwargs):  # noqa: E501
        """Adds enumeration property for a concept. Returns defined/updated enumeration URN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_enum_using_post(model, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: URN of newly defined or existing property to be assigned (required)
        :param str concept_urn: URN of existing concept assigned by the property
        :param str descr: Description of the property (in context of assigned object)
        :param str domain_urn: Comma-separated list of existing value domain(s) URN
        :param bool mandatory: Flag to set mandatory restriction for the property
        :param bool readonly: Flag to set read-only access for the property
        :param str super_urn: URN of existing property/class used to inherit the property
        :param str vals_urn: Concept - supertype for newly created enumeration elements
        :param str values: List of the enum elements (newly created or existing)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_enum_using_post_with_http_info(model, repository, token, urn, **kwargs)  # noqa: E501
        else:
            (data) = self.add_enum_using_post_with_http_info(model, repository, token, urn, **kwargs)  # noqa: E501
            return data

    def add_enum_using_post_with_http_info(self, model, repository, token, urn, **kwargs):  # noqa: E501
        """Adds enumeration property for a concept. Returns defined/updated enumeration URN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_enum_using_post_with_http_info(model, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: URN of newly defined or existing property to be assigned (required)
        :param str concept_urn: URN of existing concept assigned by the property
        :param str descr: Description of the property (in context of assigned object)
        :param str domain_urn: Comma-separated list of existing value domain(s) URN
        :param bool mandatory: Flag to set mandatory restriction for the property
        :param bool readonly: Flag to set read-only access for the property
        :param str super_urn: URN of existing property/class used to inherit the property
        :param str vals_urn: Concept - supertype for newly created enumeration elements
        :param str values: List of the enum elements (newly created or existing)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'urn', 'concept_urn', 'descr', 'domain_urn', 'mandatory', 'readonly', 'super_urn', 'vals_urn', 'values']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_enum_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `add_enum_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `add_enum_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `add_enum_using_post`")  # noqa: E501
        # verify the required parameter 'urn' is set
        if ('urn' not in params or
                params['urn'] is None):
            raise ValueError("Missing the required parameter `urn` when calling `add_enum_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'urn' in params:
            path_params['urn'] = params['urn']  # noqa: E501

        query_params = []
        if 'concept_urn' in params:
            query_params.append(('concept_urn', params['concept_urn']))  # noqa: E501
        if 'descr' in params:
            query_params.append(('descr', params['descr']))  # noqa: E501
        if 'domain_urn' in params:
            query_params.append(('domain_urn', params['domain_urn']))  # noqa: E501
        if 'mandatory' in params:
            query_params.append(('mandatory', params['mandatory']))  # noqa: E501
        if 'readonly' in params:
            query_params.append(('readonly', params['readonly']))  # noqa: E501
        if 'super_urn' in params:
            query_params.append(('super_urn', params['super_urn']))  # noqa: E501
        if 'vals_urn' in params:
            query_params.append(('vals_urn', params['vals_urn']))  # noqa: E501
        if 'values' in params:
            query_params.append(('values', params['values']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/prop_enum/{repository}/{model}/{urn}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_num_using_post(self, model, repository, token, urn, **kwargs):  # noqa: E501
        """Adds numeric property for a concept. Returns defined/updated enumeration URN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_num_using_post(model, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: URN of newly defined or existing property to be assigned (required)
        :param str concept_urn: URN of existing concept assigned by the property
        :param str descr: Description of the property (in context of assigned object) or an expression of the property calculation (starting from '=')
        :param str domain_urn: Comma-separated list of existing value domain(s) URN
        :param bool mandatory: Flag to set mandatory restriction for the property
        :param bool readonly: Flag to set read-only access for the property
        :param str super_urn: URN of existing property/class used to inherit the property
        :param str unit_super_urn: URN of existing class to put newly created value unit
        :param str units: Comma-separated list of existing (or newly created by the call) value units urn (like, METER, mkM, mM, etc.)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_num_using_post_with_http_info(model, repository, token, urn, **kwargs)  # noqa: E501
        else:
            (data) = self.add_num_using_post_with_http_info(model, repository, token, urn, **kwargs)  # noqa: E501
            return data

    def add_num_using_post_with_http_info(self, model, repository, token, urn, **kwargs):  # noqa: E501
        """Adds numeric property for a concept. Returns defined/updated enumeration URN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_num_using_post_with_http_info(model, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: URN of newly defined or existing property to be assigned (required)
        :param str concept_urn: URN of existing concept assigned by the property
        :param str descr: Description of the property (in context of assigned object) or an expression of the property calculation (starting from '=')
        :param str domain_urn: Comma-separated list of existing value domain(s) URN
        :param bool mandatory: Flag to set mandatory restriction for the property
        :param bool readonly: Flag to set read-only access for the property
        :param str super_urn: URN of existing property/class used to inherit the property
        :param str unit_super_urn: URN of existing class to put newly created value unit
        :param str units: Comma-separated list of existing (or newly created by the call) value units urn (like, METER, mkM, mM, etc.)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'urn', 'concept_urn', 'descr', 'domain_urn', 'mandatory', 'readonly', 'super_urn', 'unit_super_urn', 'units']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_num_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `add_num_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `add_num_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `add_num_using_post`")  # noqa: E501
        # verify the required parameter 'urn' is set
        if ('urn' not in params or
                params['urn'] is None):
            raise ValueError("Missing the required parameter `urn` when calling `add_num_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'urn' in params:
            path_params['urn'] = params['urn']  # noqa: E501

        query_params = []
        if 'concept_urn' in params:
            query_params.append(('concept_urn', params['concept_urn']))  # noqa: E501
        if 'descr' in params:
            query_params.append(('descr', params['descr']))  # noqa: E501
        if 'domain_urn' in params:
            query_params.append(('domain_urn', params['domain_urn']))  # noqa: E501
        if 'mandatory' in params:
            query_params.append(('mandatory', params['mandatory']))  # noqa: E501
        if 'readonly' in params:
            query_params.append(('readonly', params['readonly']))  # noqa: E501
        if 'super_urn' in params:
            query_params.append(('super_urn', params['super_urn']))  # noqa: E501
        if 'unit_super_urn' in params:
            query_params.append(('unit_super_urn', params['unit_super_urn']))  # noqa: E501
        if 'units' in params:
            query_params.append(('units', params['units']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/prop_num/{repository}/{model}/{urn}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_prop_using_post(self, model, repository, token, urn, **kwargs):  # noqa: E501
        """Specifies property for a concept (class or another property. Returns urn of newly created/updated property  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_prop_using_post(model, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: URN of newly defined or existing property to be assigned (required)
        :param str concept_urn: URN of existing concept assigned by the property
        :param str descr: Description of the property (in context of assigned object) or an expression of the property calculation (starting from '=')
        :param str domain_urn: Comma-separated list of existing value domain(s) URN
        :param bool mandatory: Flag to set mandatory restriction for the property
        :param bool readonly: Flag to set read-only access for the property
        :param str super_urn: URN of existing property/class used to inherit the property
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_prop_using_post_with_http_info(model, repository, token, urn, **kwargs)  # noqa: E501
        else:
            (data) = self.add_prop_using_post_with_http_info(model, repository, token, urn, **kwargs)  # noqa: E501
            return data

    def add_prop_using_post_with_http_info(self, model, repository, token, urn, **kwargs):  # noqa: E501
        """Specifies property for a concept (class or another property. Returns urn of newly created/updated property  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_prop_using_post_with_http_info(model, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: URN of newly defined or existing property to be assigned (required)
        :param str concept_urn: URN of existing concept assigned by the property
        :param str descr: Description of the property (in context of assigned object) or an expression of the property calculation (starting from '=')
        :param str domain_urn: Comma-separated list of existing value domain(s) URN
        :param bool mandatory: Flag to set mandatory restriction for the property
        :param bool readonly: Flag to set read-only access for the property
        :param str super_urn: URN of existing property/class used to inherit the property
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'urn', 'concept_urn', 'descr', 'domain_urn', 'mandatory', 'readonly', 'super_urn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_prop_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `add_prop_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `add_prop_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `add_prop_using_post`")  # noqa: E501
        # verify the required parameter 'urn' is set
        if ('urn' not in params or
                params['urn'] is None):
            raise ValueError("Missing the required parameter `urn` when calling `add_prop_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'urn' in params:
            path_params['urn'] = params['urn']  # noqa: E501

        query_params = []
        if 'concept_urn' in params:
            query_params.append(('concept_urn', params['concept_urn']))  # noqa: E501
        if 'descr' in params:
            query_params.append(('descr', params['descr']))  # noqa: E501
        if 'domain_urn' in params:
            query_params.append(('domain_urn', params['domain_urn']))  # noqa: E501
        if 'mandatory' in params:
            query_params.append(('mandatory', params['mandatory']))  # noqa: E501
        if 'readonly' in params:
            query_params.append(('readonly', params['readonly']))  # noqa: E501
        if 'super_urn' in params:
            query_params.append(('super_urn', params['super_urn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/prop/{repository}/{model}/{urn}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_concept_using_delete(self, model, repository, token, urn, **kwargs):  # noqa: E501
        """Removes concept specified by its urn name from target model    or a class from supertype    or an property from class    or a value from property    or a unit from property    or a concept from class (group)    or an element from collection    - depend from input  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_concept_using_delete(model, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: URN of concept for remove (required)
        :param str prn_urn: URN of of parent where the concept                   should be removed from:                      nothing - to remove from all relationships and target model                      supertype - to remove from class hierarchy                      concept - to remove property from the class                      property - to remove unit or value from the property                      class - to remove member from group (unclassify)                      collection - to remove element from collection
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_concept_using_delete_with_http_info(model, repository, token, urn, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_concept_using_delete_with_http_info(model, repository, token, urn, **kwargs)  # noqa: E501
            return data

    def delete_concept_using_delete_with_http_info(self, model, repository, token, urn, **kwargs):  # noqa: E501
        """Removes concept specified by its urn name from target model    or a class from supertype    or an property from class    or a value from property    or a unit from property    or a concept from class (group)    or an element from collection    - depend from input  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_concept_using_delete_with_http_info(model, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: URN of concept for remove (required)
        :param str prn_urn: URN of of parent where the concept                   should be removed from:                      nothing - to remove from all relationships and target model                      supertype - to remove from class hierarchy                      concept - to remove property from the class                      property - to remove unit or value from the property                      class - to remove member from group (unclassify)                      collection - to remove element from collection
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'urn', 'prn_urn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_concept_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `delete_concept_using_delete`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `delete_concept_using_delete`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `delete_concept_using_delete`")  # noqa: E501
        # verify the required parameter 'urn' is set
        if ('urn' not in params or
                params['urn'] is None):
            raise ValueError("Missing the required parameter `urn` when calling `delete_concept_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'urn' in params:
            path_params['urn'] = params['urn']  # noqa: E501

        query_params = []
        if 'prn_urn' in params:
            query_params.append(('prn_urn', params['prn_urn']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/{repository}/{model}/{urn}/{token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_aggr_rules_using_get(self, model, prn_urn, repository, token, **kwargs):  # noqa: E501
        """Return validation rules for aggregated property  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggr_rules_using_get(model, prn_urn, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Aggregate structure URN (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[StringResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_aggr_rules_using_get_with_http_info(model, prn_urn, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_aggr_rules_using_get_with_http_info(model, prn_urn, repository, token, **kwargs)  # noqa: E501
            return data

    def get_aggr_rules_using_get_with_http_info(self, model, prn_urn, repository, token, **kwargs):  # noqa: E501
        """Return validation rules for aggregated property  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_aggr_rules_using_get_with_http_info(model, prn_urn, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Aggregate structure URN (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[StringResult]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'prn_urn', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_aggr_rules_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_aggr_rules_using_get`")  # noqa: E501
        # verify the required parameter 'prn_urn' is set
        if ('prn_urn' not in params or
                params['prn_urn'] is None):
            raise ValueError("Missing the required parameter `prn_urn` when calling `get_aggr_rules_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_aggr_rules_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_aggr_rules_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'prn_urn' in params:
            path_params['prn_urn'] = params['prn_urn']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/rules/{repository}/{model}/{prn_urn}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StringResult]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_child_in_context_using_get(self, model, repository, token, **kwargs):  # noqa: E501
        """Return classes available for specified concept  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_child_in_context_using_get(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str context: context urn
        :param str restriction: restriction name
        :param str root: root for classes
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_child_in_context_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_child_in_context_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
            return data

    def get_child_in_context_using_get_with_http_info(self, model, repository, token, **kwargs):  # noqa: E501
        """Return classes available for specified concept  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_child_in_context_using_get_with_http_info(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str context: context urn
        :param str restriction: restriction name
        :param str root: root for classes
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'context', 'restriction', 'root']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_child_in_context_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_child_in_context_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_child_in_context_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_child_in_context_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'context' in params:
            query_params.append(('context', params['context']))  # noqa: E501
        if 'restriction' in params:
            query_params.append(('restriction', params['restriction']))  # noqa: E501
        if 'root' in params:
            query_params.append(('root', params['root']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/deep/{repository}/{model}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_child_types_info_using_get(self, model, repository, token, type, **kwargs):  # noqa: E501
        """Return info of the direct subtypes of the specified supertype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_child_types_info_using_get(model, repository, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str type: Supertype URN (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_child_types_info_using_get_with_http_info(model, repository, token, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_child_types_info_using_get_with_http_info(model, repository, token, type, **kwargs)  # noqa: E501
            return data

    def get_child_types_info_using_get_with_http_info(self, model, repository, token, type, **kwargs):  # noqa: E501
        """Return info of the direct subtypes of the specified supertype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_child_types_info_using_get_with_http_info(model, repository, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str type: Supertype URN (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_child_types_info_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_child_types_info_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_child_types_info_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_child_types_info_using_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_child_types_info_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/info/{repository}/{model}/{type}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_child_types_tree_using_get1(self, model, repository, token, type, **kwargs):  # noqa: E501
        """Return tree of the direct subtypes of the specified supertype and so on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_child_types_tree_using_get1(model, repository, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str type: Supertype URN (required)
        :return: list[TypeNode]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_child_types_tree_using_get1_with_http_info(model, repository, token, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_child_types_tree_using_get1_with_http_info(model, repository, token, type, **kwargs)  # noqa: E501
            return data

    def get_child_types_tree_using_get1_with_http_info(self, model, repository, token, type, **kwargs):  # noqa: E501
        """Return tree of the direct subtypes of the specified supertype and so on  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_child_types_tree_using_get1_with_http_info(model, repository, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str type: Supertype URN (required)
        :return: list[TypeNode]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_child_types_tree_using_get1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_child_types_tree_using_get1`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_child_types_tree_using_get1`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_child_types_tree_using_get1`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_child_types_tree_using_get1`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/tree/{repository}/{model}/{type}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TypeNode]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_child_types_using_get(self, model, repository, token, type, **kwargs):  # noqa: E501
        """Return direct subtypes of the specified supertype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_child_types_using_get(model, repository, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str type: Supertype URN (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_child_types_using_get_with_http_info(model, repository, token, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_child_types_using_get_with_http_info(model, repository, token, type, **kwargs)  # noqa: E501
            return data

    def get_child_types_using_get_with_http_info(self, model, repository, token, type, **kwargs):  # noqa: E501
        """Return direct subtypes of the specified supertype  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_child_types_using_get_with_http_info(model, repository, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str type: Supertype URN (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_child_types_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_child_types_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_child_types_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_child_types_using_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_child_types_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/{repository}/{model}/{type}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_concept_using_get(self, model, repository, token, urn, **kwargs):  # noqa: E501
        """Return full info about concept specified by its urn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_concept_using_get(model, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: Concept URN (required)
        :return: ConceptView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_concept_using_get_with_http_info(model, repository, token, urn, **kwargs)  # noqa: E501
        else:
            (data) = self.get_concept_using_get_with_http_info(model, repository, token, urn, **kwargs)  # noqa: E501
            return data

    def get_concept_using_get_with_http_info(self, model, repository, token, urn, **kwargs):  # noqa: E501
        """Return full info about concept specified by its urn  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_concept_using_get_with_http_info(model, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: Concept URN (required)
        :return: ConceptView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'urn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_concept_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_concept_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_concept_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_concept_using_get`")  # noqa: E501
        # verify the required parameter 'urn' is set
        if ('urn' not in params or
                params['urn'] is None):
            raise ValueError("Missing the required parameter `urn` when calling `get_concept_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'urn' in params:
            path_params['urn'] = params['urn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/concept/{repository}/{model}/{urn}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConceptView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_key_concept_using_get(self, model, prn_urn, repository, token, **kwargs):  # noqa: E501
        """Return primary keys for the aggregate structure  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_key_concept_using_get(model, prn_urn, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Aggregate structure URN (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_key_concept_using_get_with_http_info(model, prn_urn, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_key_concept_using_get_with_http_info(model, prn_urn, repository, token, **kwargs)  # noqa: E501
            return data

    def get_key_concept_using_get_with_http_info(self, model, prn_urn, repository, token, **kwargs):  # noqa: E501
        """Return primary keys for the aggregate structure  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_key_concept_using_get_with_http_info(model, prn_urn, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Aggregate structure URN (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'prn_urn', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_key_concept_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_key_concept_using_get`")  # noqa: E501
        # verify the required parameter 'prn_urn' is set
        if ('prn_urn' not in params or
                params['prn_urn'] is None):
            raise ValueError("Missing the required parameter `prn_urn` when calling `get_key_concept_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_key_concept_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_key_concept_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'prn_urn' in params:
            path_params['prn_urn'] = params['prn_urn']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/key/{repository}/{model}/{prn_urn}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_order_concept_using_get(self, model, prn_urn, repository, token, **kwargs):  # noqa: E501
        """Return order by property for the breakdown element type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_concept_using_get(model, prn_urn, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Breakdown element type URN (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_order_concept_using_get_with_http_info(model, prn_urn, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_order_concept_using_get_with_http_info(model, prn_urn, repository, token, **kwargs)  # noqa: E501
            return data

    def get_order_concept_using_get_with_http_info(self, model, prn_urn, repository, token, **kwargs):  # noqa: E501
        """Return order by property for the breakdown element type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_concept_using_get_with_http_info(model, prn_urn, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Breakdown element type URN (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'prn_urn', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_order_concept_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_order_concept_using_get`")  # noqa: E501
        # verify the required parameter 'prn_urn' is set
        if ('prn_urn' not in params or
                params['prn_urn'] is None):
            raise ValueError("Missing the required parameter `prn_urn` when calling `get_order_concept_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_order_concept_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_order_concept_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'prn_urn' in params:
            path_params['prn_urn'] = params['prn_urn']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/order/{repository}/{model}/{prn_urn}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_props_deep_using_get(self, model, repository, token, type, **kwargs):  # noqa: E501
        """Return list of all properties/attributes urn assigned to the concept (including attributes of derived concepts - subtypes of the specified)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_props_deep_using_get(model, repository, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str type: Concept URN (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_props_deep_using_get_with_http_info(model, repository, token, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_props_deep_using_get_with_http_info(model, repository, token, type, **kwargs)  # noqa: E501
            return data

    def get_props_deep_using_get_with_http_info(self, model, repository, token, type, **kwargs):  # noqa: E501
        """Return list of all properties/attributes urn assigned to the concept (including attributes of derived concepts - subtypes of the specified)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_props_deep_using_get_with_http_info(model, repository, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str type: Concept URN (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_props_deep_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_props_deep_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_props_deep_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_props_deep_using_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_props_deep_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/prop/deep/{repository}/{model}/{type}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_props_using_get(self, model, name, repository, token, **kwargs):  # noqa: E501
        """Return list of all properties of a specified concept (including inherited)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_props_using_get(model, name, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str name: Concept URN or comma-separated list of URNs (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[PropertyView]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_props_using_get_with_http_info(model, name, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_props_using_get_with_http_info(model, name, repository, token, **kwargs)  # noqa: E501
            return data

    def get_props_using_get_with_http_info(self, model, name, repository, token, **kwargs):  # noqa: E501
        """Return list of all properties of a specified concept (including inherited)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_props_using_get_with_http_info(model, name, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str name: Concept URN or comma-separated list of URNs (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[PropertyView]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'name', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_props_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_props_using_get`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `get_props_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_props_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_props_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/prop/{repository}/{model}/{name}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PropertyView]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_types_tree_using_get(self, model, repository, token, type, **kwargs):  # noqa: E501
        """Return tree of the direct subtypes of the specified supertype in one call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_types_tree_using_get(model, repository, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str type: Supertype URN (required)
        :return: list[ConceptTreeView]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_types_tree_using_get_with_http_info(model, repository, token, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_types_tree_using_get_with_http_info(model, repository, token, type, **kwargs)  # noqa: E501
            return data

    def get_types_tree_using_get_with_http_info(self, model, repository, token, type, **kwargs):  # noqa: E501
        """Return tree of the direct subtypes of the specified supertype in one call  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_types_tree_using_get_with_http_info(model, repository, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str type: Supertype URN (required)
        :return: list[ConceptTreeView]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_types_tree_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_types_tree_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_types_tree_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_types_tree_using_get`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_types_tree_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/q_tree/{repository}/{model}/{type}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ConceptTreeView]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def init_block_chain_using_put(self, model, repository, token, **kwargs):  # noqa: E501
        """Updates RDL for the blockchain functionality  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.init_block_chain_using_put(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.init_block_chain_using_put_with_http_info(model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.init_block_chain_using_put_with_http_info(model, repository, token, **kwargs)  # noqa: E501
            return data

    def init_block_chain_using_put_with_http_info(self, model, repository, token, **kwargs):  # noqa: E501
        """Updates RDL for the blockchain functionality  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.init_block_chain_using_put_with_http_info(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method init_block_chain_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `init_block_chain_using_put`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `init_block_chain_using_put`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `init_block_chain_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/chain/{repository}/{model}/{token}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def is_block_chain_ready_using_get(self, model, repository, token, **kwargs):  # noqa: E501
        """Checks where or not RDL is ready for the blockchain functionality  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.is_block_chain_ready_using_get(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.is_block_chain_ready_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.is_block_chain_ready_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
            return data

    def is_block_chain_ready_using_get_with_http_info(self, model, repository, token, **kwargs):  # noqa: E501
        """Checks where or not RDL is ready for the blockchain functionality  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.is_block_chain_ready_using_get_with_http_info(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method is_block_chain_ready_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `is_block_chain_ready_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `is_block_chain_ready_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `is_block_chain_ready_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/chain/{repository}/{model}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def move_prop_using_post(self, class_from, class_to, model, prop_urn, repository, token, **kwargs):  # noqa: E501
        """Move property definition from one concept to another  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_prop_using_post(class_from, class_to, model, prop_urn, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_from: Concept URN to remove the proprety (required)
        :param str class_to: Concept URN to assign the proprety (required)
        :param str model: Model name (required)
        :param str prop_urn: Property URN (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.move_prop_using_post_with_http_info(class_from, class_to, model, prop_urn, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.move_prop_using_post_with_http_info(class_from, class_to, model, prop_urn, repository, token, **kwargs)  # noqa: E501
            return data

    def move_prop_using_post_with_http_info(self, class_from, class_to, model, prop_urn, repository, token, **kwargs):  # noqa: E501
        """Move property definition from one concept to another  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.move_prop_using_post_with_http_info(class_from, class_to, model, prop_urn, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str class_from: Concept URN to remove the proprety (required)
        :param str class_to: Concept URN to assign the proprety (required)
        :param str model: Model name (required)
        :param str prop_urn: Property URN (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['class_from', 'class_to', 'model', 'prop_urn', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method move_prop_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'class_from' is set
        if ('class_from' not in params or
                params['class_from'] is None):
            raise ValueError("Missing the required parameter `class_from` when calling `move_prop_using_post`")  # noqa: E501
        # verify the required parameter 'class_to' is set
        if ('class_to' not in params or
                params['class_to'] is None):
            raise ValueError("Missing the required parameter `class_to` when calling `move_prop_using_post`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `move_prop_using_post`")  # noqa: E501
        # verify the required parameter 'prop_urn' is set
        if ('prop_urn' not in params or
                params['prop_urn'] is None):
            raise ValueError("Missing the required parameter `prop_urn` when calling `move_prop_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `move_prop_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `move_prop_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'prop_urn' in params:
            path_params['prop_urn'] = params['prop_urn']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'class_from' in params:
            query_params.append(('class_from', params['class_from']))  # noqa: E501
        if 'class_to' in params:
            query_params.append(('class_to', params['class_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/move/{repository}/{model}/{prop_urn}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_aggr_rules_using_post(self, model, prn_urn, repository, rules, token, **kwargs):  # noqa: E501
        """Sets validation rules for aggregated property  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_aggr_rules_using_post(model, prn_urn, repository, rules, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Aggregate property URN (required)
        :param str repository: Repository name (required)
        :param str rules: Validation rules (required)
        :param str token: Server connection token (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_aggr_rules_using_post_with_http_info(model, prn_urn, repository, rules, token, **kwargs)  # noqa: E501
        else:
            (data) = self.set_aggr_rules_using_post_with_http_info(model, prn_urn, repository, rules, token, **kwargs)  # noqa: E501
            return data

    def set_aggr_rules_using_post_with_http_info(self, model, prn_urn, repository, rules, token, **kwargs):  # noqa: E501
        """Sets validation rules for aggregated property  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_aggr_rules_using_post_with_http_info(model, prn_urn, repository, rules, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Aggregate property URN (required)
        :param str repository: Repository name (required)
        :param str rules: Validation rules (required)
        :param str token: Server connection token (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'prn_urn', 'repository', 'rules', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_aggr_rules_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `set_aggr_rules_using_post`")  # noqa: E501
        # verify the required parameter 'prn_urn' is set
        if ('prn_urn' not in params or
                params['prn_urn'] is None):
            raise ValueError("Missing the required parameter `prn_urn` when calling `set_aggr_rules_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `set_aggr_rules_using_post`")  # noqa: E501
        # verify the required parameter 'rules' is set
        if ('rules' not in params or
                params['rules'] is None):
            raise ValueError("Missing the required parameter `rules` when calling `set_aggr_rules_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `set_aggr_rules_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'prn_urn' in params:
            path_params['prn_urn'] = params['prn_urn']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'rules' in params:
            query_params.append(('rules', params['rules']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/rules/{repository}/{model}/{prn_urn}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_key_concept_using_put(self, model, prn_urn, repository, token, urn, **kwargs):  # noqa: E501
        """Sets primary key for the aggregate structure  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_key_concept_using_put(model, prn_urn, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Aggregate structure URN (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: Key element URN (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_key_concept_using_put_with_http_info(model, prn_urn, repository, token, urn, **kwargs)  # noqa: E501
        else:
            (data) = self.set_key_concept_using_put_with_http_info(model, prn_urn, repository, token, urn, **kwargs)  # noqa: E501
            return data

    def set_key_concept_using_put_with_http_info(self, model, prn_urn, repository, token, urn, **kwargs):  # noqa: E501
        """Sets primary key for the aggregate structure  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_key_concept_using_put_with_http_info(model, prn_urn, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Aggregate structure URN (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: Key element URN (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'prn_urn', 'repository', 'token', 'urn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_key_concept_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `set_key_concept_using_put`")  # noqa: E501
        # verify the required parameter 'prn_urn' is set
        if ('prn_urn' not in params or
                params['prn_urn'] is None):
            raise ValueError("Missing the required parameter `prn_urn` when calling `set_key_concept_using_put`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `set_key_concept_using_put`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `set_key_concept_using_put`")  # noqa: E501
        # verify the required parameter 'urn' is set
        if ('urn' not in params or
                params['urn'] is None):
            raise ValueError("Missing the required parameter `urn` when calling `set_key_concept_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'prn_urn' in params:
            path_params['prn_urn'] = params['prn_urn']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'urn' in params:
            path_params['urn'] = params['urn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/key/{repository}/{model}/{prn_urn}/{urn}/{token}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_order_concept_using_put(self, model, prn_urn, repository, token, urn, **kwargs):  # noqa: E501
        """Sets order by property for the breakdown element type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_order_concept_using_put(model, prn_urn, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Breakdown element type URN (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: Breakdown element property URN (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_order_concept_using_put_with_http_info(model, prn_urn, repository, token, urn, **kwargs)  # noqa: E501
        else:
            (data) = self.set_order_concept_using_put_with_http_info(model, prn_urn, repository, token, urn, **kwargs)  # noqa: E501
            return data

    def set_order_concept_using_put_with_http_info(self, model, prn_urn, repository, token, urn, **kwargs):  # noqa: E501
        """Sets order by property for the breakdown element type  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_order_concept_using_put_with_http_info(model, prn_urn, repository, token, urn, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str prn_urn: Breakdown element type URN (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str urn: Breakdown element property URN (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'prn_urn', 'repository', 'token', 'urn']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_order_concept_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `set_order_concept_using_put`")  # noqa: E501
        # verify the required parameter 'prn_urn' is set
        if ('prn_urn' not in params or
                params['prn_urn'] is None):
            raise ValueError("Missing the required parameter `prn_urn` when calling `set_order_concept_using_put`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `set_order_concept_using_put`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `set_order_concept_using_put`")  # noqa: E501
        # verify the required parameter 'urn' is set
        if ('urn' not in params or
                params['urn'] is None):
            raise ValueError("Missing the required parameter `urn` when calling `set_order_concept_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'prn_urn' in params:
            path_params['prn_urn'] = params['prn_urn']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501
        if 'urn' in params:
            path_params['urn'] = params['urn']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/order/{repository}/{model}/{prn_urn}/{urn}/{token}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_prop_order_using_post(self, model, order, prn_urn, repository, token, **kwargs):  # noqa: E501
        """Sets property order by CSV list of property urns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_prop_order_using_post(model, order, prn_urn, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str order: CSV of its property urns or special cases: unset or 'CANCEL' - to cancel order, 'RESET' - to fix default order (required)
        :param str prn_urn: URN of concept with fixed property order (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_prop_order_using_post_with_http_info(model, order, prn_urn, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.set_prop_order_using_post_with_http_info(model, order, prn_urn, repository, token, **kwargs)  # noqa: E501
            return data

    def set_prop_order_using_post_with_http_info(self, model, order, prn_urn, repository, token, **kwargs):  # noqa: E501
        """Sets property order by CSV list of property urns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_prop_order_using_post_with_http_info(model, order, prn_urn, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str order: CSV of its property urns or special cases: unset or 'CANCEL' - to cancel order, 'RESET' - to fix default order (required)
        :param str prn_urn: URN of concept with fixed property order (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: StringResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'order', 'prn_urn', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_prop_order_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `set_prop_order_using_post`")  # noqa: E501
        # verify the required parameter 'order' is set
        if ('order' not in params or
                params['order'] is None):
            raise ValueError("Missing the required parameter `order` when calling `set_prop_order_using_post`")  # noqa: E501
        # verify the required parameter 'prn_urn' is set
        if ('prn_urn' not in params or
                params['prn_urn'] is None):
            raise ValueError("Missing the required parameter `prn_urn` when calling `set_prop_order_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `set_prop_order_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `set_prop_order_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'prn_urn' in params:
            path_params['prn_urn'] = params['prn_urn']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/ifd_concept/prop_order/{repository}/{model}/{prn_urn}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
