# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProjectFolderControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_project_to_folder_using_put(self, folder, proj, token, **kwargs):  # noqa: E501
        """Create new project folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_project_to_folder_using_put(folder, proj, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Folder name (required)
        :param int proj: Project ID (required)
        :param str token: Server connection token (required)
        :return: VGroupFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_project_to_folder_using_put_with_http_info(folder, proj, token, **kwargs)  # noqa: E501
        else:
            (data) = self.add_project_to_folder_using_put_with_http_info(folder, proj, token, **kwargs)  # noqa: E501
            return data

    def add_project_to_folder_using_put_with_http_info(self, folder, proj, token, **kwargs):  # noqa: E501
        """Create new project folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_project_to_folder_using_put_with_http_info(folder, proj, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Folder name (required)
        :param int proj: Project ID (required)
        :param str token: Server connection token (required)
        :return: VGroupFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder', 'proj', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_project_to_folder_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder' is set
        if ('folder' not in params or
                params['folder'] is None):
            raise ValueError("Missing the required parameter `folder` when calling `add_project_to_folder_using_put`")  # noqa: E501
        # verify the required parameter 'proj' is set
        if ('proj' not in params or
                params['proj'] is None):
            raise ValueError("Missing the required parameter `proj` when calling `add_project_to_folder_using_put`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `add_project_to_folder_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder' in params:
            path_params['folder'] = params['folder']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'proj' in params:
            query_params.append(('proj', params['proj']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/pfolder/{folder}/{token}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VGroupFolder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_folder_using_post(self, folder, token, **kwargs):  # noqa: E501
        """Create new project folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_folder_using_post(folder, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Folder name (required)
        :param str token: Server connection token (required)
        :return: VGroupFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_folder_using_post_with_http_info(folder, token, **kwargs)  # noqa: E501
        else:
            (data) = self.create_folder_using_post_with_http_info(folder, token, **kwargs)  # noqa: E501
            return data

    def create_folder_using_post_with_http_info(self, folder, token, **kwargs):  # noqa: E501
        """Create new project folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_folder_using_post_with_http_info(folder, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Folder name (required)
        :param str token: Server connection token (required)
        :return: VGroupFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_folder_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder' is set
        if ('folder' not in params or
                params['folder'] is None):
            raise ValueError("Missing the required parameter `folder` when calling `create_folder_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `create_folder_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/pfolder/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VGroupFolder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_folder_using_delete(self, folder, token, **kwargs):  # noqa: E501
        """Delete the project folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_folder_using_delete(folder, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Folder name (required)
        :param str token: Server connection token (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_folder_using_delete_with_http_info(folder, token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_folder_using_delete_with_http_info(folder, token, **kwargs)  # noqa: E501
            return data

    def delete_folder_using_delete_with_http_info(self, folder, token, **kwargs):  # noqa: E501
        """Delete the project folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_folder_using_delete_with_http_info(folder, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Folder name (required)
        :param str token: Server connection token (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_folder_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder' is set
        if ('folder' not in params or
                params['folder'] is None):
            raise ValueError("Missing the required parameter `folder` when calling `delete_folder_using_delete`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `delete_folder_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder' in params:
            path_params['folder'] = params['folder']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/pfolder/{folder}/{token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_folder_struct_using_get(self, token, **kwargs):  # noqa: E501
        """Return the folder structure  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_folder_struct_using_get(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Server connection token (required)
        :return: VGroupFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_folder_struct_using_get_with_http_info(token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_folder_struct_using_get_with_http_info(token, **kwargs)  # noqa: E501
            return data

    def get_folder_struct_using_get_with_http_info(self, token, **kwargs):  # noqa: E501
        """Return the folder structure  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_folder_struct_using_get_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str token: Server connection token (required)
        :return: VGroupFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_folder_struct_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_folder_struct_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/pfolder/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VGroupFolder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rename_project_folder_using_put(self, folder, name, token, **kwargs):  # noqa: E501
        """Rename project folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_project_folder_using_put(folder, name, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Folder name (required)
        :param str name: New folder name (required)
        :param str token: Server connection token (required)
        :return: VGroupFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.rename_project_folder_using_put_with_http_info(folder, name, token, **kwargs)  # noqa: E501
        else:
            (data) = self.rename_project_folder_using_put_with_http_info(folder, name, token, **kwargs)  # noqa: E501
            return data

    def rename_project_folder_using_put_with_http_info(self, folder, name, token, **kwargs):  # noqa: E501
        """Rename project folder  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.rename_project_folder_using_put_with_http_info(folder, name, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str folder: Folder name (required)
        :param str name: New folder name (required)
        :param str token: Server connection token (required)
        :return: VGroupFolder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['folder', 'name', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rename_project_folder_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'folder' is set
        if ('folder' not in params or
                params['folder'] is None):
            raise ValueError("Missing the required parameter `folder` when calling `rename_project_folder_using_put`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `rename_project_folder_using_put`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `rename_project_folder_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'folder' in params:
            path_params['folder'] = params['folder']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/pfolder/rename/{folder}/{token}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VGroupFolder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
