# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ConverterControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def convert_to_w_cax_using_post(self, model, name, node, repository, token, ver, **kwargs):  # noqa: E501
        """Convert file to wcax  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.convert_to_w_cax_using_post(model, name, node, repository, token, ver, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str name: Name for the document file (required)
        :param int node: Instance ID of the breakdown element (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param int ver: Instance ID of the document version (required)
        :param int act_timestamp: Timestamp of the request
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.convert_to_w_cax_using_post_with_http_info(model, name, node, repository, token, ver, **kwargs)  # noqa: E501
        else:
            (data) = self.convert_to_w_cax_using_post_with_http_info(model, name, node, repository, token, ver, **kwargs)  # noqa: E501
            return data

    def convert_to_w_cax_using_post_with_http_info(self, model, name, node, repository, token, ver, **kwargs):  # noqa: E501
        """Convert file to wcax  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.convert_to_w_cax_using_post_with_http_info(model, name, node, repository, token, ver, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str name: Name for the document file (required)
        :param int node: Instance ID of the breakdown element (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param int ver: Instance ID of the document version (required)
        :param int act_timestamp: Timestamp of the request
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'name', 'node', 'repository', 'token', 'ver', 'act_timestamp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method convert_to_w_cax_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `convert_to_w_cax_using_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `convert_to_w_cax_using_post`")  # noqa: E501
        # verify the required parameter 'node' is set
        if ('node' not in params or
                params['node'] is None):
            raise ValueError("Missing the required parameter `node` when calling `convert_to_w_cax_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `convert_to_w_cax_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `convert_to_w_cax_using_post`")  # noqa: E501
        # verify the required parameter 'ver' is set
        if ('ver' not in params or
                params['ver'] is None):
            raise ValueError("Missing the required parameter `ver` when calling `convert_to_w_cax_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'node' in params:
            path_params['node'] = params['node']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'act_timestamp' in params:
            query_params.append(('act_timestamp', params['act_timestamp']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'ver' in params:
            query_params.append(('ver', params['ver']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/conv/wcax/{repository}/{model}/{node}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
