# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class NotificationControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_action_using_post(self, model, msg, name, repository, subj, token, type, **kwargs):  # noqa: E501
        """Create new action in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_action_using_post(model, msg, name, repository, subj, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str msg: Action message (required)
        :param str name: Action name (required)
        :param str repository: Repository name (required)
        :param str subj: Action subject (required)
        :param str token: Server connection token (required)
        :param str type: Action type (required)
        :param int id: Action ID
        :param str roles: Action roles
        :param int subdomain: Action subdomain
        :param str users: Action users
        :return: ActionView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_action_using_post_with_http_info(model, msg, name, repository, subj, token, type, **kwargs)  # noqa: E501
        else:
            (data) = self.create_action_using_post_with_http_info(model, msg, name, repository, subj, token, type, **kwargs)  # noqa: E501
            return data

    def create_action_using_post_with_http_info(self, model, msg, name, repository, subj, token, type, **kwargs):  # noqa: E501
        """Create new action in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_action_using_post_with_http_info(model, msg, name, repository, subj, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str msg: Action message (required)
        :param str name: Action name (required)
        :param str repository: Repository name (required)
        :param str subj: Action subject (required)
        :param str token: Server connection token (required)
        :param str type: Action type (required)
        :param int id: Action ID
        :param str roles: Action roles
        :param int subdomain: Action subdomain
        :param str users: Action users
        :return: ActionView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'msg', 'name', 'repository', 'subj', 'token', 'type', 'id', 'roles', 'subdomain', 'users']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_action_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `create_action_using_post`")  # noqa: E501
        # verify the required parameter 'msg' is set
        if ('msg' not in params or
                params['msg'] is None):
            raise ValueError("Missing the required parameter `msg` when calling `create_action_using_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_action_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `create_action_using_post`")  # noqa: E501
        # verify the required parameter 'subj' is set
        if ('subj' not in params or
                params['subj'] is None):
            raise ValueError("Missing the required parameter `subj` when calling `create_action_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `create_action_using_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `create_action_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'msg' in params:
            query_params.append(('msg', params['msg']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'roles' in params:
            query_params.append(('roles', params['roles']))  # noqa: E501
        if 'subdomain' in params:
            query_params.append(('subdomain', params['subdomain']))  # noqa: E501
        if 'subj' in params:
            query_params.append(('subj', params['subj']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'users' in params:
            query_params.append(('users', params['users']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/notify/act/{repository}/{model}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActionView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_msg_using_post(self, model, repository, subj, text, token, type, **kwargs):  # noqa: E501
        """Create new message to users in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_msg_using_post(model, repository, subj, text, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str subj: Message subject (required)
        :param str text: Message text (required)
        :param str token: Server connection token (required)
        :param str type: Message type (Info or Task) (required)
        :param str deadline: Task deadline
        :param str doc: Message document
        :param str node: Message node
        :param str status: Task status
        :param str str_id: Discussion first message id
        :param str users: Message users
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_msg_using_post_with_http_info(model, repository, subj, text, token, type, **kwargs)  # noqa: E501
        else:
            (data) = self.create_msg_using_post_with_http_info(model, repository, subj, text, token, type, **kwargs)  # noqa: E501
            return data

    def create_msg_using_post_with_http_info(self, model, repository, subj, text, token, type, **kwargs):  # noqa: E501
        """Create new message to users in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_msg_using_post_with_http_info(model, repository, subj, text, token, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str subj: Message subject (required)
        :param str text: Message text (required)
        :param str token: Server connection token (required)
        :param str type: Message type (Info or Task) (required)
        :param str deadline: Task deadline
        :param str doc: Message document
        :param str node: Message node
        :param str status: Task status
        :param str str_id: Discussion first message id
        :param str users: Message users
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'subj', 'text', 'token', 'type', 'deadline', 'doc', 'node', 'status', 'str_id', 'users']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_msg_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `create_msg_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `create_msg_using_post`")  # noqa: E501
        # verify the required parameter 'subj' is set
        if ('subj' not in params or
                params['subj'] is None):
            raise ValueError("Missing the required parameter `subj` when calling `create_msg_using_post`")  # noqa: E501
        # verify the required parameter 'text' is set
        if ('text' not in params or
                params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `create_msg_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `create_msg_using_post`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `create_msg_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'deadline' in params:
            query_params.append(('deadline', params['deadline']))  # noqa: E501
        if 'doc' in params:
            query_params.append(('doc', params['doc']))  # noqa: E501
        if 'node' in params:
            query_params.append(('node', params['node']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'str_id' in params:
            query_params.append(('str_id', params['str_id']))  # noqa: E501
        if 'subj' in params:
            query_params.append(('subj', params['subj']))  # noqa: E501
        if 'text' in params:
            query_params.append(('text', params['text']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'users' in params:
            query_params.append(('users', params['users']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/notify/msg/{repository}/{model}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_trigger_using_post(self, action, active, event, model, name, repository, token, **kwargs):  # noqa: E501
        """Create new trigger in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_trigger_using_post(action, active, event, model, name, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action: Trigger action (required)
        :param bool active: Trigger active state (required)
        :param str event: Trigger event type (required)
        :param str model: Model name (required)
        :param str name: Trigger name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str cond: Trigger condition
        :param int id: Trigger ID
        :return: TriggerView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_trigger_using_post_with_http_info(action, active, event, model, name, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.create_trigger_using_post_with_http_info(action, active, event, model, name, repository, token, **kwargs)  # noqa: E501
            return data

    def create_trigger_using_post_with_http_info(self, action, active, event, model, name, repository, token, **kwargs):  # noqa: E501
        """Create new trigger in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_trigger_using_post_with_http_info(action, active, event, model, name, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str action: Trigger action (required)
        :param bool active: Trigger active state (required)
        :param str event: Trigger event type (required)
        :param str model: Model name (required)
        :param str name: Trigger name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str cond: Trigger condition
        :param int id: Trigger ID
        :return: TriggerView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['action', 'active', 'event', 'model', 'name', 'repository', 'token', 'cond', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_trigger_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'action' is set
        if ('action' not in params or
                params['action'] is None):
            raise ValueError("Missing the required parameter `action` when calling `create_trigger_using_post`")  # noqa: E501
        # verify the required parameter 'active' is set
        if ('active' not in params or
                params['active'] is None):
            raise ValueError("Missing the required parameter `active` when calling `create_trigger_using_post`")  # noqa: E501
        # verify the required parameter 'event' is set
        if ('event' not in params or
                params['event'] is None):
            raise ValueError("Missing the required parameter `event` when calling `create_trigger_using_post`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `create_trigger_using_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_trigger_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `create_trigger_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `create_trigger_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'active' in params:
            query_params.append(('active', params['active']))  # noqa: E501
        if 'cond' in params:
            query_params.append(('cond', params['cond']))  # noqa: E501
        if 'event' in params:
            query_params.append(('event', params['event']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/notify/trigger/{repository}/{model}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TriggerView',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_act_using_delete(self, model, repository, token, **kwargs):  # noqa: E501
        """Delete acion from the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_act_using_delete(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str name: Action name pattern
        :return: list[ActionView]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_act_using_delete_with_http_info(model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_act_using_delete_with_http_info(model, repository, token, **kwargs)  # noqa: E501
            return data

    def delete_act_using_delete_with_http_info(self, model, repository, token, **kwargs):  # noqa: E501
        """Delete acion from the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_act_using_delete_with_http_info(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str name: Action name pattern
        :return: list[ActionView]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_act_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `delete_act_using_delete`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `delete_act_using_delete`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `delete_act_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/notify/act/{repository}/{model}/{token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ActionView]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_noti_tasks_using_delete(self, id, model, repository, token, **kwargs):  # noqa: E501
        """Delete specified notification task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_noti_tasks_using_delete(id, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Notification task instance ID (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_noti_tasks_using_delete_with_http_info(id, model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_noti_tasks_using_delete_with_http_info(id, model, repository, token, **kwargs)  # noqa: E501
            return data

    def delete_noti_tasks_using_delete_with_http_info(self, id, model, repository, token, **kwargs):  # noqa: E501
        """Delete specified notification task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_noti_tasks_using_delete_with_http_info(id, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Notification task instance ID (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_noti_tasks_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_noti_tasks_using_delete`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `delete_noti_tasks_using_delete`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `delete_noti_tasks_using_delete`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `delete_noti_tasks_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/notify/n_task/{repository}/{model}/{id}/{token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_trigger_using_delete(self, model, repository, token, **kwargs):  # noqa: E501
        """Delete trigger from the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_trigger_using_delete(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str act: Action name pattern
        :param str event: Event name pattern
        :param str name: Trigger name pattern
        :return: list[TriggerView]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_trigger_using_delete_with_http_info(model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_trigger_using_delete_with_http_info(model, repository, token, **kwargs)  # noqa: E501
            return data

    def delete_trigger_using_delete_with_http_info(self, model, repository, token, **kwargs):  # noqa: E501
        """Delete trigger from the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_trigger_using_delete_with_http_info(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str act: Action name pattern
        :param str event: Event name pattern
        :param str name: Trigger name pattern
        :return: list[TriggerView]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'act', 'event', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_trigger_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `delete_trigger_using_delete`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `delete_trigger_using_delete`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `delete_trigger_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'act' in params:
            query_params.append(('act', params['act']))  # noqa: E501
        if 'event' in params:
            query_params.append(('event', params['event']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/notify/trigger/{repository}/{model}/{token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TriggerView]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_actions_using_get(self, model, repository, token, **kwargs):  # noqa: E501
        """Returns the list of actions in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_actions_using_get(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str event: Action type
        :param str name: Action name pattern
        :return: list[TriggerView]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_actions_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.list_actions_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
            return data

    def list_actions_using_get_with_http_info(self, model, repository, token, **kwargs):  # noqa: E501
        """Returns the list of actions in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_actions_using_get_with_http_info(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str event: Action type
        :param str name: Action name pattern
        :return: list[TriggerView]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'event', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_actions_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `list_actions_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `list_actions_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `list_actions_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'event' in params:
            query_params.append(('event', params['event']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/notify/act/{repository}/{model}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TriggerView]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_noti_tasks_using_get(self, model, repository, token, **kwargs):  # noqa: E501
        """Returns the list of notification tasks in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_noti_tasks_using_get(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str act_name: Action name pattern
        :param str act_type: Action type
        :param str after: Created after date
        :param str before: Created before date
        :param bool is_open: Only open or closed tasks
        :return: list[TaskView]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_noti_tasks_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.list_noti_tasks_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
            return data

    def list_noti_tasks_using_get_with_http_info(self, model, repository, token, **kwargs):  # noqa: E501
        """Returns the list of notification tasks in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_noti_tasks_using_get_with_http_info(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str act_name: Action name pattern
        :param str act_type: Action type
        :param str after: Created after date
        :param str before: Created before date
        :param bool is_open: Only open or closed tasks
        :return: list[TaskView]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'act_name', 'act_type', 'after', 'before', 'is_open']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_noti_tasks_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `list_noti_tasks_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `list_noti_tasks_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `list_noti_tasks_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'act_name' in params:
            query_params.append(('act_name', params['act_name']))  # noqa: E501
        if 'act_type' in params:
            query_params.append(('act_type', params['act_type']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'is_open' in params:
            query_params.append(('is_open', params['is_open']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/notify/n_task/{repository}/{model}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TaskView]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_trigger_using_get(self, model, repository, token, **kwargs):  # noqa: E501
        """Returns the list of triggers in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_trigger_using_get(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str act: Action name pattern
        :param str event: Event name pattern
        :param bool is_active: Trigger active state
        :param str name: Trigger name pattern
        :return: list[TriggerView]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_trigger_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.list_trigger_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
            return data

    def list_trigger_using_get_with_http_info(self, model, repository, token, **kwargs):  # noqa: E501
        """Returns the list of triggers in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_trigger_using_get_with_http_info(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str act: Action name pattern
        :param str event: Event name pattern
        :param bool is_active: Trigger active state
        :param str name: Trigger name pattern
        :return: list[TriggerView]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'act', 'event', 'is_active', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_trigger_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `list_trigger_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `list_trigger_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `list_trigger_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'act' in params:
            query_params.append(('act', params['act']))  # noqa: E501
        if 'event' in params:
            query_params.append(('event', params['event']))  # noqa: E501
        if 'is_active' in params:
            query_params.append(('is_active', params['is_active']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/notify/trigger/{repository}/{model}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TriggerView]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_user_noti_tasks_using_get(self, model, repository, token, **kwargs):  # noqa: E501
        """Returns the list of notification tasks in project for the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_user_noti_tasks_using_get(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str act_name: Action name pattern
        :param str act_type: Action type
        :param str after: Created after date
        :param str before: Created before date
        :param bool is_open: Only open or closed tasks
        :return: list[TaskView]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_user_noti_tasks_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.list_user_noti_tasks_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
            return data

    def list_user_noti_tasks_using_get_with_http_info(self, model, repository, token, **kwargs):  # noqa: E501
        """Returns the list of notification tasks in project for the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_user_noti_tasks_using_get_with_http_info(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str act_name: Action name pattern
        :param str act_type: Action type
        :param str after: Created after date
        :param str before: Created before date
        :param bool is_open: Only open or closed tasks
        :return: list[TaskView]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'act_name', 'act_type', 'after', 'before', 'is_open']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_user_noti_tasks_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `list_user_noti_tasks_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `list_user_noti_tasks_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `list_user_noti_tasks_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'act_name' in params:
            query_params.append(('act_name', params['act_name']))  # noqa: E501
        if 'act_type' in params:
            query_params.append(('act_type', params['act_type']))  # noqa: E501
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'is_open' in params:
            query_params.append(('is_open', params['is_open']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/notify/user_task/{repository}/{model}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[TaskView]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_status_noti_task_for_user_using_delete(self, id, model, repository, token, **kwargs):  # noqa: E501
        """Mark specified notification task as resolved for the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_status_noti_task_for_user_using_delete(id, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Notification task instance ID (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_status_noti_task_for_user_using_delete_with_http_info(id, model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.set_status_noti_task_for_user_using_delete_with_http_info(id, model, repository, token, **kwargs)  # noqa: E501
            return data

    def set_status_noti_task_for_user_using_delete_with_http_info(self, id, model, repository, token, **kwargs):  # noqa: E501
        """Mark specified notification task as resolved for the current user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_status_noti_task_for_user_using_delete_with_http_info(id, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Notification task instance ID (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_status_noti_task_for_user_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `set_status_noti_task_for_user_using_delete`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `set_status_noti_task_for_user_using_delete`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `set_status_noti_task_for_user_using_delete`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `set_status_noti_task_for_user_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/notify/user_task/{repository}/{model}/{id}/{token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='bool',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_status_noti_task_using_put(self, id, model, repository, token, **kwargs):  # noqa: E501
        """Reactivate specified notification task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_status_noti_task_using_put(id, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Notification task instance ID (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param bool is_open: Only open or closed tasks
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_status_noti_task_using_put_with_http_info(id, model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.set_status_noti_task_using_put_with_http_info(id, model, repository, token, **kwargs)  # noqa: E501
            return data

    def set_status_noti_task_using_put_with_http_info(self, id, model, repository, token, **kwargs):  # noqa: E501
        """Reactivate specified notification task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_status_noti_task_using_put_with_http_info(id, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Notification task instance ID (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param bool is_open: Only open or closed tasks
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model', 'repository', 'token', 'is_open']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_status_noti_task_using_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `set_status_noti_task_using_put`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `set_status_noti_task_using_put`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `set_status_noti_task_using_put`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `set_status_noti_task_using_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'is_open' in params:
            query_params.append(('is_open', params['is_open']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/notify/n_task/{repository}/{model}/{id}/{token}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
