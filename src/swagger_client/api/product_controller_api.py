# coding: utf-8

"""
    Api Documentation

    Api Documentation  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProductControllerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_part_to_unit_using_post(self, aunit, model, prod, repository, token, **kwargs):  # noqa: E501
        """Add product to the assembly unit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_part_to_unit_using_post(aunit, model, prod, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int aunit: Instance ID of the representing_part or Product_view_definition of the assembly unit (required)
        :param str model: Model name (required)
        :param int prod: Instance ID of the representing_part or Product_view_definition of the product (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str location: Location label of the product
        :param int quantity: Quantity of the product
        :return: RepresentingPartV
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_part_to_unit_using_post_with_http_info(aunit, model, prod, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.add_part_to_unit_using_post_with_http_info(aunit, model, prod, repository, token, **kwargs)  # noqa: E501
            return data

    def add_part_to_unit_using_post_with_http_info(self, aunit, model, prod, repository, token, **kwargs):  # noqa: E501
        """Add product to the assembly unit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_part_to_unit_using_post_with_http_info(aunit, model, prod, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int aunit: Instance ID of the representing_part or Product_view_definition of the assembly unit (required)
        :param str model: Model name (required)
        :param int prod: Instance ID of the representing_part or Product_view_definition of the product (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str location: Location label of the product
        :param int quantity: Quantity of the product
        :return: RepresentingPartV
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aunit', 'model', 'prod', 'repository', 'token', 'location', 'quantity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_part_to_unit_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aunit' is set
        if ('aunit' not in params or
                params['aunit'] is None):
            raise ValueError("Missing the required parameter `aunit` when calling `add_part_to_unit_using_post`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `add_part_to_unit_using_post`")  # noqa: E501
        # verify the required parameter 'prod' is set
        if ('prod' not in params or
                params['prod'] is None):
            raise ValueError("Missing the required parameter `prod` when calling `add_part_to_unit_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `add_part_to_unit_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `add_part_to_unit_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aunit' in params:
            path_params['aunit'] = params['aunit']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501
        if 'prod' in params:
            query_params.append(('prod', params['prod']))  # noqa: E501
        if 'quantity' in params:
            query_params.append(('quantity', params['quantity']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prod/unit/{repository}/{model}/{aunit}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepresentingPartV',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_prod_using_post(self, model, repository, token, **kwargs):  # noqa: E501
        """Create new product in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_prod_using_post(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str description: Product description
        :param str domain: Product domain
        :param str id: Product ID
        :param str name: Product name
        :param str stage: Product stage
        :param str type_urn: Product type
        :param str version: Product version
        :return: RepresentingPartV
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_prod_using_post_with_http_info(model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.create_prod_using_post_with_http_info(model, repository, token, **kwargs)  # noqa: E501
            return data

    def create_prod_using_post_with_http_info(self, model, repository, token, **kwargs):  # noqa: E501
        """Create new product in the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_prod_using_post_with_http_info(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str description: Product description
        :param str domain: Product domain
        :param str id: Product ID
        :param str name: Product name
        :param str stage: Product stage
        :param str type_urn: Product type
        :param str version: Product version
        :return: RepresentingPartV
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'description', 'domain', 'id', 'name', 'stage', 'type_urn', 'version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_prod_using_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `create_prod_using_post`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `create_prod_using_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `create_prod_using_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'domain' in params:
            query_params.append(('domain', params['domain']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'stage' in params:
            query_params.append(('stage', params['stage']))  # noqa: E501
        if 'type_urn' in params:
            query_params.append(('type_urn', params['type_urn']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prod/{repository}/{model}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepresentingPartV',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_part_from_unit_using_delete(self, aunit, model, prod, repository, token, **kwargs):  # noqa: E501
        """Delete product from the assembly unit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_part_from_unit_using_delete(aunit, model, prod, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int aunit: Instance ID of the representing_part or Product_view_definition of the assembly unit (required)
        :param str model: Model name (required)
        :param int prod: Instance ID of the representing_part or Product_view_definition of the product (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str location: Location label of the product
        :param int quantity: Quantity of the product
        :return: list[AssembledPartV]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_part_from_unit_using_delete_with_http_info(aunit, model, prod, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_part_from_unit_using_delete_with_http_info(aunit, model, prod, repository, token, **kwargs)  # noqa: E501
            return data

    def delete_part_from_unit_using_delete_with_http_info(self, aunit, model, prod, repository, token, **kwargs):  # noqa: E501
        """Delete product from the assembly unit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_part_from_unit_using_delete_with_http_info(aunit, model, prod, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int aunit: Instance ID of the representing_part or Product_view_definition of the assembly unit (required)
        :param str model: Model name (required)
        :param int prod: Instance ID of the representing_part or Product_view_definition of the product (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str location: Location label of the product
        :param int quantity: Quantity of the product
        :return: list[AssembledPartV]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aunit', 'model', 'prod', 'repository', 'token', 'location', 'quantity']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_part_from_unit_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aunit' is set
        if ('aunit' not in params or
                params['aunit'] is None):
            raise ValueError("Missing the required parameter `aunit` when calling `delete_part_from_unit_using_delete`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `delete_part_from_unit_using_delete`")  # noqa: E501
        # verify the required parameter 'prod' is set
        if ('prod' not in params or
                params['prod'] is None):
            raise ValueError("Missing the required parameter `prod` when calling `delete_part_from_unit_using_delete`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `delete_part_from_unit_using_delete`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `delete_part_from_unit_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aunit' in params:
            path_params['aunit'] = params['aunit']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'location' in params:
            query_params.append(('location', params['location']))  # noqa: E501
        if 'prod' in params:
            query_params.append(('prod', params['prod']))  # noqa: E501
        if 'quantity' in params:
            query_params.append(('quantity', params['quantity']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prod/unit/{repository}/{model}/{aunit}/{token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssembledPartV]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_prod_using_delete(self, model, prod, repository, token, **kwargs):  # noqa: E501
        """Delete product from the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_prod_using_delete(model, prod, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param int prod: Instance ID of the representing_part or Product_view_definition of the assembly unit (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_prod_using_delete_with_http_info(model, prod, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_prod_using_delete_with_http_info(model, prod, repository, token, **kwargs)  # noqa: E501
            return data

    def delete_prod_using_delete_with_http_info(self, model, prod, repository, token, **kwargs):  # noqa: E501
        """Delete product from the project  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_prod_using_delete_with_http_info(model, prod, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param int prod: Instance ID of the representing_part or Product_view_definition of the assembly unit (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'prod', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_prod_using_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `delete_prod_using_delete`")  # noqa: E501
        # verify the required parameter 'prod' is set
        if ('prod' not in params or
                params['prod'] is None):
            raise ValueError("Missing the required parameter `prod` when calling `delete_prod_using_delete`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `delete_prod_using_delete`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `delete_prod_using_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'prod' in params:
            path_params['prod'] = params['prod']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prod/{repository}/{model}/{prod}/{token}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_part_list_in_unit_using_get(self, aunit, model, repository, token, **kwargs):  # noqa: E501
        """Return the list of products in the assembly unit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_part_list_in_unit_using_get(aunit, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int aunit: Instance ID of the representing_part or Product_view_definition of the assembly unit (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[AssembledPartV]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_part_list_in_unit_using_get_with_http_info(aunit, model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_part_list_in_unit_using_get_with_http_info(aunit, model, repository, token, **kwargs)  # noqa: E501
            return data

    def get_part_list_in_unit_using_get_with_http_info(self, aunit, model, repository, token, **kwargs):  # noqa: E501
        """Return the list of products in the assembly unit  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_part_list_in_unit_using_get_with_http_info(aunit, model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int aunit: Instance ID of the representing_part or Product_view_definition of the assembly unit (required)
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[AssembledPartV]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['aunit', 'model', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_part_list_in_unit_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'aunit' is set
        if ('aunit' not in params or
                params['aunit'] is None):
            raise ValueError("Missing the required parameter `aunit` when calling `get_part_list_in_unit_using_get`")  # noqa: E501
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_part_list_in_unit_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_part_list_in_unit_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_part_list_in_unit_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'aunit' in params:
            path_params['aunit'] = params['aunit']  # noqa: E501
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prod/unit/{repository}/{model}/{aunit}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssembledPartV]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_prod_info_using_get(self, model, prod, repository, token, **kwargs):  # noqa: E501
        """Return product information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prod_info_using_get(model, prod, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param int prod: Instance ID of the representing_part or Product_view_definition of the product (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: RepresentingPartV
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_prod_info_using_get_with_http_info(model, prod, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_prod_info_using_get_with_http_info(model, prod, repository, token, **kwargs)  # noqa: E501
            return data

    def get_prod_info_using_get_with_http_info(self, model, prod, repository, token, **kwargs):  # noqa: E501
        """Return product information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prod_info_using_get_with_http_info(model, prod, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param int prod: Instance ID of the representing_part or Product_view_definition of the product (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: RepresentingPartV
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'prod', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_prod_info_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_prod_info_using_get`")  # noqa: E501
        # verify the required parameter 'prod' is set
        if ('prod' not in params or
                params['prod'] is None):
            raise ValueError("Missing the required parameter `prod` when calling `get_prod_info_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_prod_info_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_prod_info_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'prod' in params:
            path_params['prod'] = params['prod']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prod/info/{repository}/{model}/{prod}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepresentingPartV',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_prod_list_using_get(self, model, repository, token, **kwargs):  # noqa: E501
        """Return the list of the products with the filtering  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prod_list_using_get(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str after: Optional filter by created after timestamp (YYYY-MM-DD hh:mm:ss)
        :param str before: Optional filter by created before timestamp (YYYY-MM-DD hh:mm:ss)
        :param str domain: Optional filter by urn of domain
        :param str expression: Optional logical expression based on fields of representing_part_v (like \"part.name = 'XXX'\")
        :param str id: Optional filter by part id (pattern for LIKE)
        :param str name: Optional filter by part name (pattern for LIKE)
        :param str orderby: Optional order by (csv list of representing_part_v attributes with ASC or DESC suffix)
        :param int page_size: Optional page size of output (max output elements count)
        :param bool roots_only: Optional flag to list only parts/products that has no references to a parent in assembly structure
        :param str stage: Optional filter by urn of life cycle stage
        :param int start_ind: Optional start index in output list
        :param str type: Optional filter by parts type (super type)
        :param str ver: Optional filter by version
        :return: list[RepresentingPartV]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_prod_list_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_prod_list_using_get_with_http_info(model, repository, token, **kwargs)  # noqa: E501
            return data

    def get_prod_list_using_get_with_http_info(self, model, repository, token, **kwargs):  # noqa: E501
        """Return the list of the products with the filtering  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_prod_list_using_get_with_http_info(model, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param str after: Optional filter by created after timestamp (YYYY-MM-DD hh:mm:ss)
        :param str before: Optional filter by created before timestamp (YYYY-MM-DD hh:mm:ss)
        :param str domain: Optional filter by urn of domain
        :param str expression: Optional logical expression based on fields of representing_part_v (like \"part.name = 'XXX'\")
        :param str id: Optional filter by part id (pattern for LIKE)
        :param str name: Optional filter by part name (pattern for LIKE)
        :param str orderby: Optional order by (csv list of representing_part_v attributes with ASC or DESC suffix)
        :param int page_size: Optional page size of output (max output elements count)
        :param bool roots_only: Optional flag to list only parts/products that has no references to a parent in assembly structure
        :param str stage: Optional filter by urn of life cycle stage
        :param int start_ind: Optional start index in output list
        :param str type: Optional filter by parts type (super type)
        :param str ver: Optional filter by version
        :return: list[RepresentingPartV]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'repository', 'token', 'after', 'before', 'domain', 'expression', 'id', 'name', 'orderby', 'page_size', 'roots_only', 'stage', 'start_ind', 'type', 'ver']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_prod_list_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_prod_list_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_prod_list_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_prod_list_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'after' in params:
            query_params.append(('after', params['after']))  # noqa: E501
        if 'before' in params:
            query_params.append(('before', params['before']))  # noqa: E501
        if 'domain' in params:
            query_params.append(('domain', params['domain']))  # noqa: E501
        if 'expression' in params:
            query_params.append(('expression', params['expression']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'orderby' in params:
            query_params.append(('orderby', params['orderby']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'roots_only' in params:
            query_params.append(('roots_only', params['roots_only']))  # noqa: E501
        if 'stage' in params:
            query_params.append(('stage', params['stage']))  # noqa: E501
        if 'start_ind' in params:
            query_params.append(('start_ind', params['start_ind']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'ver' in params:
            query_params.append(('ver', params['ver']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prod/{repository}/{model}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RepresentingPartV]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_unit_list_using_get(self, model, prod, repository, token, **kwargs):  # noqa: E501
        """Return the list of the assembly units which contain the product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unit_list_using_get(model, prod, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param int prod: Instance ID of the representing_part or Product_view_definition of the product (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[AssembledPartV]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_unit_list_using_get_with_http_info(model, prod, repository, token, **kwargs)  # noqa: E501
        else:
            (data) = self.get_unit_list_using_get_with_http_info(model, prod, repository, token, **kwargs)  # noqa: E501
            return data

    def get_unit_list_using_get_with_http_info(self, model, prod, repository, token, **kwargs):  # noqa: E501
        """Return the list of the assembly units which contain the product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_unit_list_using_get_with_http_info(model, prod, repository, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param int prod: Instance ID of the representing_part or Product_view_definition of the product (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :return: list[AssembledPartV]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'prod', 'repository', 'token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_unit_list_using_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `get_unit_list_using_get`")  # noqa: E501
        # verify the required parameter 'prod' is set
        if ('prod' not in params or
                params['prod'] is None):
            raise ValueError("Missing the required parameter `prod` when calling `get_unit_list_using_get`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `get_unit_list_using_get`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `get_unit_list_using_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'prod' in params:
            path_params['prod'] = params['prod']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prod/unit_roots/{repository}/{model}/{prod}/{token}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssembledPartV]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_prop_using_post2(self, model, prod, props, ptypes, repository, token, vals, **kwargs):  # noqa: E501
        """Update user defined properties of the product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_prop_using_post2(model, prod, props, ptypes, repository, token, vals, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param int prod: Instance ID of the representing_part or Product_view_definition of the product (required)
        :param list[str] props: Property names (required)
        :param list[str] ptypes: Property types (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param list[str] vals: Property values (required)
        :param int act_timestamp: act_timestamp
        :param list[str] units: Property unites
        :return: RepresentingPartV
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_prop_using_post2_with_http_info(model, prod, props, ptypes, repository, token, vals, **kwargs)  # noqa: E501
        else:
            (data) = self.update_prop_using_post2_with_http_info(model, prod, props, ptypes, repository, token, vals, **kwargs)  # noqa: E501
            return data

    def update_prop_using_post2_with_http_info(self, model, prod, props, ptypes, repository, token, vals, **kwargs):  # noqa: E501
        """Update user defined properties of the product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_prop_using_post2_with_http_info(model, prod, props, ptypes, repository, token, vals, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model: Model name (required)
        :param int prod: Instance ID of the representing_part or Product_view_definition of the product (required)
        :param list[str] props: Property names (required)
        :param list[str] ptypes: Property types (required)
        :param str repository: Repository name (required)
        :param str token: Server connection token (required)
        :param list[str] vals: Property values (required)
        :param int act_timestamp: act_timestamp
        :param list[str] units: Property unites
        :return: RepresentingPartV
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model', 'prod', 'props', 'ptypes', 'repository', 'token', 'vals', 'act_timestamp', 'units']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_prop_using_post2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `update_prop_using_post2`")  # noqa: E501
        # verify the required parameter 'prod' is set
        if ('prod' not in params or
                params['prod'] is None):
            raise ValueError("Missing the required parameter `prod` when calling `update_prop_using_post2`")  # noqa: E501
        # verify the required parameter 'props' is set
        if ('props' not in params or
                params['props'] is None):
            raise ValueError("Missing the required parameter `props` when calling `update_prop_using_post2`")  # noqa: E501
        # verify the required parameter 'ptypes' is set
        if ('ptypes' not in params or
                params['ptypes'] is None):
            raise ValueError("Missing the required parameter `ptypes` when calling `update_prop_using_post2`")  # noqa: E501
        # verify the required parameter 'repository' is set
        if ('repository' not in params or
                params['repository'] is None):
            raise ValueError("Missing the required parameter `repository` when calling `update_prop_using_post2`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `update_prop_using_post2`")  # noqa: E501
        # verify the required parameter 'vals' is set
        if ('vals' not in params or
                params['vals'] is None):
            raise ValueError("Missing the required parameter `vals` when calling `update_prop_using_post2`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'model' in params:
            path_params['model'] = params['model']  # noqa: E501
        if 'prod' in params:
            path_params['prod'] = params['prod']  # noqa: E501
        if 'repository' in params:
            path_params['repository'] = params['repository']  # noqa: E501
        if 'token' in params:
            path_params['token'] = params['token']  # noqa: E501

        query_params = []
        if 'act_timestamp' in params:
            query_params.append(('act_timestamp', params['act_timestamp']))  # noqa: E501
        if 'props' in params:
            query_params.append(('props', params['props']))  # noqa: E501
            collection_formats['props'] = 'multi'  # noqa: E501
        if 'ptypes' in params:
            query_params.append(('ptypes', params['ptypes']))  # noqa: E501
            collection_formats['ptypes'] = 'multi'  # noqa: E501
        if 'units' in params:
            query_params.append(('units', params['units']))  # noqa: E501
            collection_formats['units'] = 'multi'  # noqa: E501
        if 'vals' in params:
            query_params.append(('vals', params['vals']))  # noqa: E501
            collection_formats['vals'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/prod/prop/{repository}/{model}/{prod}/{token}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RepresentingPartV',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
